
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000744  000007d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  000007e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f8  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ab  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d9  00000000  00000000  000026a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000921  00000000  00000000  00003612  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 a0 03 	jmp	0x740	; 0x740 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
	
};
int main(void)
{
	 // Initialize LCD display
	lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
	 
	 
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	08 e0       	ldi	r16, 0x08	; 8
 206:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 8; i++)
	{
		 // Store all new chars to memory line by line
		 lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	lcd_init(LCD_DISP_ON);
	 
	 
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	{
		 // Store all new chars to memory line by line
		 lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	 
	// Display first custom character
	lcd_gotoxy(15, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(0);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	 
   

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>

	lcd_gotoxy(11, 0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('a');
 240:	81 e6       	ldi	r24, 0x61	; 97
 242:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(1, 1);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('b');
 24e:	82 e6       	ldi	r24, 0x62	; 98
 250:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(11, 2);
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	8b e0       	ldi	r24, 0x0B	; 11
 258:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('c');
 25c:	83 e6       	ldi	r24, 0x63	; 99
 25e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16ms()
 262:	e1 eb       	ldi	r30, 0xB1	; 177
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	87 60       	ori	r24, 0x07	; 7
 26a:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable()
 26c:	e0 e7       	ldi	r30, 0x70	; 112
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	81 60       	ori	r24, 0x01	; 1
 274:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 276:	78 94       	sei
 278:	ff cf       	rjmp	.-2      	; 0x278 <main+0x84>

0000027a <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	1f 93       	push	r17
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	26 97       	sbiw	r28, 0x06	; 6
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	cd bf       	out	0x3d, r28	; 61
	static uint8_t ten_secs = 0;
	static uint8_t min = 0;
	static uint8_t ten_min = 0;
	static uint8_t x = 0;    
	static uint8_t x2 = 0;
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 2ac:	80 e2       	ldi	r24, 0x20	; 32
 2ae:	90 e2       	ldi	r25, 0x20	; 32
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
	char sec2[4] = "    ";
 2b4:	9c 83       	std	Y+4, r25	; 0x04
 2b6:	8b 83       	std	Y+3, r24	; 0x03
 2b8:	9e 83       	std	Y+6, r25	; 0x06
 2ba:	8d 83       	std	Y+5, r24	; 0x05
    number_of_overflows++;
 2bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <number_of_overflows.2048>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <number_of_overflows.2048>
	number_of_overflows2++;
 2c6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <number_of_overflows2.2049>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (number_of_overflows2 >=60 )
 2cc:	8c 33       	cpi	r24, 0x3C	; 60
 2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_9+0x5c>
	static uint8_t x = 0;    
	static uint8_t x2 = 0;
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
	char sec2[4] = "    ";
    number_of_overflows++;
	number_of_overflows2++;
 2d0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <number_of_overflows2.2049>
 2d4:	2a c0       	rjmp	.+84     	; 0x32a <__vector_9+0xb0>
	
	if (number_of_overflows2 >=60 )
	{  
		number_of_overflows2=0;
 2d6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <number_of_overflows2.2049>
		x++;
 2da:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <x.2055>
 2de:	1f 5f       	subi	r17, 0xFF	; 255
 2e0:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <x.2055>
		x2=pow(x,2);
 2e4:	61 2f       	mov	r22, r17
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 2f0:	9b 01       	movw	r18, r22
 2f2:	ac 01       	movw	r20, r24
 2f4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__mulsf3>
 2f8:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
 2fc:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <x2.2056>
		if(x >= 59)
 300:	1b 33       	cpi	r17, 0x3B	; 59
 302:	10 f0       	brcs	.+4      	; 0x308 <__vector_9+0x8e>
		{
			x=0;
 304:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <x.2055>
		}
		
		lcd_gotoxy(11, 0);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 310:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <x2.2056>
 314:	4a e0       	ldi	r20, 0x0A	; 10
 316:	be 01       	movw	r22, r28
 318:	6d 5f       	subi	r22, 0xFD	; 253
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__itoa_ncheck>
		itoa(x2, sec2, 10);
		lcd_puts(sec2);
 322:	ce 01       	movw	r24, r28
 324:	03 96       	adiw	r24, 0x03	; 3
 326:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	}
	
    if (number_of_overflows >= 6)
 32a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <number_of_overflows.2048>
 32e:	86 30       	cpi	r24, 0x06	; 6
 330:	08 f4       	brcc	.+2      	; 0x334 <__vector_9+0xba>
 332:	8d c0       	rjmp	.+282    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 334:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <number_of_overflows.2048>

		// WRITE YOUR CODE HERE
		
		tens ++;
 338:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tens.2050>
 33c:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens > 9)
 33e:	8a 30       	cpi	r24, 0x0A	; 10
 340:	18 f4       	brcc	.+6      	; 0x348 <__vector_9+0xce>
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;

		// WRITE YOUR CODE HERE
		
		tens ++;
 342:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tens.2050>
 346:	07 c0       	rjmp	.+14     	; 0x356 <__vector_9+0xdc>
		if (tens > 9)
		{ 
			tens = 0;
 348:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <tens.2050>
			secs ++;		
 34c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <secs.2051>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <secs.2051>
		}
		if(secs > 9)
 356:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <secs.2051>
 35a:	8a 30       	cpi	r24, 0x0A	; 10
 35c:	38 f0       	brcs	.+14     	; 0x36c <__vector_9+0xf2>
		{
			secs=0;
 35e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <secs.2051>
			ten_secs++;
 362:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ten_secs.2052>
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ten_secs.2052>
		}
		if(ten_secs >= 6)
 36c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ten_secs.2052>
 370:	86 30       	cpi	r24, 0x06	; 6
 372:	38 f0       	brcs	.+14     	; 0x382 <__vector_9+0x108>
		{
			ten_secs=0;
 374:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ten_secs.2052>
			min++;
 378:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <min.2053>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <min.2053>
		}
		if(min >= 9)
 382:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <min.2053>
 386:	89 30       	cpi	r24, 0x09	; 9
 388:	38 f0       	brcs	.+14     	; 0x398 <__vector_9+0x11e>
		{
			min=0;
 38a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <min.2053>
			ten_min++;
 38e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 392:	8f 5f       	subi	r24, 0xFF	; 255
 394:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}
		if(ten_min >= 6)
 398:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 39c:	86 30       	cpi	r24, 0x06	; 6
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__vector_9+0x12a>
		{
			ten_min=0;
 3a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 3a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tens.2050>
 3a8:	4a e0       	ldi	r20, 0x0A	; 10
 3aa:	be 01       	movw	r22, r28
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__itoa_ncheck>
		}
	 // Convert decimal value to string
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7, 0);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3c6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <secs.2051>
 3ca:	4a e0       	ldi	r20, 0x0A	; 10
 3cc:	be 01       	movw	r22, r28
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__itoa_ncheck>
		itoa(secs, lcd_string, 10);
		lcd_gotoxy(5, 0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ten_secs.2052>
 3ec:	4a e0       	ldi	r20, 0x0A	; 10
 3ee:	be 01       	movw	r22, r28
 3f0:	6f 5f       	subi	r22, 0xFF	; 255
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__itoa_ncheck>
		itoa(ten_secs, lcd_string, 10);
		lcd_gotoxy(4, 0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 40a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <min.2053>
 40e:	4a e0       	ldi	r20, 0x0A	; 10
 410:	be 01       	movw	r22, r28
 412:	6f 5f       	subi	r22, 0xFF	; 255
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__itoa_ncheck>
		itoa(min, lcd_string, 10);
		lcd_gotoxy(2, 0);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 42c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 430:	4a e0       	ldi	r20, 0x0A	; 10
 432:	be 01       	movw	r22, r28
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__itoa_ncheck>
		itoa(ten_min, lcd_string, 10);
		lcd_gotoxy(1, 0);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		
		
		
        
    }
 44e:	26 96       	adiw	r28, 0x06	; 6
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	1f 91       	pop	r17
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__fixunssfsi>:
 482:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_splitA>
 486:	88 f0       	brcs	.+34     	; 0x4aa <__fixunssfsi+0x28>
 488:	9f 57       	subi	r25, 0x7F	; 127
 48a:	98 f0       	brcs	.+38     	; 0x4b2 <__fixunssfsi+0x30>
 48c:	b9 2f       	mov	r27, r25
 48e:	99 27       	eor	r25, r25
 490:	b7 51       	subi	r27, 0x17	; 23
 492:	b0 f0       	brcs	.+44     	; 0x4c0 <__fixunssfsi+0x3e>
 494:	e1 f0       	breq	.+56     	; 0x4ce <__fixunssfsi+0x4c>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	1a f0       	brmi	.+6      	; 0x4a6 <__fixunssfsi+0x24>
 4a0:	ba 95       	dec	r27
 4a2:	c9 f7       	brne	.-14     	; 0x496 <__fixunssfsi+0x14>
 4a4:	14 c0       	rjmp	.+40     	; 0x4ce <__fixunssfsi+0x4c>
 4a6:	b1 30       	cpi	r27, 0x01	; 1
 4a8:	91 f0       	breq	.+36     	; 0x4ce <__fixunssfsi+0x4c>
 4aa:	0e 94 cf 02 	call	0x59e	; 0x59e <__fp_zero>
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_zero>
 4b6:	67 2f       	mov	r22, r23
 4b8:	78 2f       	mov	r23, r24
 4ba:	88 27       	eor	r24, r24
 4bc:	b8 5f       	subi	r27, 0xF8	; 248
 4be:	39 f0       	breq	.+14     	; 0x4ce <__fixunssfsi+0x4c>
 4c0:	b9 3f       	cpi	r27, 0xF9	; 249
 4c2:	cc f3       	brlt	.-14     	; 0x4b6 <__fixunssfsi+0x34>
 4c4:	86 95       	lsr	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b3 95       	inc	r27
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__fixunssfsi+0x42>
 4ce:	3e f4       	brtc	.+14     	; 0x4de <__fixunssfsi+0x5c>
 4d0:	90 95       	com	r25
 4d2:	80 95       	com	r24
 4d4:	70 95       	com	r23
 4d6:	61 95       	neg	r22
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__floatunsisf>:
 4e0:	e8 94       	clt
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__floatsisf+0x12>

000004e4 <__floatsisf>:
 4e4:	97 fb       	bst	r25, 7
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__floatsisf+0x12>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	99 23       	and	r25, r25
 4f8:	a9 f0       	breq	.+42     	; 0x524 <__floatsisf+0x40>
 4fa:	f9 2f       	mov	r31, r25
 4fc:	96 e9       	ldi	r25, 0x96	; 150
 4fe:	bb 27       	eor	r27, r27
 500:	93 95       	inc	r25
 502:	f6 95       	lsr	r31
 504:	87 95       	ror	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f1 11       	cpse	r31, r1
 50e:	f8 cf       	rjmp	.-16     	; 0x500 <__floatsisf+0x1c>
 510:	fa f4       	brpl	.+62     	; 0x550 <__floatsisf+0x6c>
 512:	bb 0f       	add	r27, r27
 514:	11 f4       	brne	.+4      	; 0x51a <__floatsisf+0x36>
 516:	60 ff       	sbrs	r22, 0
 518:	1b c0       	rjmp	.+54     	; 0x550 <__floatsisf+0x6c>
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	16 c0       	rjmp	.+44     	; 0x550 <__floatsisf+0x6c>
 524:	88 23       	and	r24, r24
 526:	11 f0       	breq	.+4      	; 0x52c <__floatsisf+0x48>
 528:	96 e9       	ldi	r25, 0x96	; 150
 52a:	11 c0       	rjmp	.+34     	; 0x54e <__floatsisf+0x6a>
 52c:	77 23       	and	r23, r23
 52e:	21 f0       	breq	.+8      	; 0x538 <__floatsisf+0x54>
 530:	9e e8       	ldi	r25, 0x8E	; 142
 532:	87 2f       	mov	r24, r23
 534:	76 2f       	mov	r23, r22
 536:	05 c0       	rjmp	.+10     	; 0x542 <__floatsisf+0x5e>
 538:	66 23       	and	r22, r22
 53a:	71 f0       	breq	.+28     	; 0x558 <__floatsisf+0x74>
 53c:	96 e8       	ldi	r25, 0x86	; 134
 53e:	86 2f       	mov	r24, r22
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	2a f0       	brmi	.+10     	; 0x550 <__floatsisf+0x6c>
 546:	9a 95       	dec	r25
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	da f7       	brpl	.-10     	; 0x546 <__floatsisf+0x62>
 550:	88 0f       	add	r24, r24
 552:	96 95       	lsr	r25
 554:	87 95       	ror	r24
 556:	97 f9       	bld	r25, 7
 558:	08 95       	ret

0000055a <__fp_split3>:
 55a:	57 fd       	sbrc	r21, 7
 55c:	90 58       	subi	r25, 0x80	; 128
 55e:	44 0f       	add	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	59 f0       	breq	.+22     	; 0x57a <__fp_splitA+0x10>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	71 f0       	breq	.+28     	; 0x584 <__fp_splitA+0x1a>
 568:	47 95       	ror	r20

0000056a <__fp_splitA>:
 56a:	88 0f       	add	r24, r24
 56c:	97 fb       	bst	r25, 7
 56e:	99 1f       	adc	r25, r25
 570:	61 f0       	breq	.+24     	; 0x58a <__fp_splitA+0x20>
 572:	9f 3f       	cpi	r25, 0xFF	; 255
 574:	79 f0       	breq	.+30     	; 0x594 <__fp_splitA+0x2a>
 576:	87 95       	ror	r24
 578:	08 95       	ret
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	14 06       	cpc	r1, r20
 580:	55 1f       	adc	r21, r21
 582:	f2 cf       	rjmp	.-28     	; 0x568 <__fp_split3+0xe>
 584:	46 95       	lsr	r20
 586:	f1 df       	rcall	.-30     	; 0x56a <__fp_splitA>
 588:	08 c0       	rjmp	.+16     	; 0x59a <__fp_splitA+0x30>
 58a:	16 16       	cp	r1, r22
 58c:	17 06       	cpc	r1, r23
 58e:	18 06       	cpc	r1, r24
 590:	99 1f       	adc	r25, r25
 592:	f1 cf       	rjmp	.-30     	; 0x576 <__fp_splitA+0xc>
 594:	86 95       	lsr	r24
 596:	71 05       	cpc	r23, r1
 598:	61 05       	cpc	r22, r1
 59a:	08 94       	sec
 59c:	08 95       	ret

0000059e <__fp_zero>:
 59e:	e8 94       	clt

000005a0 <__fp_szero>:
 5a0:	bb 27       	eor	r27, r27
 5a2:	66 27       	eor	r22, r22
 5a4:	77 27       	eor	r23, r23
 5a6:	cb 01       	movw	r24, r22
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret

000005ac <__mulsf3>:
 5ac:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__mulsf3x>
 5b0:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_round>
 5b4:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_pscA>
 5b8:	38 f0       	brcs	.+14     	; 0x5c8 <__mulsf3+0x1c>
 5ba:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscB>
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__mulsf3+0x1c>
 5c0:	95 23       	and	r25, r21
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <__mulsf3+0x1c>
 5c4:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>
 5c8:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_nan>
 5cc:	11 24       	eor	r1, r1
 5ce:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>

000005d2 <__mulsf3x>:
 5d2:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 5d6:	70 f3       	brcs	.-36     	; 0x5b4 <__mulsf3+0x8>

000005d8 <__mulsf3_pse>:
 5d8:	95 9f       	mul	r25, r21
 5da:	c1 f3       	breq	.-16     	; 0x5cc <__mulsf3+0x20>
 5dc:	95 0f       	add	r25, r21
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	55 1f       	adc	r21, r21
 5e2:	62 9f       	mul	r22, r18
 5e4:	f0 01       	movw	r30, r0
 5e6:	72 9f       	mul	r23, r18
 5e8:	bb 27       	eor	r27, r27
 5ea:	f0 0d       	add	r31, r0
 5ec:	b1 1d       	adc	r27, r1
 5ee:	63 9f       	mul	r22, r19
 5f0:	aa 27       	eor	r26, r26
 5f2:	f0 0d       	add	r31, r0
 5f4:	b1 1d       	adc	r27, r1
 5f6:	aa 1f       	adc	r26, r26
 5f8:	64 9f       	mul	r22, r20
 5fa:	66 27       	eor	r22, r22
 5fc:	b0 0d       	add	r27, r0
 5fe:	a1 1d       	adc	r26, r1
 600:	66 1f       	adc	r22, r22
 602:	82 9f       	mul	r24, r18
 604:	22 27       	eor	r18, r18
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	62 1f       	adc	r22, r18
 60c:	73 9f       	mul	r23, r19
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	62 1f       	adc	r22, r18
 614:	83 9f       	mul	r24, r19
 616:	a0 0d       	add	r26, r0
 618:	61 1d       	adc	r22, r1
 61a:	22 1f       	adc	r18, r18
 61c:	74 9f       	mul	r23, r20
 61e:	33 27       	eor	r19, r19
 620:	a0 0d       	add	r26, r0
 622:	61 1d       	adc	r22, r1
 624:	23 1f       	adc	r18, r19
 626:	84 9f       	mul	r24, r20
 628:	60 0d       	add	r22, r0
 62a:	21 1d       	adc	r18, r1
 62c:	82 2f       	mov	r24, r18
 62e:	76 2f       	mov	r23, r22
 630:	6a 2f       	mov	r22, r26
 632:	11 24       	eor	r1, r1
 634:	9f 57       	subi	r25, 0x7F	; 127
 636:	50 40       	sbci	r21, 0x00	; 0
 638:	9a f0       	brmi	.+38     	; 0x660 <__mulsf3_pse+0x88>
 63a:	f1 f0       	breq	.+60     	; 0x678 <__mulsf3_pse+0xa0>
 63c:	88 23       	and	r24, r24
 63e:	4a f0       	brmi	.+18     	; 0x652 <__mulsf3_pse+0x7a>
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	bb 1f       	adc	r27, r27
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	91 50       	subi	r25, 0x01	; 1
 64e:	50 40       	sbci	r21, 0x00	; 0
 650:	a9 f7       	brne	.-22     	; 0x63c <__mulsf3_pse+0x64>
 652:	9e 3f       	cpi	r25, 0xFE	; 254
 654:	51 05       	cpc	r21, r1
 656:	80 f0       	brcs	.+32     	; 0x678 <__mulsf3_pse+0xa0>
 658:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>
 65c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	e4 f3       	brlt	.-8      	; 0x65c <__mulsf3_pse+0x84>
 664:	98 3e       	cpi	r25, 0xE8	; 232
 666:	d4 f3       	brlt	.-12     	; 0x65c <__mulsf3_pse+0x84>
 668:	86 95       	lsr	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f7 95       	ror	r31
 672:	e7 95       	ror	r30
 674:	9f 5f       	subi	r25, 0xFF	; 255
 676:	c1 f7       	brne	.-16     	; 0x668 <__mulsf3_pse+0x90>
 678:	fe 2b       	or	r31, r30
 67a:	88 0f       	add	r24, r24
 67c:	91 1d       	adc	r25, r1
 67e:	96 95       	lsr	r25
 680:	87 95       	ror	r24
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__fp_inf>:
 686:	97 f9       	bld	r25, 7
 688:	9f 67       	ori	r25, 0x7F	; 127
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	08 95       	ret

00000692 <__fp_nan>:
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	80 ec       	ldi	r24, 0xC0	; 192
 696:	08 95       	ret

00000698 <__fp_pscA>:
 698:	00 24       	eor	r0, r0
 69a:	0a 94       	dec	r0
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	18 06       	cpc	r1, r24
 6a2:	09 06       	cpc	r0, r25
 6a4:	08 95       	ret

000006a6 <__fp_pscB>:
 6a6:	00 24       	eor	r0, r0
 6a8:	0a 94       	dec	r0
 6aa:	12 16       	cp	r1, r18
 6ac:	13 06       	cpc	r1, r19
 6ae:	14 06       	cpc	r1, r20
 6b0:	05 06       	cpc	r0, r21
 6b2:	08 95       	ret

000006b4 <__fp_round>:
 6b4:	09 2e       	mov	r0, r25
 6b6:	03 94       	inc	r0
 6b8:	00 0c       	add	r0, r0
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__fp_round+0xc>
 6bc:	88 23       	and	r24, r24
 6be:	52 f0       	brmi	.+20     	; 0x6d4 <__fp_round+0x20>
 6c0:	bb 0f       	add	r27, r27
 6c2:	40 f4       	brcc	.+16     	; 0x6d4 <__fp_round+0x20>
 6c4:	bf 2b       	or	r27, r31
 6c6:	11 f4       	brne	.+4      	; 0x6cc <__fp_round+0x18>
 6c8:	60 ff       	sbrs	r22, 0
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <__fp_round+0x20>
 6cc:	6f 5f       	subi	r22, 0xFF	; 255
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__itoa_ncheck>:
 6d6:	bb 27       	eor	r27, r27
 6d8:	4a 30       	cpi	r20, 0x0A	; 10
 6da:	31 f4       	brne	.+12     	; 0x6e8 <__itoa_ncheck+0x12>
 6dc:	99 23       	and	r25, r25
 6de:	22 f4       	brpl	.+8      	; 0x6e8 <__itoa_ncheck+0x12>
 6e0:	bd e2       	ldi	r27, 0x2D	; 45
 6e2:	90 95       	com	r25
 6e4:	81 95       	neg	r24
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__utoa_common>

000006ec <__utoa_ncheck>:
 6ec:	bb 27       	eor	r27, r27

000006ee <__utoa_common>:
 6ee:	fb 01       	movw	r30, r22
 6f0:	55 27       	eor	r21, r21
 6f2:	aa 27       	eor	r26, r26
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	aa 1f       	adc	r26, r26
 6fa:	a4 17       	cp	r26, r20
 6fc:	10 f0       	brcs	.+4      	; 0x702 <__utoa_common+0x14>
 6fe:	a4 1b       	sub	r26, r20
 700:	83 95       	inc	r24
 702:	50 51       	subi	r21, 0x10	; 16
 704:	b9 f7       	brne	.-18     	; 0x6f4 <__utoa_common+0x6>
 706:	a0 5d       	subi	r26, 0xD0	; 208
 708:	aa 33       	cpi	r26, 0x3A	; 58
 70a:	08 f0       	brcs	.+2      	; 0x70e <__utoa_common+0x20>
 70c:	a9 5d       	subi	r26, 0xD9	; 217
 70e:	a1 93       	st	Z+, r26
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	79 f7       	brne	.-34     	; 0x6f2 <__utoa_common+0x4>
 714:	b1 11       	cpse	r27, r1
 716:	b1 93       	st	Z+, r27
 718:	11 92       	st	Z+, r1
 71a:	cb 01       	movw	r24, r22
 71c:	0c 94 90 03 	jmp	0x720	; 0x720 <strrev>

00000720 <strrev>:
 720:	dc 01       	movw	r26, r24
 722:	fc 01       	movw	r30, r24
 724:	67 2f       	mov	r22, r23
 726:	71 91       	ld	r23, Z+
 728:	77 23       	and	r23, r23
 72a:	e1 f7       	brne	.-8      	; 0x724 <strrev+0x4>
 72c:	32 97       	sbiw	r30, 0x02	; 2
 72e:	04 c0       	rjmp	.+8      	; 0x738 <strrev+0x18>
 730:	7c 91       	ld	r23, X
 732:	6d 93       	st	X+, r22
 734:	70 83       	st	Z, r23
 736:	62 91       	ld	r22, -Z
 738:	ae 17       	cp	r26, r30
 73a:	bf 07       	cpc	r27, r31
 73c:	c8 f3       	brcs	.-14     	; 0x730 <strrev+0x10>
 73e:	08 95       	ret

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>
