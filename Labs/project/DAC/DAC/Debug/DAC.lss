
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000123e  000012d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800150  00800150  00001322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e09  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c16  00000000  00000000  0000330d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e96  00000000  00000000  00003f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00004dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00005200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb3  00000000  00000000  0000586a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000681d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_13>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_16>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_18>
      4c:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_19>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_21>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ee e3       	ldi	r30, 0x3E	; 62
      9a:	f2 e1       	ldi	r31, 0x12	; 18
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a0 35       	cpi	r26, 0x50	; 80
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a0 e5       	ldi	r26, 0x50	; 80
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	ad 39       	cpi	r26, 0x9D	; 157
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
      bc:	0c 94 1d 09 	jmp	0x123a	; 0x123a <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
      c4:	fc 01       	movw	r30, r24
      c6:	40 81       	ld	r20, Z
      c8:	21 e0       	ldi	r18, 0x01	; 1
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <GPIO_config_output+0xe>
      ce:	22 0f       	add	r18, r18
      d0:	33 1f       	adc	r19, r19
      d2:	6a 95       	dec	r22
      d4:	e2 f7       	brpl	.-8      	; 0xce <GPIO_config_output+0xa>
      d6:	24 2b       	or	r18, r20
      d8:	20 83       	st	Z, r18
      da:	08 95       	ret

000000dc <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
      dc:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
      de:	90 81       	ld	r25, Z
      e0:	21 e0       	ldi	r18, 0x01	; 1
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	02 c0       	rjmp	.+4      	; 0xea <GPIO_write_low+0xe>
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	6a 95       	dec	r22
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <GPIO_write_low+0xa>
      ee:	20 95       	com	r18
      f0:	29 23       	and	r18, r25
      f2:	20 83       	st	Z, r18
      f4:	08 95       	ret

000000f6 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name | (1<<pin_num);
      f6:	fc 01       	movw	r30, r24
      f8:	40 81       	ld	r20, Z
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_write_high+0xe>
     100:	22 0f       	add	r18, r18
     102:	33 1f       	adc	r19, r19
     104:	6a 95       	dec	r22
     106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_write_high+0xa>
     108:	24 2b       	or	r18, r20
     10a:	20 83       	st	Z, r18
     10c:	08 95       	ret

0000010e <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
 void GPIO_toggle (volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name ^ (1<<pin_num);
     10e:	fc 01       	movw	r30, r24
     110:	40 81       	ld	r20, Z
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	02 c0       	rjmp	.+4      	; 0x11c <GPIO_toggle+0xe>
     118:	22 0f       	add	r18, r18
     11a:	33 1f       	adc	r19, r19
     11c:	6a 95       	dec	r22
     11e:	e2 f7       	brpl	.-8      	; 0x118 <GPIO_toggle+0xa>
     120:	24 27       	eor	r18, r20
     122:	20 83       	st	Z, r18
     124:	08 95       	ret

00000126 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     126:	29 9a       	sbi	0x05, 1	; 5
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	8a 95       	dec	r24
     12c:	f1 f7       	brne	.-4      	; 0x12a <toggle_e+0x4>
     12e:	00 00       	nop
     130:	29 98       	cbi	0x05, 1	; 5
     132:	08 95       	ret

00000134 <lcd_write>:
     134:	cf 93       	push	r28
     136:	c8 2f       	mov	r28, r24
     138:	66 23       	and	r22, r22
     13a:	11 f0       	breq	.+4      	; 0x140 <lcd_write+0xc>
     13c:	28 9a       	sbi	0x05, 0	; 5
     13e:	01 c0       	rjmp	.+2      	; 0x142 <lcd_write+0xe>
     140:	28 98       	cbi	0x05, 0	; 5
     142:	54 9a       	sbi	0x0a, 4	; 10
     144:	55 9a       	sbi	0x0a, 5	; 10
     146:	56 9a       	sbi	0x0a, 6	; 10
     148:	57 9a       	sbi	0x0a, 7	; 10
     14a:	5f 98       	cbi	0x0b, 7	; 11
     14c:	5e 98       	cbi	0x0b, 6	; 11
     14e:	5d 98       	cbi	0x0b, 5	; 11
     150:	5c 98       	cbi	0x0b, 4	; 11
     152:	cc 23       	and	r28, r28
     154:	0c f4       	brge	.+2      	; 0x158 <lcd_write+0x24>
     156:	5f 9a       	sbi	0x0b, 7	; 11
     158:	c6 fd       	sbrc	r28, 6
     15a:	5e 9a       	sbi	0x0b, 6	; 11
     15c:	c5 fd       	sbrc	r28, 5
     15e:	5d 9a       	sbi	0x0b, 5	; 11
     160:	c4 fd       	sbrc	r28, 4
     162:	5c 9a       	sbi	0x0b, 4	; 11
     164:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     168:	5f 98       	cbi	0x0b, 7	; 11
     16a:	5e 98       	cbi	0x0b, 6	; 11
     16c:	5d 98       	cbi	0x0b, 5	; 11
     16e:	5c 98       	cbi	0x0b, 4	; 11
     170:	c3 fd       	sbrc	r28, 3
     172:	5f 9a       	sbi	0x0b, 7	; 11
     174:	c2 fd       	sbrc	r28, 2
     176:	5e 9a       	sbi	0x0b, 6	; 11
     178:	c1 fd       	sbrc	r28, 1
     17a:	5d 9a       	sbi	0x0b, 5	; 11
     17c:	c0 fd       	sbrc	r28, 0
     17e:	5c 9a       	sbi	0x0b, 4	; 11
     180:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     184:	5c 9a       	sbi	0x0b, 4	; 11
     186:	5d 9a       	sbi	0x0b, 5	; 11
     188:	5e 9a       	sbi	0x0b, 6	; 11
     18a:	5f 9a       	sbi	0x0b, 7	; 11
     18c:	87 eb       	ldi	r24, 0xB7	; 183
     18e:	9b e0       	ldi	r25, 0x0B	; 11
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_write+0x5c>
     194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_write+0x62>
     196:	00 00       	nop
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <lcd_command>:
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
     1a2:	08 95       	ret

000001a4 <lcd_gotoxy>:
     1a4:	61 11       	cpse	r22, r1
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <lcd_gotoxy+0xc>
     1a8:	80 58       	subi	r24, 0x80	; 128
     1aa:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
     1ae:	08 95       	ret
     1b0:	80 54       	subi	r24, 0x40	; 64
     1b2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
     1b6:	08 95       	ret

000001b8 <lcd_clrscr>:
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
     1be:	08 95       	ret

000001c0 <lcd_putc>:
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
     1c6:	08 95       	ret

000001c8 <lcd_puts>:
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	ec 01       	movw	r28, r24
     1ce:	21 96       	adiw	r28, 0x01	; 1
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	88 23       	and	r24, r24
     1d6:	29 f0       	breq	.+10     	; 0x1e2 <lcd_puts+0x1a>
     1d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_putc>
     1dc:	89 91       	ld	r24, Y+
     1de:	81 11       	cpse	r24, r1
     1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <lcd_puts+0x10>
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     1e8:	cf 93       	push	r28
     1ea:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     1ec:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     1ee:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     1f0:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     1f2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     1f4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     1f6:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     1f8:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fa:	8f ef       	ldi	r24, 0xFF	; 255
     1fc:	99 ef       	ldi	r25, 0xF9	; 249
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x16>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x1c>
     204:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     206:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     208:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     20a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     20e:	8f e1       	ldi	r24, 0x1F	; 31
     210:	9e e4       	ldi	r25, 0x4E	; 78
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x2a>
     216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x30>
     218:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     21a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x3a>
     226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x40>
     228:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     22a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4a>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x50>
     238:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     23a:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     23c:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x5c>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x62>
     24a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     24c:	88 e2       	ldi	r24, 0x28	; 40
     24e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     252:	88 e0       	ldi	r24, 0x08	; 8
     254:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_clrscr();                  /* display clear                */
     258:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     262:	8c 2f       	mov	r24, r28
     264:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
}/* lcd_init */
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <fce>:
 * Main function where the program execution begins. Use Timer/Counter1
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */

unsigned int fce(unsigned int i ) {
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	bc 01       	movw	r22, r24
	
	if(fceType==0) 
     286:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     28a:	91 11       	cpse	r25, r1
     28c:	37 c0       	rjmp	.+110    	; 0x2fc <fce+0x90>
		return (unsigned int)(255*(1 + sin(i * 6.28 * Tvz/T))/2);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     296:	23 ec       	ldi	r18, 0xC3	; 195
     298:	35 ef       	ldi	r19, 0xF5	; 245
     29a:	48 ec       	ldi	r20, 0xC8	; 200
     29c:	50 e4       	ldi	r21, 0x40	; 64
     29e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     2a2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     2a6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     2aa:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     2ae:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     2b2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     2b6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <T>
     2ba:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <T+0x1>
     2be:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <T+0x2>
     2c2:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <T+0x3>
     2c6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     2ca:	0e 94 66 08 	call	0x10cc	; 0x10cc <sin>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e8       	ldi	r20, 0x80	; 128
     2d4:	5f e3       	ldi	r21, 0x3F	; 63
     2d6:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	4f e7       	ldi	r20, 0x7F	; 127
     2e0:	53 e4       	ldi	r21, 0x43	; 67
     2e2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     2f2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixunssfsi>
     2f6:	26 2f       	mov	r18, r22
     2f8:	97 2f       	mov	r25, r23
     2fa:	9d c0       	rjmp	.+314    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	else if(fceType==1)
     2fc:	91 30       	cpi	r25, 0x01	; 1
     2fe:	49 f5       	brne	.+82     	; 0x352 <fce+0xe6>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
     300:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     304:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     308:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     30c:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     318:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     31c:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     320:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     324:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     328:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     32c:	a7 01       	movw	r20, r14
     32e:	96 01       	movw	r18, r12
     330:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fmod>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	4f e7       	ldi	r20, 0x7F	; 127
     33a:	53 e4       	ldi	r21, 0x43	; 67
     33c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     340:	a7 01       	movw	r20, r14
     342:	96 01       	movw	r18, r12
     344:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     348:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixunssfsi>
     34c:	26 2f       	mov	r18, r22
     34e:	97 2f       	mov	r25, r23
     350:	72 c0       	rjmp	.+228    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	else if(fceType==2) {
     352:	92 30       	cpi	r25, 0x02	; 2
     354:	09 f0       	breq	.+2      	; 0x358 <fce+0xec>
     356:	6a c0       	rjmp	.+212    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		int j = (int)(i*Tvz/(T/2));
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     360:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     364:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     368:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     36c:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     370:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     374:	2b 01       	movw	r4, r22
     376:	3c 01       	movw	r6, r24
     378:	80 90 05 01 	lds	r8, 0x0105	; 0x800105 <T>
     37c:	90 90 06 01 	lds	r9, 0x0106	; 0x800106 <T+0x1>
     380:	a0 90 07 01 	lds	r10, 0x0107	; 0x800107 <T+0x2>
     384:	b0 90 08 01 	lds	r11, 0x0108	; 0x800108 <T+0x3>
		float a = 2*fmod(i*Tvz,T)/T; 
     388:	a5 01       	movw	r20, r10
     38a:	94 01       	movw	r18, r8
     38c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fmod>
     390:	9b 01       	movw	r18, r22
     392:	ac 01       	movw	r20, r24
     394:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3>
     398:	a5 01       	movw	r20, r10
     39a:	94 01       	movw	r18, r8
     39c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
		a = 255*(j%2<0.0001? a : 1 - a);   
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	5f e3       	ldi	r21, 0x3F	; 63
     3ac:	c5 01       	movw	r24, r10
     3ae:	b4 01       	movw	r22, r8
     3b0:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     3b4:	9b 01       	movw	r18, r22
     3b6:	ac 01       	movw	r20, r24
     3b8:	c3 01       	movw	r24, r6
     3ba:	b2 01       	movw	r22, r4
     3bc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     3c0:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixsfsi>
     3c4:	61 70       	andi	r22, 0x01	; 1
     3c6:	70 78       	andi	r23, 0x80	; 128
     3c8:	77 23       	and	r23, r23
     3ca:	34 f4       	brge	.+12     	; 0x3d8 <fce+0x16c>
     3cc:	61 50       	subi	r22, 0x01	; 1
     3ce:	71 09       	sbc	r23, r1
     3d0:	6e 6f       	ori	r22, 0xFE	; 254
     3d2:	7f 6f       	ori	r23, 0xFF	; 255
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	07 2e       	mov	r0, r23
     3da:	00 0c       	add	r0, r0
     3dc:	88 0b       	sbc	r24, r24
     3de:	99 0b       	sbc	r25, r25
     3e0:	0e 94 e7 06 	call	0xdce	; 0xdce <__floatsisf>
     3e4:	27 e1       	ldi	r18, 0x17	; 23
     3e6:	37 eb       	ldi	r19, 0xB7	; 183
     3e8:	41 ed       	ldi	r20, 0xD1	; 209
     3ea:	58 e3       	ldi	r21, 0x38	; 56
     3ec:	0e 94 38 06 	call	0xc70	; 0xc70 <__cmpsf2>
     3f0:	88 23       	and	r24, r24
     3f2:	4c f4       	brge	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	4f e7       	ldi	r20, 0x7F	; 127
     3fa:	53 e4       	ldi	r21, 0x43	; 67
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     404:	0e c0       	rjmp	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     406:	a7 01       	movw	r20, r14
     408:	96 01       	movw	r18, r12
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 e8       	ldi	r24, 0x80	; 128
     410:	9f e3       	ldi	r25, 0x3F	; 63
     412:	0e 94 cb 05 	call	0xb96	; 0xb96 <__subsf3>
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	53 e4       	ldi	r21, 0x43	; 67
     41e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
		return (unsigned int)a;	
     422:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixunssfsi>
     426:	26 2f       	mov	r18, r22
     428:	97 2f       	mov	r25, r23
     42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		//return (unsigned int)(255 * pow(-1,(int)(i*Tvz/T/2)) * 2 * fmod(i*Tvz,T)/T);
	}
	else if(fceType==10)
     42c:	9a 30       	cpi	r25, 0x0A	; 10
     42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	return (uint8_t)(0);
}
     430:	03 c0       	rjmp	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		a = 255*(j%2<0.0001? a : 1 - a);   
		return (unsigned int)a;	
		//return (unsigned int)(255 * pow(-1,(int)(i*Tvz/T/2)) * 2 * fmod(i*Tvz,T)/T);
	}
	else if(fceType==10)
	return (uint8_t)(0);
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	82 2f       	mov	r24, r18
}
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	9f 90       	pop	r9
     446:	8f 90       	pop	r8
     448:	7f 90       	pop	r7
     44a:	6f 90       	pop	r6
     44c:	5f 90       	pop	r5
     44e:	4f 90       	pop	r4
     450:	08 95       	ret

00000452 <setByte>:

unsigned setByte(unsigned int num) {
     452:	cf 93       	push	r28
     454:	c8 2f       	mov	r28, r24
	if (num & (0x01 << 0)) GPIO_write_high(&PORTD,PD3); else GPIO_write_low(&PORTD,PD3);
     456:	80 ff       	sbrs	r24, 0
     458:	07 c0       	rjmp	.+14     	; 0x468 <setByte+0x16>
     45a:	63 e0       	ldi	r22, 0x03	; 3
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	8b e2       	ldi	r24, 0x2B	; 43
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     466:	06 c0       	rjmp	.+12     	; 0x474 <setByte+0x22>
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	8b e2       	ldi	r24, 0x2B	; 43
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 1)) GPIO_write_high(&PORTD,PD2); else GPIO_write_low(&PORTD,PD2);
     474:	c1 ff       	sbrs	r28, 1
     476:	07 c0       	rjmp	.+14     	; 0x486 <setByte+0x34>
     478:	62 e0       	ldi	r22, 0x02	; 2
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8b e2       	ldi	r24, 0x2B	; 43
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     484:	06 c0       	rjmp	.+12     	; 0x492 <setByte+0x40>
     486:	62 e0       	ldi	r22, 0x02	; 2
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	8b e2       	ldi	r24, 0x2B	; 43
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 2)) GPIO_write_high(&PORTD,PD1); else GPIO_write_low(&PORTD,PD1);
     492:	c2 ff       	sbrs	r28, 2
     494:	07 c0       	rjmp	.+14     	; 0x4a4 <setByte+0x52>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	8b e2       	ldi	r24, 0x2B	; 43
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <setByte+0x5e>
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	8b e2       	ldi	r24, 0x2B	; 43
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 3)) GPIO_write_high(&PORTD,PD0); else GPIO_write_low(&PORTD,PD0);
     4b0:	c3 ff       	sbrs	r28, 3
     4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <setByte+0x70>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	8b e2       	ldi	r24, 0x2B	; 43
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <setByte+0x7c>
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	8b e2       	ldi	r24, 0x2B	; 43
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 4)) GPIO_write_high(&PORTC,PC6); else GPIO_write_low(&PORTC,PC6);
     4ce:	c4 ff       	sbrs	r28, 4
     4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <setByte+0x8e>
     4d2:	66 e0       	ldi	r22, 0x06	; 6
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	88 e2       	ldi	r24, 0x28	; 40
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <setByte+0x9a>
     4e0:	66 e0       	ldi	r22, 0x06	; 6
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	88 e2       	ldi	r24, 0x28	; 40
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 5)) GPIO_write_high(&PORTC,PC5); else GPIO_write_low(&PORTC,PC5);
     4ec:	c5 ff       	sbrs	r28, 5
     4ee:	07 c0       	rjmp	.+14     	; 0x4fe <setByte+0xac>
     4f0:	65 e0       	ldi	r22, 0x05	; 5
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <setByte+0xb8>
     4fe:	65 e0       	ldi	r22, 0x05	; 5
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	88 e2       	ldi	r24, 0x28	; 40
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 6)) GPIO_write_high(&PORTC,PC4); else GPIO_write_low(&PORTC,PC4);
     50a:	c6 ff       	sbrs	r28, 6
     50c:	07 c0       	rjmp	.+14     	; 0x51c <setByte+0xca>
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	88 e2       	ldi	r24, 0x28	; 40
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     51a:	06 c0       	rjmp	.+12     	; 0x528 <setByte+0xd6>
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	88 e2       	ldi	r24, 0x28	; 40
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 7)) GPIO_write_high(&PORTC,PC3); else GPIO_write_low(&PORTC,PC3);		
     528:	c7 ff       	sbrs	r28, 7
     52a:	07 c0       	rjmp	.+14     	; 0x53a <setByte+0xe8>
     52c:	63 e0       	ldi	r22, 0x03	; 3
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	88 e2       	ldi	r24, 0x28	; 40
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     538:	06 c0       	rjmp	.+12     	; 0x546 <setByte+0xf4>
     53a:	63 e0       	ldi	r22, 0x03	; 3
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	88 e2       	ldi	r24, 0x28	; 40
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
}
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <main>:

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     54a:	8c e0       	ldi	r24, 0x0C	; 12
     54c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("adc_value:");
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     558:	80 e1       	ldi	r24, 0x10	; 16
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
    lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     568:	8b e1       	ldi	r24, 0x1B	; 27
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	//config output 
	GPIO_config_output(&DDRD, PD0);
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	8a e2       	ldi	r24, 0x2A	; 42
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD1);
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	8a e2       	ldi	r24, 0x2A	; 42
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD2);
     588:	62 e0       	ldi	r22, 0x02	; 2
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	8a e2       	ldi	r24, 0x2A	; 42
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD3);
     594:	63 e0       	ldi	r22, 0x03	; 3
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	8a e2       	ldi	r24, 0x2A	; 42
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRB, PB6);
     5a0:	66 e0       	ldi	r22, 0x06	; 6
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	84 e2       	ldi	r24, 0x24	; 36
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC3);
     5ac:	63 e0       	ldi	r22, 0x03	; 3
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	87 e2       	ldi	r24, 0x27	; 39
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC4);
     5b8:	64 e0       	ldi	r22, 0x04	; 4
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	87 e2       	ldi	r24, 0x27	; 39
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC5);
     5c4:	65 e0       	ldi	r22, 0x05	; 5
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	87 e2       	ldi	r24, 0x27	; 39
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC6);
     5d0:	66 e0       	ldi	r22, 0x06	; 6
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	87 e2       	ldi	r24, 0x27	; 39
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	// Enable interrupt and set the overflow prescaler to 262 ms
	TIM2_overflow_interrupt_enable();
     5dc:	e0 e7       	ldi	r30, 0x70	; 112
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	80 83       	st	Z, r24
	TIM2_overflow_16us();
     5e6:	e1 eb       	ldi	r30, 0xB1	; 177
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	89 7f       	andi	r24, 0xF9	; 249
     5ee:	80 83       	st	Z, r24
     5f0:	80 81       	ld	r24, Z
     5f2:	81 60       	ori	r24, 0x01	; 1
     5f4:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
     5f6:	ef e6       	ldi	r30, 0x6F	; 111
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	80 83       	st	Z, r24
	TIM1_overflow_262ms();
     600:	e1 e8       	ldi	r30, 0x81	; 129
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	8b 7f       	andi	r24, 0xFB	; 251
     608:	80 83       	st	Z, r24
     60a:	80 81       	ld	r24, Z
     60c:	83 60       	ori	r24, 0x03	; 3
     60e:	80 83       	st	Z, r24
	TIM0_overflow_interrupt_enable();
     610:	ee e6       	ldi	r30, 0x6E	; 110
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	81 60       	ori	r24, 0x01	; 1
     618:	80 83       	st	Z, r24
	TIM0_overflow_1ms();
     61a:	85 b5       	in	r24, 0x25	; 37
     61c:	8b 7f       	andi	r24, 0xFB	; 251
     61e:	85 bd       	out	0x25, r24	; 37
     620:	85 b5       	in	r24, 0x25	; 37
     622:	83 60       	ori	r24, 0x03	; 3
     624:	85 bd       	out	0x25, r24	; 37
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
     626:	ec e7       	ldi	r30, 0x7C	; 124
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	80 64       	ori	r24, 0x40	; 64
     62e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     630:	80 81       	ld	r24, Z
     632:	8f 77       	andi	r24, 0x7F	; 127
     634:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
     636:	80 81       	ld	r24, Z
     638:	80 7f       	andi	r24, 0xF0	; 240
     63a:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
     63c:	ea e7       	ldi	r30, 0x7A	; 122
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	80 68       	ori	r24, 0x80	; 128
     644:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
     646:	80 81       	ld	r24, Z
     648:	88 60       	ori	r24, 0x08	; 8
     64a:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= ((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2));
     64c:	80 81       	ld	r24, Z
     64e:	87 60       	ori	r24, 0x07	; 7
     650:	80 83       	st	Z, r24
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     652:	87 e6       	ldi	r24, 0x67	; 103
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart_init>
	// Enables interrupts by setting the global interrupt mask
    sei();
     65a:	78 94       	sei
     65c:	ff cf       	rjmp	.-2      	; 0x65c <main+0x112>

0000065e <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{	
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	8f 93       	push	r24
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
     66e:	ea e7       	ldi	r30, 0x7A	; 122
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	80 64       	ori	r24, 0x40	; 64
     676:	80 83       	st	Z, r24
}
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	8f 91       	pop	r24
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
	uint16_t a =fce(i++);
     6aa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     6ae:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
     6b2:	9c 01       	movw	r18, r24
     6b4:	2f 5f       	subi	r18, 0xFF	; 255
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <__data_end+0x1>
     6bc:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     6c0:	0e 94 36 01 	call	0x26c	; 0x26c <fce>
	setByte(a);	
     6c4:	0e 94 29 02 	call	0x452	; 0x452 <setByte>
}	
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <__vector_9>:

ISR(TIMER2_OVF_vect)
{
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
	x++;
     70c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <x>
     710:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <x+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <x+0x1>
     71a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <x>
	if (x>=(DTMF/2)&&duration>1){
     71e:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <DTMF>
     722:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <DTMF+0x1>
     726:	36 95       	lsr	r19
     728:	27 95       	ror	r18
     72a:	82 17       	cp	r24, r18
     72c:	93 07       	cpc	r25, r19
     72e:	c8 f0       	brcs	.+50     	; 0x762 <__vector_9+0x78>
     730:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <duration>
     734:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <duration+0x1>
     738:	02 97       	sbiw	r24, 0x02	; 2
     73a:	98 f0       	brcs	.+38     	; 0x762 <__vector_9+0x78>
		GPIO_toggle(&PORTB,PB6);
     73c:	66 e0       	ldi	r22, 0x06	; 6
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	85 e2       	ldi	r24, 0x25	; 37
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 87 00 	call	0x10e	; 0x10e <GPIO_toggle>
		x=0;
     748:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <x+0x1>
     74c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <x>
		duration=duration-1;
     750:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <duration>
     754:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <duration+0x1>
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     75e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	}
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <__vector_21>:

ISR(ADC_vect)
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	26 97       	sbiw	r28, 0x06	; 6
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	cd bf       	out	0x3d, r28	; 61
	uint16_t value = ADC;
     7b8:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     7bc:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	char lcd_string[6] ="      ";
     7c0:	86 e0       	ldi	r24, 0x06	; 6
     7c2:	e9 e0       	ldi	r30, 0x09	; 9
     7c4:	f1 e0       	ldi	r31, 0x01	; 1
     7c6:	de 01       	movw	r26, r28
     7c8:	11 96       	adiw	r26, 0x01	; 1
     7ca:	01 90       	ld	r0, Z+
     7cc:	0d 92       	st	X+, r0
     7ce:	8a 95       	dec	r24
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <__vector_21+0x46>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	c8 01       	movw	r24, r16
     7dc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__itoa_ncheck>
	itoa(value, lcd_string, 10); // value to dacimal
	if (value < 700) // reduce amount of sent uart data
     7e0:	0c 3b       	cpi	r16, 0xBC	; 188
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	18 07       	cpc	r17, r24
     7e6:	60 f4       	brcc	.+24     	; 0x800 <__vector_21+0x7c>
	{
		uart_puts("ADC value in decimal:");
     7e8:	83 e2       	ldi	r24, 0x23	; 35
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 bc 05 	call	0xb78	; 0xb78 <uart_puts>
		uart_puts(lcd_string); // send uart value in decimal
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0e 94 bc 05 	call	0xb78	; 0xb78 <uart_puts>
		uart_puts("\n");
     7f8:	89 e3       	ldi	r24, 0x39	; 57
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 bc 05 	call	0xb78	; 0xb78 <uart_puts>
	}
	lcd_gotoxy(12, 0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts("    "); //clear area
     808:	8b e3       	ldi	r24, 0x3B	; 59
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	lcd_gotoxy(12, 0);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	8c e0       	ldi	r24, 0x0C	; 12
     814:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts(lcd_string); // show decimal
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	
	if (value>465 && value<520){fceType=0;DTMF=34;duration=300;}    //key1
     820:	c8 01       	movw	r24, r16
     822:	82 5d       	subi	r24, 0xD2	; 210
     824:	91 40       	sbci	r25, 0x01	; 1
     826:	c6 97       	sbiw	r24, 0x36	; 54
     828:	70 f4       	brcc	.+28     	; 0x846 <__vector_21+0xc2>
     82a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     82e:	82 e2       	ldi	r24, 0x22	; 34
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     836:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     83a:	8c e2       	ldi	r24, 0x2C	; 44
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     842:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>360 && value<380){fceType=1;DTMF=32;duration=300;}	//key2
     846:	c8 01       	movw	r24, r16
     848:	89 56       	subi	r24, 0x69	; 105
     84a:	91 40       	sbci	r25, 0x01	; 1
     84c:	43 97       	sbiw	r24, 0x13	; 19
     84e:	78 f4       	brcc	.+30     	; 0x86e <__vector_21+0xea>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     856:	80 e2       	ldi	r24, 0x20	; 32
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     85e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     862:	8c e2       	ldi	r24, 0x2C	; 44
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     86a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>198 && value<208){fceType=2;DTMF=30;duration=300;}	//key3
     86e:	c8 01       	movw	r24, r16
     870:	87 5c       	subi	r24, 0xC7	; 199
     872:	91 09       	sbc	r25, r1
     874:	09 97       	sbiw	r24, 0x09	; 9
     876:	78 f4       	brcc	.+30     	; 0x896 <__vector_21+0x112>
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     886:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     88a:	8c e2       	ldi	r24, 0x2C	; 44
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     892:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>450 && value<460){DTMF=32;duration=300;}				//key4
     896:	c8 01       	movw	r24, r16
     898:	83 5c       	subi	r24, 0xC3	; 195
     89a:	91 40       	sbci	r25, 0x01	; 1
     89c:	09 97       	sbiw	r24, 0x09	; 9
     89e:	60 f4       	brcc	.+24     	; 0x8b8 <__vector_21+0x134>
     8a0:	80 e2       	ldi	r24, 0x20	; 32
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8a8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8ac:	8c e2       	ldi	r24, 0x2C	; 44
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8b4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>330 && value<340){DTMF=30;duration=300;}				//key5
     8b8:	c8 01       	movw	r24, r16
     8ba:	8b 54       	subi	r24, 0x4B	; 75
     8bc:	91 40       	sbci	r25, 0x01	; 1
     8be:	09 97       	sbiw	r24, 0x09	; 9
     8c0:	60 f4       	brcc	.+24     	; 0x8da <__vector_21+0x156>
     8c2:	8e e1       	ldi	r24, 0x1E	; 30
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8ca:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8ce:	8c e2       	ldi	r24, 0x2C	; 44
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8d6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>140 && value<150){DTMF=29;duration=300;}				//key6
     8da:	c8 01       	movw	r24, r16
     8dc:	8d 58       	subi	r24, 0x8D	; 141
     8de:	91 09       	sbc	r25, r1
     8e0:	09 97       	sbiw	r24, 0x09	; 9
     8e2:	60 f4       	brcc	.+24     	; 0x8fc <__vector_21+0x178>
     8e4:	8d e1       	ldi	r24, 0x1D	; 29
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8ec:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8f0:	8c e2       	ldi	r24, 0x2C	; 44
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8f8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>420 && value<432){DTMF=32;duration=300;}				//key7
     8fc:	c8 01       	movw	r24, r16
     8fe:	85 5a       	subi	r24, 0xA5	; 165
     900:	91 40       	sbci	r25, 0x01	; 1
     902:	0b 97       	sbiw	r24, 0x0b	; 11
     904:	60 f4       	brcc	.+24     	; 0x91e <__stack+0x1f>
     906:	80 e2       	ldi	r24, 0x20	; 32
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     90e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     912:	8c e2       	ldi	r24, 0x2C	; 44
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     91a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>290 && value<300){DTMF=29;duration=300;}				//key8
     91e:	c8 01       	movw	r24, r16
     920:	83 52       	subi	r24, 0x23	; 35
     922:	91 40       	sbci	r25, 0x01	; 1
     924:	09 97       	sbiw	r24, 0x09	; 9
     926:	60 f4       	brcc	.+24     	; 0x940 <__stack+0x41>
     928:	8d e1       	ldi	r24, 0x1D	; 29
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     930:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     934:	8c e2       	ldi	r24, 0x2C	; 44
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     93c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>70 && value<80){DTMF=27;duration=300;}				//key9									
     940:	c8 01       	movw	r24, r16
     942:	87 54       	subi	r24, 0x47	; 71
     944:	91 09       	sbc	r25, r1
     946:	09 97       	sbiw	r24, 0x09	; 9
     948:	60 f4       	brcc	.+24     	; 0x962 <__stack+0x63>
     94a:	8b e1       	ldi	r24, 0x1B	; 27
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     952:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     956:	8c e2       	ldi	r24, 0x2C	; 44
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     95e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>390 && value<410){T=T*2;}						//key*
     962:	c8 01       	movw	r24, r16
     964:	87 58       	subi	r24, 0x87	; 135
     966:	91 40       	sbci	r25, 0x01	; 1
     968:	43 97       	sbiw	r24, 0x13	; 19
     96a:	a0 f4       	brcc	.+40     	; 0x994 <__stack+0x95>
     96c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <T>
     970:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <T+0x1>
     974:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <T+0x2>
     978:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <T+0x3>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3>
     984:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <T>
     988:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <T+0x1>
     98c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <T+0x2>
     990:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <T+0x3>
	if (value>240 && value<250){T=T/2;}						//key0
     994:	c8 01       	movw	r24, r16
     996:	81 5f       	subi	r24, 0xF1	; 241
     998:	91 09       	sbc	r25, r1
     99a:	09 97       	sbiw	r24, 0x09	; 9
     99c:	b0 f4       	brcc	.+44     	; 0x9ca <__stack+0xcb>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	5f e3       	ldi	r21, 0x3F	; 63
     9a6:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <T>
     9aa:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <T+0x1>
     9ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <T+0x2>
     9b2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <T+0x3>
     9b6:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     9ba:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <T>
     9be:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <T+0x1>
     9c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <T+0x2>
     9c6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <T+0x3>
	if (value==0)fceType=10;										//key#
     9ca:	01 2b       	or	r16, r17
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <__stack+0xd7>
     9ce:	8a e0       	ldi	r24, 0x0A	; 10
     9d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     9d4:	18 c0       	rjmp	.+48     	; 0xa06 <__stack+0x107>
		if (fceType==0){lcd_gotoxy(12, 1); lcd_puts("sin");}
     9d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9da:	81 11       	cpse	r24, r1
     9dc:	08 c0       	rjmp	.+16     	; 0x9ee <__stack+0xef>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	8c e0       	ldi	r24, 0x0C	; 12
     9e2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     9e6:	80 e4       	ldi	r24, 0x40	; 64
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		if (fceType==1){lcd_gotoxy(12, 1); lcd_puts("saw");}
     9ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	41 f4       	brne	.+16     	; 0xa06 <__stack+0x107>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	8c e0       	ldi	r24, 0x0C	; 12
     9fa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     9fe:	84 e4       	ldi	r24, 0x44	; 68
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		if (fceType==2){lcd_gotoxy(12, 1); lcd_puts("tri");}
     a06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	41 f4       	brne	.+16     	; 0xa1e <__stack+0x11f>
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	8c e0       	ldi	r24, 0x0C	; 12
     a12:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     a16:	88 e4       	ldi	r24, 0x48	; 72
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		if (fceType==10){lcd_gotoxy(12, 1); lcd_puts("off");}
     a1e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a22:	8a 30       	cpi	r24, 0x0A	; 10
     a24:	41 f4       	brne	.+16     	; 0xa36 <__stack+0x137>
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	8c e0       	ldi	r24, 0x0C	; 12
     a2a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     a2e:	8c e4       	ldi	r24, 0x4C	; 76
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	



     a36:	26 96       	adiw	r28, 0x06	; 6
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	ff 91       	pop	r31
     a48:	ef 91       	pop	r30
     a4a:	bf 91       	pop	r27
     a4c:	af 91       	pop	r26
     a4e:	9f 91       	pop	r25
     a50:	8f 91       	pop	r24
     a52:	7f 91       	pop	r23
     a54:	6f 91       	pop	r22
     a56:	5f 91       	pop	r21
     a58:	4f 91       	pop	r20
     a5a:	3f 91       	pop	r19
     a5c:	2f 91       	pop	r18
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     a6c:	1f 92       	push	r1
     a6e:	0f 92       	push	r0
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	2f 93       	push	r18
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     a84:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     a88:	8c 71       	andi	r24, 0x1C	; 28
     a8a:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <UART_RxHead>
     a8e:	ef 5f       	subi	r30, 0xFF	; 255
     a90:	ef 71       	andi	r30, 0x1F	; 31
     a92:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_RxTail>
     a96:	e9 17       	cp	r30, r25
     a98:	39 f0       	breq	.+14     	; 0xaa8 <__vector_18+0x3c>
     a9a:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <UART_RxHead>
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	e3 5a       	subi	r30, 0xA3	; 163
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	20 83       	st	Z, r18
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <__vector_18+0x3e>
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <UART_LastRxError>
     aae:	89 2b       	or	r24, r25
     ab0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <UART_LastRxError>
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <__vector_19>:
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
     ada:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <UART_TxHead>
     ade:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <UART_TxTail>
     ae2:	98 17       	cp	r25, r24
     ae4:	69 f0       	breq	.+26     	; 0xb00 <__vector_19+0x38>
     ae6:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <UART_TxTail>
     aea:	ef 5f       	subi	r30, 0xFF	; 255
     aec:	ef 71       	andi	r30, 0x1F	; 31
     aee:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <UART_TxTail>
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	e3 58       	subi	r30, 0x83	; 131
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	80 81       	ld	r24, Z
     afa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <__vector_19+0x42>
     b00:	e1 ec       	ldi	r30, 0xC1	; 193
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8f 7d       	andi	r24, 0xDF	; 223
     b08:	80 83       	st	Z, r24
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <uart_init>:
     b1c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <UART_TxHead>
     b20:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <UART_TxTail>
     b24:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <UART_RxHead>
     b28:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <UART_RxTail>
     b2c:	99 23       	and	r25, r25
     b2e:	1c f4       	brge	.+6      	; 0xb36 <uart_init+0x1a>
     b30:	22 e0       	ldi	r18, 0x02	; 2
     b32:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     b36:	90 78       	andi	r25, 0x80	; 128
     b38:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     b3c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     b40:	88 e9       	ldi	r24, 0x98	; 152
     b42:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     b46:	86 e0       	ldi	r24, 0x06	; 6
     b48:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     b4c:	08 95       	ret

00000b4e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     b4e:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <UART_TxHead>
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     b56:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <UART_TxTail>
     b5a:	29 17       	cp	r18, r25
     b5c:	e1 f3       	breq	.-8      	; 0xb56 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     b5e:	e2 2f       	mov	r30, r18
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	e3 58       	subi	r30, 0x83	; 131
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     b68:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     b6c:	e1 ec       	ldi	r30, 0xC1	; 193
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 62       	ori	r24, 0x20	; 32
     b74:	80 83       	st	Z, r24
     b76:	08 95       	ret

00000b78 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
    while (*s)
     b7e:	88 81       	ld	r24, Y
     b80:	88 23       	and	r24, r24
     b82:	31 f0       	breq	.+12     	; 0xb90 <uart_puts+0x18>
     b84:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     b86:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     b8a:	89 91       	ld	r24, Y+
     b8c:	81 11       	cpse	r24, r1
     b8e:	fb cf       	rjmp	.-10     	; 0xb86 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <__subsf3>:
     b96:	50 58       	subi	r21, 0x80	; 128

00000b98 <__addsf3>:
     b98:	bb 27       	eor	r27, r27
     b9a:	aa 27       	eor	r26, r26
     b9c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__addsf3x>
     ba0:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_round>
     ba4:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_pscA>
     ba8:	38 f0       	brcs	.+14     	; 0xbb8 <__addsf3+0x20>
     baa:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscB>
     bae:	20 f0       	brcs	.+8      	; 0xbb8 <__addsf3+0x20>
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__addsf3+0x28>
     bb2:	9f 3f       	cpi	r25, 0xFF	; 255
     bb4:	19 f4       	brne	.+6      	; 0xbbc <__addsf3+0x24>
     bb6:	26 f4       	brtc	.+8      	; 0xbc0 <__addsf3+0x28>
     bb8:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_nan>
     bbc:	0e f4       	brtc	.+2      	; 0xbc0 <__addsf3+0x28>
     bbe:	e0 95       	com	r30
     bc0:	e7 fb       	bst	r30, 7
     bc2:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>

00000bc6 <__addsf3x>:
     bc6:	e9 2f       	mov	r30, r25
     bc8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fp_split3>
     bcc:	58 f3       	brcs	.-42     	; 0xba4 <__addsf3+0xc>
     bce:	ba 17       	cp	r27, r26
     bd0:	62 07       	cpc	r22, r18
     bd2:	73 07       	cpc	r23, r19
     bd4:	84 07       	cpc	r24, r20
     bd6:	95 07       	cpc	r25, r21
     bd8:	20 f0       	brcs	.+8      	; 0xbe2 <__addsf3x+0x1c>
     bda:	79 f4       	brne	.+30     	; 0xbfa <__addsf3x+0x34>
     bdc:	a6 f5       	brtc	.+104    	; 0xc46 <__addsf3x+0x80>
     bde:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_zero>
     be2:	0e f4       	brtc	.+2      	; 0xbe6 <__addsf3x+0x20>
     be4:	e0 95       	com	r30
     be6:	0b 2e       	mov	r0, r27
     be8:	ba 2f       	mov	r27, r26
     bea:	a0 2d       	mov	r26, r0
     bec:	0b 01       	movw	r0, r22
     bee:	b9 01       	movw	r22, r18
     bf0:	90 01       	movw	r18, r0
     bf2:	0c 01       	movw	r0, r24
     bf4:	ca 01       	movw	r24, r20
     bf6:	a0 01       	movw	r20, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	ff 27       	eor	r31, r31
     bfc:	59 1b       	sub	r21, r25
     bfe:	99 f0       	breq	.+38     	; 0xc26 <__addsf3x+0x60>
     c00:	59 3f       	cpi	r21, 0xF9	; 249
     c02:	50 f4       	brcc	.+20     	; 0xc18 <__addsf3x+0x52>
     c04:	50 3e       	cpi	r21, 0xE0	; 224
     c06:	68 f1       	brcs	.+90     	; 0xc62 <__addsf3x+0x9c>
     c08:	1a 16       	cp	r1, r26
     c0a:	f0 40       	sbci	r31, 0x00	; 0
     c0c:	a2 2f       	mov	r26, r18
     c0e:	23 2f       	mov	r18, r19
     c10:	34 2f       	mov	r19, r20
     c12:	44 27       	eor	r20, r20
     c14:	58 5f       	subi	r21, 0xF8	; 248
     c16:	f3 cf       	rjmp	.-26     	; 0xbfe <__addsf3x+0x38>
     c18:	46 95       	lsr	r20
     c1a:	37 95       	ror	r19
     c1c:	27 95       	ror	r18
     c1e:	a7 95       	ror	r26
     c20:	f0 40       	sbci	r31, 0x00	; 0
     c22:	53 95       	inc	r21
     c24:	c9 f7       	brne	.-14     	; 0xc18 <__addsf3x+0x52>
     c26:	7e f4       	brtc	.+30     	; 0xc46 <__addsf3x+0x80>
     c28:	1f 16       	cp	r1, r31
     c2a:	ba 0b       	sbc	r27, r26
     c2c:	62 0b       	sbc	r22, r18
     c2e:	73 0b       	sbc	r23, r19
     c30:	84 0b       	sbc	r24, r20
     c32:	ba f0       	brmi	.+46     	; 0xc62 <__addsf3x+0x9c>
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	a1 f0       	breq	.+40     	; 0xc60 <__addsf3x+0x9a>
     c38:	ff 0f       	add	r31, r31
     c3a:	bb 1f       	adc	r27, r27
     c3c:	66 1f       	adc	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	88 1f       	adc	r24, r24
     c42:	c2 f7       	brpl	.-16     	; 0xc34 <__addsf3x+0x6e>
     c44:	0e c0       	rjmp	.+28     	; 0xc62 <__addsf3x+0x9c>
     c46:	ba 0f       	add	r27, r26
     c48:	62 1f       	adc	r22, r18
     c4a:	73 1f       	adc	r23, r19
     c4c:	84 1f       	adc	r24, r20
     c4e:	48 f4       	brcc	.+18     	; 0xc62 <__addsf3x+0x9c>
     c50:	87 95       	ror	r24
     c52:	77 95       	ror	r23
     c54:	67 95       	ror	r22
     c56:	b7 95       	ror	r27
     c58:	f7 95       	ror	r31
     c5a:	9e 3f       	cpi	r25, 0xFE	; 254
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <__addsf3x+0x9a>
     c5e:	b0 cf       	rjmp	.-160    	; 0xbc0 <__addsf3+0x28>
     c60:	93 95       	inc	r25
     c62:	88 0f       	add	r24, r24
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__addsf3x+0xa2>
     c66:	99 27       	eor	r25, r25
     c68:	ee 0f       	add	r30, r30
     c6a:	97 95       	ror	r25
     c6c:	87 95       	ror	r24
     c6e:	08 95       	ret

00000c70 <__cmpsf2>:
     c70:	0e 94 76 07 	call	0xeec	; 0xeec <__fp_cmp>
     c74:	08 f4       	brcc	.+2      	; 0xc78 <__cmpsf2+0x8>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	08 95       	ret

00000c7a <__divsf3>:
     c7a:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3x>
     c7e:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_round>
     c82:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscB>
     c86:	58 f0       	brcs	.+22     	; 0xc9e <__divsf3+0x24>
     c88:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_pscA>
     c8c:	40 f0       	brcs	.+16     	; 0xc9e <__divsf3+0x24>
     c8e:	29 f4       	brne	.+10     	; 0xc9a <__divsf3+0x20>
     c90:	5f 3f       	cpi	r21, 0xFF	; 255
     c92:	29 f0       	breq	.+10     	; 0xc9e <__divsf3+0x24>
     c94:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     c98:	51 11       	cpse	r21, r1
     c9a:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_szero>
     c9e:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_nan>

00000ca2 <__divsf3x>:
     ca2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fp_split3>
     ca6:	68 f3       	brcs	.-38     	; 0xc82 <__divsf3+0x8>

00000ca8 <__divsf3_pse>:
     ca8:	99 23       	and	r25, r25
     caa:	b1 f3       	breq	.-20     	; 0xc98 <__divsf3+0x1e>
     cac:	55 23       	and	r21, r21
     cae:	91 f3       	breq	.-28     	; 0xc94 <__divsf3+0x1a>
     cb0:	95 1b       	sub	r25, r21
     cb2:	55 0b       	sbc	r21, r21
     cb4:	bb 27       	eor	r27, r27
     cb6:	aa 27       	eor	r26, r26
     cb8:	62 17       	cp	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	38 f0       	brcs	.+14     	; 0xcce <__divsf3_pse+0x26>
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	44 1f       	adc	r20, r20
     cca:	aa 1f       	adc	r26, r26
     ccc:	a9 f3       	breq	.-22     	; 0xcb8 <__divsf3_pse+0x10>
     cce:	35 d0       	rcall	.+106    	; 0xd3a <__divsf3_pse+0x92>
     cd0:	0e 2e       	mov	r0, r30
     cd2:	3a f0       	brmi	.+14     	; 0xce2 <__divsf3_pse+0x3a>
     cd4:	e0 e8       	ldi	r30, 0x80	; 128
     cd6:	32 d0       	rcall	.+100    	; 0xd3c <__divsf3_pse+0x94>
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	50 40       	sbci	r21, 0x00	; 0
     cdc:	e6 95       	lsr	r30
     cde:	00 1c       	adc	r0, r0
     ce0:	ca f7       	brpl	.-14     	; 0xcd4 <__divsf3_pse+0x2c>
     ce2:	2b d0       	rcall	.+86     	; 0xd3a <__divsf3_pse+0x92>
     ce4:	fe 2f       	mov	r31, r30
     ce6:	29 d0       	rcall	.+82     	; 0xd3a <__divsf3_pse+0x92>
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	bb 1f       	adc	r27, r27
     cf0:	26 17       	cp	r18, r22
     cf2:	37 07       	cpc	r19, r23
     cf4:	48 07       	cpc	r20, r24
     cf6:	ab 07       	cpc	r26, r27
     cf8:	b0 e8       	ldi	r27, 0x80	; 128
     cfa:	09 f0       	breq	.+2      	; 0xcfe <__divsf3_pse+0x56>
     cfc:	bb 0b       	sbc	r27, r27
     cfe:	80 2d       	mov	r24, r0
     d00:	bf 01       	movw	r22, r30
     d02:	ff 27       	eor	r31, r31
     d04:	93 58       	subi	r25, 0x83	; 131
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	3a f0       	brmi	.+14     	; 0xd18 <__divsf3_pse+0x70>
     d0a:	9e 3f       	cpi	r25, 0xFE	; 254
     d0c:	51 05       	cpc	r21, r1
     d0e:	78 f0       	brcs	.+30     	; 0xd2e <__divsf3_pse+0x86>
     d10:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     d14:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_szero>
     d18:	5f 3f       	cpi	r21, 0xFF	; 255
     d1a:	e4 f3       	brlt	.-8      	; 0xd14 <__divsf3_pse+0x6c>
     d1c:	98 3e       	cpi	r25, 0xE8	; 232
     d1e:	d4 f3       	brlt	.-12     	; 0xd14 <__divsf3_pse+0x6c>
     d20:	86 95       	lsr	r24
     d22:	77 95       	ror	r23
     d24:	67 95       	ror	r22
     d26:	b7 95       	ror	r27
     d28:	f7 95       	ror	r31
     d2a:	9f 5f       	subi	r25, 0xFF	; 255
     d2c:	c9 f7       	brne	.-14     	; 0xd20 <__divsf3_pse+0x78>
     d2e:	88 0f       	add	r24, r24
     d30:	91 1d       	adc	r25, r1
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	97 f9       	bld	r25, 7
     d38:	08 95       	ret
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	66 0f       	add	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	88 1f       	adc	r24, r24
     d42:	bb 1f       	adc	r27, r27
     d44:	62 17       	cp	r22, r18
     d46:	73 07       	cpc	r23, r19
     d48:	84 07       	cpc	r24, r20
     d4a:	ba 07       	cpc	r27, r26
     d4c:	20 f0       	brcs	.+8      	; 0xd56 <__divsf3_pse+0xae>
     d4e:	62 1b       	sub	r22, r18
     d50:	73 0b       	sbc	r23, r19
     d52:	84 0b       	sbc	r24, r20
     d54:	ba 0b       	sbc	r27, r26
     d56:	ee 1f       	adc	r30, r30
     d58:	88 f7       	brcc	.-30     	; 0xd3c <__divsf3_pse+0x94>
     d5a:	e0 95       	com	r30
     d5c:	08 95       	ret

00000d5e <__fixsfsi>:
     d5e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixunssfsi>
     d62:	68 94       	set
     d64:	b1 11       	cpse	r27, r1
     d66:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_szero>
     d6a:	08 95       	ret

00000d6c <__fixunssfsi>:
     d6c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_splitA>
     d70:	88 f0       	brcs	.+34     	; 0xd94 <__fixunssfsi+0x28>
     d72:	9f 57       	subi	r25, 0x7F	; 127
     d74:	98 f0       	brcs	.+38     	; 0xd9c <__fixunssfsi+0x30>
     d76:	b9 2f       	mov	r27, r25
     d78:	99 27       	eor	r25, r25
     d7a:	b7 51       	subi	r27, 0x17	; 23
     d7c:	b0 f0       	brcs	.+44     	; 0xdaa <__fixunssfsi+0x3e>
     d7e:	e1 f0       	breq	.+56     	; 0xdb8 <__fixunssfsi+0x4c>
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	1a f0       	brmi	.+6      	; 0xd90 <__fixunssfsi+0x24>
     d8a:	ba 95       	dec	r27
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <__fixunssfsi+0x14>
     d8e:	14 c0       	rjmp	.+40     	; 0xdb8 <__fixunssfsi+0x4c>
     d90:	b1 30       	cpi	r27, 0x01	; 1
     d92:	91 f0       	breq	.+36     	; 0xdb8 <__fixunssfsi+0x4c>
     d94:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_zero>
     d98:	b1 e0       	ldi	r27, 0x01	; 1
     d9a:	08 95       	ret
     d9c:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__fp_zero>
     da0:	67 2f       	mov	r22, r23
     da2:	78 2f       	mov	r23, r24
     da4:	88 27       	eor	r24, r24
     da6:	b8 5f       	subi	r27, 0xF8	; 248
     da8:	39 f0       	breq	.+14     	; 0xdb8 <__fixunssfsi+0x4c>
     daa:	b9 3f       	cpi	r27, 0xF9	; 249
     dac:	cc f3       	brlt	.-14     	; 0xda0 <__fixunssfsi+0x34>
     dae:	86 95       	lsr	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b3 95       	inc	r27
     db6:	d9 f7       	brne	.-10     	; 0xdae <__fixunssfsi+0x42>
     db8:	3e f4       	brtc	.+14     	; 0xdc8 <__fixunssfsi+0x5c>
     dba:	90 95       	com	r25
     dbc:	80 95       	com	r24
     dbe:	70 95       	com	r23
     dc0:	61 95       	neg	r22
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	8f 4f       	sbci	r24, 0xFF	; 255
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	08 95       	ret

00000dca <__floatunsisf>:
     dca:	e8 94       	clt
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <__floatsisf+0x12>

00000dce <__floatsisf>:
     dce:	97 fb       	bst	r25, 7
     dd0:	3e f4       	brtc	.+14     	; 0xde0 <__floatsisf+0x12>
     dd2:	90 95       	com	r25
     dd4:	80 95       	com	r24
     dd6:	70 95       	com	r23
     dd8:	61 95       	neg	r22
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	99 23       	and	r25, r25
     de2:	a9 f0       	breq	.+42     	; 0xe0e <__floatsisf+0x40>
     de4:	f9 2f       	mov	r31, r25
     de6:	96 e9       	ldi	r25, 0x96	; 150
     de8:	bb 27       	eor	r27, r27
     dea:	93 95       	inc	r25
     dec:	f6 95       	lsr	r31
     dee:	87 95       	ror	r24
     df0:	77 95       	ror	r23
     df2:	67 95       	ror	r22
     df4:	b7 95       	ror	r27
     df6:	f1 11       	cpse	r31, r1
     df8:	f8 cf       	rjmp	.-16     	; 0xdea <__floatsisf+0x1c>
     dfa:	fa f4       	brpl	.+62     	; 0xe3a <__floatsisf+0x6c>
     dfc:	bb 0f       	add	r27, r27
     dfe:	11 f4       	brne	.+4      	; 0xe04 <__floatsisf+0x36>
     e00:	60 ff       	sbrs	r22, 0
     e02:	1b c0       	rjmp	.+54     	; 0xe3a <__floatsisf+0x6c>
     e04:	6f 5f       	subi	r22, 0xFF	; 255
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	8f 4f       	sbci	r24, 0xFF	; 255
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	16 c0       	rjmp	.+44     	; 0xe3a <__floatsisf+0x6c>
     e0e:	88 23       	and	r24, r24
     e10:	11 f0       	breq	.+4      	; 0xe16 <__floatsisf+0x48>
     e12:	96 e9       	ldi	r25, 0x96	; 150
     e14:	11 c0       	rjmp	.+34     	; 0xe38 <__floatsisf+0x6a>
     e16:	77 23       	and	r23, r23
     e18:	21 f0       	breq	.+8      	; 0xe22 <__floatsisf+0x54>
     e1a:	9e e8       	ldi	r25, 0x8E	; 142
     e1c:	87 2f       	mov	r24, r23
     e1e:	76 2f       	mov	r23, r22
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <__floatsisf+0x5e>
     e22:	66 23       	and	r22, r22
     e24:	71 f0       	breq	.+28     	; 0xe42 <__floatsisf+0x74>
     e26:	96 e8       	ldi	r25, 0x86	; 134
     e28:	86 2f       	mov	r24, r22
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	2a f0       	brmi	.+10     	; 0xe3a <__floatsisf+0x6c>
     e30:	9a 95       	dec	r25
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	da f7       	brpl	.-10     	; 0xe30 <__floatsisf+0x62>
     e3a:	88 0f       	add	r24, r24
     e3c:	96 95       	lsr	r25
     e3e:	87 95       	ror	r24
     e40:	97 f9       	bld	r25, 7
     e42:	08 95       	ret
     e44:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_pscA>
     e48:	20 f0       	brcs	.+8      	; 0xe52 <__floatsisf+0x84>
     e4a:	19 f0       	breq	.+6      	; 0xe52 <__floatsisf+0x84>
     e4c:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscB>
     e50:	50 f4       	brcc	.+20     	; 0xe66 <fmod+0xc>
     e52:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_nan>
     e56:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_szero>

00000e5a <fmod>:
     e5a:	e9 2f       	mov	r30, r25
     e5c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fp_split3>
     e60:	88 f3       	brcs	.-30     	; 0xe44 <__floatsisf+0x76>
     e62:	55 23       	and	r21, r21
     e64:	b1 f3       	breq	.-20     	; 0xe52 <__floatsisf+0x84>
     e66:	e7 fb       	bst	r30, 7
     e68:	62 17       	cp	r22, r18
     e6a:	73 07       	cpc	r23, r19
     e6c:	84 07       	cpc	r24, r20
     e6e:	95 07       	cpc	r25, r21
     e70:	a8 f1       	brcs	.+106    	; 0xedc <fmod+0x82>
     e72:	89 f3       	breq	.-30     	; 0xe56 <__floatsisf+0x88>
     e74:	e9 2f       	mov	r30, r25
     e76:	ff 27       	eor	r31, r31
     e78:	88 23       	and	r24, r24
     e7a:	2a f0       	brmi	.+10     	; 0xe86 <fmod+0x2c>
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	da f7       	brpl	.-10     	; 0xe7c <fmod+0x22>
     e86:	95 2f       	mov	r25, r21
     e88:	55 27       	eor	r21, r21
     e8a:	44 23       	and	r20, r20
     e8c:	32 f0       	brmi	.+12     	; 0xe9a <fmod+0x40>
     e8e:	91 50       	subi	r25, 0x01	; 1
     e90:	50 40       	sbci	r21, 0x00	; 0
     e92:	22 0f       	add	r18, r18
     e94:	33 1f       	adc	r19, r19
     e96:	44 1f       	adc	r20, r20
     e98:	d2 f7       	brpl	.-12     	; 0xe8e <fmod+0x34>
     e9a:	bb 27       	eor	r27, r27
     e9c:	e9 1b       	sub	r30, r25
     e9e:	f5 0b       	sbc	r31, r21
     ea0:	62 1b       	sub	r22, r18
     ea2:	73 0b       	sbc	r23, r19
     ea4:	84 0b       	sbc	r24, r20
     ea6:	b1 09       	sbc	r27, r1
     ea8:	b1 f2       	breq	.-84     	; 0xe56 <__floatsisf+0x88>
     eaa:	22 f4       	brpl	.+8      	; 0xeb4 <fmod+0x5a>
     eac:	62 0f       	add	r22, r18
     eae:	73 1f       	adc	r23, r19
     eb0:	84 1f       	adc	r24, r20
     eb2:	b1 1d       	adc	r27, r1
     eb4:	31 97       	sbiw	r30, 0x01	; 1
     eb6:	2a f0       	brmi	.+10     	; 0xec2 <fmod+0x68>
     eb8:	66 0f       	add	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	88 1f       	adc	r24, r24
     ebe:	bb 1f       	adc	r27, r27
     ec0:	ef cf       	rjmp	.-34     	; 0xea0 <fmod+0x46>
     ec2:	91 50       	subi	r25, 0x01	; 1
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	62 f0       	brmi	.+24     	; 0xee0 <fmod+0x86>
     ec8:	41 f0       	breq	.+16     	; 0xeda <fmod+0x80>
     eca:	88 23       	and	r24, r24
     ecc:	32 f0       	brmi	.+12     	; 0xeda <fmod+0x80>
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	91 50       	subi	r25, 0x01	; 1
     ed6:	50 40       	sbci	r21, 0x00	; 0
     ed8:	c1 f7       	brne	.-16     	; 0xeca <fmod+0x70>
     eda:	93 95       	inc	r25
     edc:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_mpack>
     ee0:	86 95       	lsr	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	9f 5f       	subi	r25, 0xFF	; 255
     ee8:	d9 f7       	brne	.-10     	; 0xee0 <fmod+0x86>
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <fmod+0x80>

00000eec <__fp_cmp>:
     eec:	99 0f       	add	r25, r25
     eee:	00 08       	sbc	r0, r0
     ef0:	55 0f       	add	r21, r21
     ef2:	aa 0b       	sbc	r26, r26
     ef4:	e0 e8       	ldi	r30, 0x80	; 128
     ef6:	fe ef       	ldi	r31, 0xFE	; 254
     ef8:	16 16       	cp	r1, r22
     efa:	17 06       	cpc	r1, r23
     efc:	e8 07       	cpc	r30, r24
     efe:	f9 07       	cpc	r31, r25
     f00:	c0 f0       	brcs	.+48     	; 0xf32 <__fp_cmp+0x46>
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	e4 07       	cpc	r30, r20
     f08:	f5 07       	cpc	r31, r21
     f0a:	98 f0       	brcs	.+38     	; 0xf32 <__fp_cmp+0x46>
     f0c:	62 1b       	sub	r22, r18
     f0e:	73 0b       	sbc	r23, r19
     f10:	84 0b       	sbc	r24, r20
     f12:	95 0b       	sbc	r25, r21
     f14:	39 f4       	brne	.+14     	; 0xf24 <__fp_cmp+0x38>
     f16:	0a 26       	eor	r0, r26
     f18:	61 f0       	breq	.+24     	; 0xf32 <__fp_cmp+0x46>
     f1a:	23 2b       	or	r18, r19
     f1c:	24 2b       	or	r18, r20
     f1e:	25 2b       	or	r18, r21
     f20:	21 f4       	brne	.+8      	; 0xf2a <__fp_cmp+0x3e>
     f22:	08 95       	ret
     f24:	0a 26       	eor	r0, r26
     f26:	09 f4       	brne	.+2      	; 0xf2a <__fp_cmp+0x3e>
     f28:	a1 40       	sbci	r26, 0x01	; 1
     f2a:	a6 95       	lsr	r26
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	81 1d       	adc	r24, r1
     f30:	81 1d       	adc	r24, r1
     f32:	08 95       	ret

00000f34 <__fp_inf>:
     f34:	97 f9       	bld	r25, 7
     f36:	9f 67       	ori	r25, 0x7F	; 127
     f38:	80 e8       	ldi	r24, 0x80	; 128
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <__fp_mpack>:
     f40:	9f 3f       	cpi	r25, 0xFF	; 255
     f42:	31 f0       	breq	.+12     	; 0xf50 <__fp_mpack_finite+0xc>

00000f44 <__fp_mpack_finite>:
     f44:	91 50       	subi	r25, 0x01	; 1
     f46:	20 f4       	brcc	.+8      	; 0xf50 <__fp_mpack_finite+0xc>
     f48:	87 95       	ror	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	88 0f       	add	r24, r24
     f52:	91 1d       	adc	r25, r1
     f54:	96 95       	lsr	r25
     f56:	87 95       	ror	r24
     f58:	97 f9       	bld	r25, 7
     f5a:	08 95       	ret

00000f5c <__fp_nan>:
     f5c:	9f ef       	ldi	r25, 0xFF	; 255
     f5e:	80 ec       	ldi	r24, 0xC0	; 192
     f60:	08 95       	ret

00000f62 <__fp_pscA>:
     f62:	00 24       	eor	r0, r0
     f64:	0a 94       	dec	r0
     f66:	16 16       	cp	r1, r22
     f68:	17 06       	cpc	r1, r23
     f6a:	18 06       	cpc	r1, r24
     f6c:	09 06       	cpc	r0, r25
     f6e:	08 95       	ret

00000f70 <__fp_pscB>:
     f70:	00 24       	eor	r0, r0
     f72:	0a 94       	dec	r0
     f74:	12 16       	cp	r1, r18
     f76:	13 06       	cpc	r1, r19
     f78:	14 06       	cpc	r1, r20
     f7a:	05 06       	cpc	r0, r21
     f7c:	08 95       	ret

00000f7e <__fp_round>:
     f7e:	09 2e       	mov	r0, r25
     f80:	03 94       	inc	r0
     f82:	00 0c       	add	r0, r0
     f84:	11 f4       	brne	.+4      	; 0xf8a <__fp_round+0xc>
     f86:	88 23       	and	r24, r24
     f88:	52 f0       	brmi	.+20     	; 0xf9e <__fp_round+0x20>
     f8a:	bb 0f       	add	r27, r27
     f8c:	40 f4       	brcc	.+16     	; 0xf9e <__fp_round+0x20>
     f8e:	bf 2b       	or	r27, r31
     f90:	11 f4       	brne	.+4      	; 0xf96 <__fp_round+0x18>
     f92:	60 ff       	sbrs	r22, 0
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <__fp_round+0x20>
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	08 95       	ret

00000fa0 <__fp_split3>:
     fa0:	57 fd       	sbrc	r21, 7
     fa2:	90 58       	subi	r25, 0x80	; 128
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	59 f0       	breq	.+22     	; 0xfc0 <__fp_splitA+0x10>
     faa:	5f 3f       	cpi	r21, 0xFF	; 255
     fac:	71 f0       	breq	.+28     	; 0xfca <__fp_splitA+0x1a>
     fae:	47 95       	ror	r20

00000fb0 <__fp_splitA>:
     fb0:	88 0f       	add	r24, r24
     fb2:	97 fb       	bst	r25, 7
     fb4:	99 1f       	adc	r25, r25
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <__fp_splitA+0x20>
     fb8:	9f 3f       	cpi	r25, 0xFF	; 255
     fba:	79 f0       	breq	.+30     	; 0xfda <__fp_splitA+0x2a>
     fbc:	87 95       	ror	r24
     fbe:	08 95       	ret
     fc0:	12 16       	cp	r1, r18
     fc2:	13 06       	cpc	r1, r19
     fc4:	14 06       	cpc	r1, r20
     fc6:	55 1f       	adc	r21, r21
     fc8:	f2 cf       	rjmp	.-28     	; 0xfae <__fp_split3+0xe>
     fca:	46 95       	lsr	r20
     fcc:	f1 df       	rcall	.-30     	; 0xfb0 <__fp_splitA>
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <__fp_splitA+0x30>
     fd0:	16 16       	cp	r1, r22
     fd2:	17 06       	cpc	r1, r23
     fd4:	18 06       	cpc	r1, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	f1 cf       	rjmp	.-30     	; 0xfbc <__fp_splitA+0xc>
     fda:	86 95       	lsr	r24
     fdc:	71 05       	cpc	r23, r1
     fde:	61 05       	cpc	r22, r1
     fe0:	08 94       	sec
     fe2:	08 95       	ret

00000fe4 <__fp_zero>:
     fe4:	e8 94       	clt

00000fe6 <__fp_szero>:
     fe6:	bb 27       	eor	r27, r27
     fe8:	66 27       	eor	r22, r22
     fea:	77 27       	eor	r23, r23
     fec:	cb 01       	movw	r24, r22
     fee:	97 f9       	bld	r25, 7
     ff0:	08 95       	ret

00000ff2 <__mulsf3>:
     ff2:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3x>
     ff6:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_round>
     ffa:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_pscA>
     ffe:	38 f0       	brcs	.+14     	; 0x100e <__mulsf3+0x1c>
    1000:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscB>
    1004:	20 f0       	brcs	.+8      	; 0x100e <__mulsf3+0x1c>
    1006:	95 23       	and	r25, r21
    1008:	11 f0       	breq	.+4      	; 0x100e <__mulsf3+0x1c>
    100a:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
    100e:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_nan>
    1012:	11 24       	eor	r1, r1
    1014:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_szero>

00001018 <__mulsf3x>:
    1018:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fp_split3>
    101c:	70 f3       	brcs	.-36     	; 0xffa <__mulsf3+0x8>

0000101e <__mulsf3_pse>:
    101e:	95 9f       	mul	r25, r21
    1020:	c1 f3       	breq	.-16     	; 0x1012 <__mulsf3+0x20>
    1022:	95 0f       	add	r25, r21
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	55 1f       	adc	r21, r21
    1028:	62 9f       	mul	r22, r18
    102a:	f0 01       	movw	r30, r0
    102c:	72 9f       	mul	r23, r18
    102e:	bb 27       	eor	r27, r27
    1030:	f0 0d       	add	r31, r0
    1032:	b1 1d       	adc	r27, r1
    1034:	63 9f       	mul	r22, r19
    1036:	aa 27       	eor	r26, r26
    1038:	f0 0d       	add	r31, r0
    103a:	b1 1d       	adc	r27, r1
    103c:	aa 1f       	adc	r26, r26
    103e:	64 9f       	mul	r22, r20
    1040:	66 27       	eor	r22, r22
    1042:	b0 0d       	add	r27, r0
    1044:	a1 1d       	adc	r26, r1
    1046:	66 1f       	adc	r22, r22
    1048:	82 9f       	mul	r24, r18
    104a:	22 27       	eor	r18, r18
    104c:	b0 0d       	add	r27, r0
    104e:	a1 1d       	adc	r26, r1
    1050:	62 1f       	adc	r22, r18
    1052:	73 9f       	mul	r23, r19
    1054:	b0 0d       	add	r27, r0
    1056:	a1 1d       	adc	r26, r1
    1058:	62 1f       	adc	r22, r18
    105a:	83 9f       	mul	r24, r19
    105c:	a0 0d       	add	r26, r0
    105e:	61 1d       	adc	r22, r1
    1060:	22 1f       	adc	r18, r18
    1062:	74 9f       	mul	r23, r20
    1064:	33 27       	eor	r19, r19
    1066:	a0 0d       	add	r26, r0
    1068:	61 1d       	adc	r22, r1
    106a:	23 1f       	adc	r18, r19
    106c:	84 9f       	mul	r24, r20
    106e:	60 0d       	add	r22, r0
    1070:	21 1d       	adc	r18, r1
    1072:	82 2f       	mov	r24, r18
    1074:	76 2f       	mov	r23, r22
    1076:	6a 2f       	mov	r22, r26
    1078:	11 24       	eor	r1, r1
    107a:	9f 57       	subi	r25, 0x7F	; 127
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	9a f0       	brmi	.+38     	; 0x10a6 <__mulsf3_pse+0x88>
    1080:	f1 f0       	breq	.+60     	; 0x10be <__mulsf3_pse+0xa0>
    1082:	88 23       	and	r24, r24
    1084:	4a f0       	brmi	.+18     	; 0x1098 <__mulsf3_pse+0x7a>
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	bb 1f       	adc	r27, r27
    108c:	66 1f       	adc	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	50 40       	sbci	r21, 0x00	; 0
    1096:	a9 f7       	brne	.-22     	; 0x1082 <__mulsf3_pse+0x64>
    1098:	9e 3f       	cpi	r25, 0xFE	; 254
    109a:	51 05       	cpc	r21, r1
    109c:	80 f0       	brcs	.+32     	; 0x10be <__mulsf3_pse+0xa0>
    109e:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
    10a2:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_szero>
    10a6:	5f 3f       	cpi	r21, 0xFF	; 255
    10a8:	e4 f3       	brlt	.-8      	; 0x10a2 <__mulsf3_pse+0x84>
    10aa:	98 3e       	cpi	r25, 0xE8	; 232
    10ac:	d4 f3       	brlt	.-12     	; 0x10a2 <__mulsf3_pse+0x84>
    10ae:	86 95       	lsr	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	e7 95       	ror	r30
    10ba:	9f 5f       	subi	r25, 0xFF	; 255
    10bc:	c1 f7       	brne	.-16     	; 0x10ae <__mulsf3_pse+0x90>
    10be:	fe 2b       	or	r31, r30
    10c0:	88 0f       	add	r24, r24
    10c2:	91 1d       	adc	r25, r1
    10c4:	96 95       	lsr	r25
    10c6:	87 95       	ror	r24
    10c8:	97 f9       	bld	r25, 7
    10ca:	08 95       	ret

000010cc <sin>:
    10cc:	9f 93       	push	r25
    10ce:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_rempio2>
    10d2:	0f 90       	pop	r0
    10d4:	07 fc       	sbrc	r0, 7
    10d6:	ee 5f       	subi	r30, 0xFE	; 254
    10d8:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__fp_sinus>
    10dc:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_nan>

000010e0 <__fp_rempio2>:
    10e0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_splitA>
    10e4:	d8 f3       	brcs	.-10     	; 0x10dc <sin+0x10>
    10e6:	e8 94       	clt
    10e8:	e0 e0       	ldi	r30, 0x00	; 0
    10ea:	bb 27       	eor	r27, r27
    10ec:	9f 57       	subi	r25, 0x7F	; 127
    10ee:	f0 f0       	brcs	.+60     	; 0x112c <__fp_rempio2+0x4c>
    10f0:	2a ed       	ldi	r18, 0xDA	; 218
    10f2:	3f e0       	ldi	r19, 0x0F	; 15
    10f4:	49 ec       	ldi	r20, 0xC9	; 201
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <__fp_rempio2+0x24>
    10f8:	ee 0f       	add	r30, r30
    10fa:	bb 0f       	add	r27, r27
    10fc:	66 1f       	adc	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	28 f0       	brcs	.+10     	; 0x110e <__fp_rempio2+0x2e>
    1104:	b2 3a       	cpi	r27, 0xA2	; 162
    1106:	62 07       	cpc	r22, r18
    1108:	73 07       	cpc	r23, r19
    110a:	84 07       	cpc	r24, r20
    110c:	28 f0       	brcs	.+10     	; 0x1118 <__fp_rempio2+0x38>
    110e:	b2 5a       	subi	r27, 0xA2	; 162
    1110:	62 0b       	sbc	r22, r18
    1112:	73 0b       	sbc	r23, r19
    1114:	84 0b       	sbc	r24, r20
    1116:	e3 95       	inc	r30
    1118:	9a 95       	dec	r25
    111a:	72 f7       	brpl	.-36     	; 0x10f8 <__fp_rempio2+0x18>
    111c:	80 38       	cpi	r24, 0x80	; 128
    111e:	30 f4       	brcc	.+12     	; 0x112c <__fp_rempio2+0x4c>
    1120:	9a 95       	dec	r25
    1122:	bb 0f       	add	r27, r27
    1124:	66 1f       	adc	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	d2 f7       	brpl	.-12     	; 0x1120 <__fp_rempio2+0x40>
    112c:	90 48       	sbci	r25, 0x80	; 128
    112e:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_mpack_finite>

00001132 <__fp_sinus>:
    1132:	ef 93       	push	r30
    1134:	e0 ff       	sbrs	r30, 0
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <__fp_sinus+0x14>
    1138:	a2 ea       	ldi	r26, 0xA2	; 162
    113a:	2a ed       	ldi	r18, 0xDA	; 218
    113c:	3f e0       	ldi	r19, 0x0F	; 15
    113e:	49 ec       	ldi	r20, 0xC9	; 201
    1140:	5f eb       	ldi	r21, 0xBF	; 191
    1142:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__addsf3x>
    1146:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_round>
    114a:	0f 90       	pop	r0
    114c:	03 94       	inc	r0
    114e:	01 fc       	sbrc	r0, 1
    1150:	90 58       	subi	r25, 0x80	; 128
    1152:	e8 e6       	ldi	r30, 0x68	; 104
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_powsodd>

0000115a <__fp_powsodd>:
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	7f 93       	push	r23
    1160:	6f 93       	push	r22
    1162:	ff 93       	push	r31
    1164:	ef 93       	push	r30
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
    116e:	ef 91       	pop	r30
    1170:	ff 91       	pop	r31
    1172:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_powser>
    1176:	2f 91       	pop	r18
    1178:	3f 91       	pop	r19
    117a:	4f 91       	pop	r20
    117c:	5f 91       	pop	r21
    117e:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__mulsf3>

00001182 <__fp_powser>:
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	1f 93       	push	r17
    1188:	0f 93       	push	r16
    118a:	ff 92       	push	r15
    118c:	ef 92       	push	r14
    118e:	df 92       	push	r13
    1190:	7b 01       	movw	r14, r22
    1192:	8c 01       	movw	r16, r24
    1194:	68 94       	set
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <__fp_powser+0x22>
    1198:	da 2e       	mov	r13, r26
    119a:	ef 01       	movw	r28, r30
    119c:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3x>
    11a0:	fe 01       	movw	r30, r28
    11a2:	e8 94       	clt
    11a4:	a5 91       	lpm	r26, Z+
    11a6:	25 91       	lpm	r18, Z+
    11a8:	35 91       	lpm	r19, Z+
    11aa:	45 91       	lpm	r20, Z+
    11ac:	55 91       	lpm	r21, Z+
    11ae:	a6 f3       	brts	.-24     	; 0x1198 <__fp_powser+0x16>
    11b0:	ef 01       	movw	r28, r30
    11b2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__addsf3x>
    11b6:	fe 01       	movw	r30, r28
    11b8:	97 01       	movw	r18, r14
    11ba:	a8 01       	movw	r20, r16
    11bc:	da 94       	dec	r13
    11be:	69 f7       	brne	.-38     	; 0x119a <__fp_powser+0x18>
    11c0:	df 90       	pop	r13
    11c2:	ef 90       	pop	r14
    11c4:	ff 90       	pop	r15
    11c6:	0f 91       	pop	r16
    11c8:	1f 91       	pop	r17
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <__itoa_ncheck>:
    11d0:	bb 27       	eor	r27, r27
    11d2:	4a 30       	cpi	r20, 0x0A	; 10
    11d4:	31 f4       	brne	.+12     	; 0x11e2 <__itoa_ncheck+0x12>
    11d6:	99 23       	and	r25, r25
    11d8:	22 f4       	brpl	.+8      	; 0x11e2 <__itoa_ncheck+0x12>
    11da:	bd e2       	ldi	r27, 0x2D	; 45
    11dc:	90 95       	com	r25
    11de:	81 95       	neg	r24
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__utoa_common>

000011e6 <__utoa_ncheck>:
    11e6:	bb 27       	eor	r27, r27

000011e8 <__utoa_common>:
    11e8:	fb 01       	movw	r30, r22
    11ea:	55 27       	eor	r21, r21
    11ec:	aa 27       	eor	r26, r26
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	aa 1f       	adc	r26, r26
    11f4:	a4 17       	cp	r26, r20
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <__utoa_common+0x14>
    11f8:	a4 1b       	sub	r26, r20
    11fa:	83 95       	inc	r24
    11fc:	50 51       	subi	r21, 0x10	; 16
    11fe:	b9 f7       	brne	.-18     	; 0x11ee <__utoa_common+0x6>
    1200:	a0 5d       	subi	r26, 0xD0	; 208
    1202:	aa 33       	cpi	r26, 0x3A	; 58
    1204:	08 f0       	brcs	.+2      	; 0x1208 <__utoa_common+0x20>
    1206:	a9 5d       	subi	r26, 0xD9	; 217
    1208:	a1 93       	st	Z+, r26
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	79 f7       	brne	.-34     	; 0x11ec <__utoa_common+0x4>
    120e:	b1 11       	cpse	r27, r1
    1210:	b1 93       	st	Z+, r27
    1212:	11 92       	st	Z+, r1
    1214:	cb 01       	movw	r24, r22
    1216:	0c 94 0d 09 	jmp	0x121a	; 0x121a <strrev>

0000121a <strrev>:
    121a:	dc 01       	movw	r26, r24
    121c:	fc 01       	movw	r30, r24
    121e:	67 2f       	mov	r22, r23
    1220:	71 91       	ld	r23, Z+
    1222:	77 23       	and	r23, r23
    1224:	e1 f7       	brne	.-8      	; 0x121e <strrev+0x4>
    1226:	32 97       	sbiw	r30, 0x02	; 2
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <strrev+0x18>
    122a:	7c 91       	ld	r23, X
    122c:	6d 93       	st	X+, r22
    122e:	70 83       	st	Z, r23
    1230:	62 91       	ld	r22, -Z
    1232:	ae 17       	cp	r26, r30
    1234:	bf 07       	cpc	r27, r31
    1236:	c8 f3       	brcs	.-14     	; 0x122a <strrev+0x10>
    1238:	08 95       	ret

0000123a <_exit>:
    123a:	f8 94       	cli

0000123c <__stop_program>:
    123c:	ff cf       	rjmp	.-2      	; 0x123c <__stop_program>
