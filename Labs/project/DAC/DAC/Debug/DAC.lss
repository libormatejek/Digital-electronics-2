
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00001522  000015b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800150  00800150  00001606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e05  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c28  00000000  00000000  000035ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6a  00000000  00000000  00004215  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00005080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f19  00000000  00000000  00005b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_9>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_13>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_18>
      4c:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_21>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <__stack+0xfb>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240
      ae:	08 00       	.word	0x0008	; ????
      b0:	00 00       	nop
      b2:	be 92       	st	-X, r11
      b4:	24 49       	sbci	r18, 0x94	; 148
      b6:	12 3e       	cpi	r17, 0xE2	; 226
      b8:	ab aa       	std	Y+51, r10	; 0x33
      ba:	aa 2a       	or	r10, r26
      bc:	be cd       	rjmp	.-1156   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
      be:	cc cc       	rjmp	.-1640   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
      c0:	4c 3e       	cpi	r20, 0xEC	; 236
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	be ab       	std	Y+54, r27	; 0x36
      c8:	aa aa       	std	Y+50, r10	; 0x32
      ca:	aa 3e       	cpi	r26, 0xEA	; 234
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	00 08       	sbc	r0, r0
      dc:	41 78       	andi	r20, 0x81	; 129
      de:	d3 bb       	out	0x13, r29	; 19
      e0:	43 87       	std	Z+11, r20	; 0x0b
      e2:	d1 13       	cpse	r29, r17
      e4:	3d 19       	sub	r19, r13
      e6:	0e 3c       	cpi	r16, 0xCE	; 206
      e8:	c3 bd       	out	0x23, r28	; 35
      ea:	42 82       	std	Z+2, r4	; 0x02
      ec:	ad 2b       	or	r26, r29
      ee:	3e 68       	ori	r19, 0x8E	; 142
      f0:	ec 82       	std	Y+4, r14	; 0x04
      f2:	76 be       	out	0x36, r7	; 54
      f4:	d9 8f       	std	Y+25, r29	; 0x19
      f6:	e1 a9       	ldd	r30, Z+49	; 0x31
      f8:	3e 4c       	sbci	r19, 0xCE	; 206
      fa:	80 ef       	ldi	r24, 0xF0	; 240
      fc:	ff be       	out	0x3f, r15	; 63
      fe:	01 c4       	rjmp	.+2050   	; 0x902 <__stack+0x3>
     100:	ff 7f       	andi	r31, 0xFF	; 255
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
	...

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	e2 e2       	ldi	r30, 0x22	; 34
     11c:	f5 e1       	ldi	r31, 0x15	; 21
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a0 35       	cpi	r26, 0x50	; 80
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	21 e0       	ldi	r18, 0x01	; 1
     12c:	a0 e5       	ldi	r26, 0x50	; 80
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	ad 39       	cpi	r26, 0x9D	; 157
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <main>
     13e:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
     146:	fc 01       	movw	r30, r24
     148:	40 81       	ld	r20, Z
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <GPIO_config_output+0xe>
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <GPIO_config_output+0xa>
     158:	24 2b       	or	r18, r20
     15a:	20 83       	st	Z, r18
     15c:	08 95       	ret

0000015e <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
     15e:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
     160:	90 81       	ld	r25, Z
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <GPIO_write_low+0xe>
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <GPIO_write_low+0xa>
     170:	20 95       	com	r18
     172:	29 23       	and	r18, r25
     174:	20 83       	st	Z, r18
     176:	08 95       	ret

00000178 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name | (1<<pin_num);
     178:	fc 01       	movw	r30, r24
     17a:	40 81       	ld	r20, Z
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_write_high+0xe>
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_write_high+0xa>
     18a:	24 2b       	or	r18, r20
     18c:	20 83       	st	Z, r18
     18e:	08 95       	ret

00000190 <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
 void GPIO_toggle (volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name ^ (1<<pin_num);
     190:	fc 01       	movw	r30, r24
     192:	40 81       	ld	r20, Z
     194:	21 e0       	ldi	r18, 0x01	; 1
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <GPIO_toggle+0xe>
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <GPIO_toggle+0xa>
     1a2:	24 27       	eor	r18, r20
     1a4:	20 83       	st	Z, r18
     1a6:	08 95       	ret

000001a8 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     1a8:	29 9a       	sbi	0x05, 1	; 5
     1aa:	85 e0       	ldi	r24, 0x05	; 5
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <toggle_e+0x4>
     1b0:	00 00       	nop
     1b2:	29 98       	cbi	0x05, 1	; 5
     1b4:	08 95       	ret

000001b6 <lcd_write>:
     1b6:	cf 93       	push	r28
     1b8:	c8 2f       	mov	r28, r24
     1ba:	66 23       	and	r22, r22
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <lcd_write+0xc>
     1be:	28 9a       	sbi	0x05, 0	; 5
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <lcd_write+0xe>
     1c2:	28 98       	cbi	0x05, 0	; 5
     1c4:	54 9a       	sbi	0x0a, 4	; 10
     1c6:	55 9a       	sbi	0x0a, 5	; 10
     1c8:	56 9a       	sbi	0x0a, 6	; 10
     1ca:	57 9a       	sbi	0x0a, 7	; 10
     1cc:	5f 98       	cbi	0x0b, 7	; 11
     1ce:	5e 98       	cbi	0x0b, 6	; 11
     1d0:	5d 98       	cbi	0x0b, 5	; 11
     1d2:	5c 98       	cbi	0x0b, 4	; 11
     1d4:	cc 23       	and	r28, r28
     1d6:	0c f4       	brge	.+2      	; 0x1da <lcd_write+0x24>
     1d8:	5f 9a       	sbi	0x0b, 7	; 11
     1da:	c6 fd       	sbrc	r28, 6
     1dc:	5e 9a       	sbi	0x0b, 6	; 11
     1de:	c5 fd       	sbrc	r28, 5
     1e0:	5d 9a       	sbi	0x0b, 5	; 11
     1e2:	c4 fd       	sbrc	r28, 4
     1e4:	5c 9a       	sbi	0x0b, 4	; 11
     1e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     1ea:	5f 98       	cbi	0x0b, 7	; 11
     1ec:	5e 98       	cbi	0x0b, 6	; 11
     1ee:	5d 98       	cbi	0x0b, 5	; 11
     1f0:	5c 98       	cbi	0x0b, 4	; 11
     1f2:	c3 fd       	sbrc	r28, 3
     1f4:	5f 9a       	sbi	0x0b, 7	; 11
     1f6:	c2 fd       	sbrc	r28, 2
     1f8:	5e 9a       	sbi	0x0b, 6	; 11
     1fa:	c1 fd       	sbrc	r28, 1
     1fc:	5d 9a       	sbi	0x0b, 5	; 11
     1fe:	c0 fd       	sbrc	r28, 0
     200:	5c 9a       	sbi	0x0b, 4	; 11
     202:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     206:	5c 9a       	sbi	0x0b, 4	; 11
     208:	5d 9a       	sbi	0x0b, 5	; 11
     20a:	5e 9a       	sbi	0x0b, 6	; 11
     20c:	5f 9a       	sbi	0x0b, 7	; 11
     20e:	87 eb       	ldi	r24, 0xB7	; 183
     210:	9b e0       	ldi	r25, 0x0B	; 11
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_write+0x5c>
     216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_write+0x62>
     218:	00 00       	nop
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <lcd_command>:
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write>
     224:	08 95       	ret

00000226 <lcd_gotoxy>:
     226:	61 11       	cpse	r22, r1
     228:	04 c0       	rjmp	.+8      	; 0x232 <lcd_gotoxy+0xc>
     22a:	80 58       	subi	r24, 0x80	; 128
     22c:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
     230:	08 95       	ret
     232:	80 54       	subi	r24, 0x40	; 64
     234:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
     238:	08 95       	ret

0000023a <lcd_clrscr>:
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
     240:	08 95       	ret

00000242 <lcd_putc>:
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write>
     248:	08 95       	ret

0000024a <lcd_puts>:
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	ec 01       	movw	r28, r24
     250:	21 96       	adiw	r28, 0x01	; 1
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 23       	and	r24, r24
     258:	29 f0       	breq	.+10     	; 0x264 <lcd_puts+0x1a>
     25a:	0e 94 21 01 	call	0x242	; 0x242 <lcd_putc>
     25e:	89 91       	ld	r24, Y+
     260:	81 11       	cpse	r24, r1
     262:	fb cf       	rjmp	.-10     	; 0x25a <lcd_puts+0x10>
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     26a:	cf 93       	push	r28
     26c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     26e:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     270:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     272:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     274:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     276:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     278:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     27a:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	99 ef       	ldi	r25, 0xF9	; 249
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x16>
     284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_init+0x1c>
     286:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     288:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     28a:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     28c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     290:	8f e1       	ldi	r24, 0x1F	; 31
     292:	9e e4       	ldi	r25, 0x4E	; 78
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x2a>
     298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_init+0x30>
     29a:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     29c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x3a>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x40>
     2aa:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     2ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x4a>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x50>
     2ba:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     2bc:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     2be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <toggle_e>
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x5c>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_init+0x62>
     2cc:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     2ce:	88 e2       	ldi	r24, 0x28	; 40
     2d0:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
    lcd_clrscr();                  /* display clear                */
     2da:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_command>
}/* lcd_init */
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <fce>:
 * Main function where the program execution begins. Use Timer/Counter1
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */

unsigned int fce(unsigned int i ) {
     2ee:	4f 92       	push	r4
     2f0:	5f 92       	push	r5
     2f2:	6f 92       	push	r6
     2f4:	7f 92       	push	r7
     2f6:	8f 92       	push	r8
     2f8:	9f 92       	push	r9
     2fa:	af 92       	push	r10
     2fc:	bf 92       	push	r11
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	ec 01       	movw	r28, r24
	
	if(fceType==0) 
     30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     310:	81 11       	cpse	r24, r1
     312:	38 c0       	rjmp	.+112    	; 0x384 <fce+0x96>
		return (unsigned int)(255*(1 + sin(i * 6.28 * Tvz/T))/2);
     314:	be 01       	movw	r22, r28
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     31e:	23 ec       	ldi	r18, 0xC3	; 195
     320:	35 ef       	ldi	r19, 0xF5	; 245
     322:	48 ec       	ldi	r20, 0xC8	; 200
     324:	50 e4       	ldi	r21, 0x40	; 64
     326:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     32a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     32e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     332:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     336:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     33a:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     33e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <T>
     342:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <T+0x1>
     346:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <T+0x2>
     34a:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <T+0x3>
     34e:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     352:	0e 94 c4 08 	call	0x1188	; 0x1188 <sin>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e8       	ldi	r20, 0x80	; 128
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	4f e7       	ldi	r20, 0x7F	; 127
     368:	53 e4       	ldi	r21, 0x43	; 67
     36a:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	5f e3       	ldi	r21, 0x3F	; 63
     376:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     37a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
     37e:	26 2f       	mov	r18, r22
     380:	97 2f       	mov	r25, r23
     382:	8e c0       	rjmp	.+284    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	else if(fceType==1)
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	51 f5       	brne	.+84     	; 0x3dc <fce+0xee>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
     388:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     38c:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     390:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     394:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     398:	be 01       	movw	r22, r28
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     3a2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     3a6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     3aa:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     3ae:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     3b2:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	0e 94 5f 07 	call	0xebe	; 0xebe <fmod>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	4f e7       	ldi	r20, 0x7F	; 127
     3c4:	53 e4       	ldi	r21, 0x43	; 67
     3c6:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     3ca:	a7 01       	movw	r20, r14
     3cc:	96 01       	movw	r18, r12
     3ce:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     3d2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
     3d6:	26 2f       	mov	r18, r22
     3d8:	97 2f       	mov	r25, r23
     3da:	62 c0       	rjmp	.+196    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	else if(fceType==2) {	
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	09 f0       	breq	.+2      	; 0x3e2 <fce+0xf4>
     3e0:	5a c0       	rjmp	.+180    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		return (unsigned int)(255 * pow(-1,i/  ((int)(T/Tvz/2))) * 2 * fmod(i*Tvz,T)/T);
     3e2:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     3e6:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     3ea:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     3ee:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     3f2:	80 90 01 01 	lds	r8, 0x0101	; 0x800101 <Tvz>
     3f6:	90 90 02 01 	lds	r9, 0x0102	; 0x800102 <Tvz+0x1>
     3fa:	a0 90 03 01 	lds	r10, 0x0103	; 0x800103 <Tvz+0x2>
     3fe:	b0 90 04 01 	lds	r11, 0x0104	; 0x800104 <Tvz+0x3>
     402:	a5 01       	movw	r20, r10
     404:	94 01       	movw	r18, r8
     406:	c7 01       	movw	r24, r14
     408:	b6 01       	movw	r22, r12
     40a:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	5f e3       	ldi	r21, 0x3F	; 63
     416:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     41a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixsfsi>
     41e:	ab 01       	movw	r20, r22
     420:	bc 01       	movw	r22, r24
     422:	ce 01       	movw	r24, r28
     424:	ba 01       	movw	r22, r20
     426:	0e 94 46 0a 	call	0x148c	; 0x148c <__udivmodhi4>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     432:	9b 01       	movw	r18, r22
     434:	ac 01       	movw	r20, r24
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e8       	ldi	r24, 0x80	; 128
     43c:	9f eb       	ldi	r25, 0xBF	; 191
     43e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <pow>
     442:	2b 01       	movw	r4, r22
     444:	3c 01       	movw	r6, r24
     446:	be 01       	movw	r22, r28
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     450:	a5 01       	movw	r20, r10
     452:	94 01       	movw	r18, r8
     454:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     458:	a7 01       	movw	r20, r14
     45a:	96 01       	movw	r18, r12
     45c:	0e 94 5f 07 	call	0xebe	; 0xebe <fmod>
     460:	4b 01       	movw	r8, r22
     462:	5c 01       	movw	r10, r24
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	4f e7       	ldi	r20, 0x7F	; 127
     46a:	53 e4       	ldi	r21, 0x43	; 67
     46c:	c3 01       	movw	r24, r6
     46e:	b2 01       	movw	r22, r4
     470:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     474:	9b 01       	movw	r18, r22
     476:	ac 01       	movw	r20, r24
     478:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
     47c:	a5 01       	movw	r20, r10
     47e:	94 01       	movw	r18, r8
     480:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     484:	a7 01       	movw	r20, r14
     486:	96 01       	movw	r18, r12
     488:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     48c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
     490:	26 2f       	mov	r18, r22
     492:	97 2f       	mov	r25, r23
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	}
	else if(fceType==10)
     496:	8a 30       	cpi	r24, 0x0A	; 10
     498:	09 f0       	breq	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	return (uint8_t)(0);
}
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
	else if(fceType==2) {	
		return (unsigned int)(255 * pow(-1,i/  ((int)(T/Tvz/2))) * 2 * fmod(i*Tvz,T)/T);
	}
	else if(fceType==10)
	return (uint8_t)(0);
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	82 2f       	mov	r24, r18
}
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	08 95       	ret

000004c0 <setByte>:

unsigned setByte(unsigned int num) {
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
	if (num & (0x01 << 0)) GPIO_write_high(&PORTD,PD3); else GPIO_write_low(&PORTD,PD3);
     4c4:	80 ff       	sbrs	r24, 0
     4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <setByte+0x16>
     4c8:	63 e0       	ldi	r22, 0x03	; 3
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	8b e2       	ldi	r24, 0x2B	; 43
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <setByte+0x22>
     4d6:	63 e0       	ldi	r22, 0x03	; 3
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	8b e2       	ldi	r24, 0x2B	; 43
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 1)) GPIO_write_high(&PORTD,PD2); else GPIO_write_low(&PORTD,PD2);
     4e2:	c1 ff       	sbrs	r28, 1
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <setByte+0x34>
     4e6:	62 e0       	ldi	r22, 0x02	; 2
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	8b e2       	ldi	r24, 0x2B	; 43
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <setByte+0x40>
     4f4:	62 e0       	ldi	r22, 0x02	; 2
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	8b e2       	ldi	r24, 0x2B	; 43
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 2)) GPIO_write_high(&PORTD,PD1); else GPIO_write_low(&PORTD,PD1);
     500:	c2 ff       	sbrs	r28, 2
     502:	07 c0       	rjmp	.+14     	; 0x512 <setByte+0x52>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	8b e2       	ldi	r24, 0x2B	; 43
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     510:	06 c0       	rjmp	.+12     	; 0x51e <setByte+0x5e>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	8b e2       	ldi	r24, 0x2B	; 43
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 3)) GPIO_write_high(&PORTD,PD0); else GPIO_write_low(&PORTD,PD0);
     51e:	c3 ff       	sbrs	r28, 3
     520:	07 c0       	rjmp	.+14     	; 0x530 <setByte+0x70>
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	8b e2       	ldi	r24, 0x2B	; 43
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     52e:	06 c0       	rjmp	.+12     	; 0x53c <setByte+0x7c>
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	8b e2       	ldi	r24, 0x2B	; 43
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 4)) GPIO_write_high(&PORTC,PC6); else GPIO_write_low(&PORTC,PC6);
     53c:	c4 ff       	sbrs	r28, 4
     53e:	07 c0       	rjmp	.+14     	; 0x54e <setByte+0x8e>
     540:	66 e0       	ldi	r22, 0x06	; 6
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	88 e2       	ldi	r24, 0x28	; 40
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     54c:	06 c0       	rjmp	.+12     	; 0x55a <setByte+0x9a>
     54e:	66 e0       	ldi	r22, 0x06	; 6
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	88 e2       	ldi	r24, 0x28	; 40
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 5)) GPIO_write_high(&PORTC,PC5); else GPIO_write_low(&PORTC,PC5);
     55a:	c5 ff       	sbrs	r28, 5
     55c:	07 c0       	rjmp	.+14     	; 0x56c <setByte+0xac>
     55e:	65 e0       	ldi	r22, 0x05	; 5
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	88 e2       	ldi	r24, 0x28	; 40
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     56a:	06 c0       	rjmp	.+12     	; 0x578 <setByte+0xb8>
     56c:	65 e0       	ldi	r22, 0x05	; 5
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	88 e2       	ldi	r24, 0x28	; 40
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 6)) GPIO_write_high(&PORTC,PC4); else GPIO_write_low(&PORTC,PC4);
     578:	c6 ff       	sbrs	r28, 6
     57a:	07 c0       	rjmp	.+14     	; 0x58a <setByte+0xca>
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	88 e2       	ldi	r24, 0x28	; 40
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     588:	06 c0       	rjmp	.+12     	; 0x596 <setByte+0xd6>
     58a:	64 e0       	ldi	r22, 0x04	; 4
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	88 e2       	ldi	r24, 0x28	; 40
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 7)) GPIO_write_high(&PORTC,PC3); else GPIO_write_low(&PORTC,PC3);		
     596:	c7 ff       	sbrs	r28, 7
     598:	07 c0       	rjmp	.+14     	; 0x5a8 <setByte+0xe8>
     59a:	63 e0       	ldi	r22, 0x03	; 3
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	88 e2       	ldi	r24, 0x28	; 40
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <setByte+0xf4>
     5a8:	63 e0       	ldi	r22, 0x03	; 3
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	88 e2       	ldi	r24, 0x28	; 40
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
}
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <main>:

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     5b8:	8c e0       	ldi	r24, 0x0C	; 12
     5ba:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("adc_value:");
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
     5c6:	80 e1       	ldi	r24, 0x10	; 16
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
    lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
     5d6:	8b e1       	ldi	r24, 0x1B	; 27
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
	//config output 
	GPIO_config_output(&DDRD, PD0);
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8a e2       	ldi	r24, 0x2A	; 42
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD1);
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	8a e2       	ldi	r24, 0x2A	; 42
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD2);
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	8a e2       	ldi	r24, 0x2A	; 42
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD3);
     602:	63 e0       	ldi	r22, 0x03	; 3
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	8a e2       	ldi	r24, 0x2A	; 42
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRB, PB6);
     60e:	66 e0       	ldi	r22, 0x06	; 6
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	84 e2       	ldi	r24, 0x24	; 36
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC3);
     61a:	63 e0       	ldi	r22, 0x03	; 3
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	87 e2       	ldi	r24, 0x27	; 39
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC4);
     626:	64 e0       	ldi	r22, 0x04	; 4
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	87 e2       	ldi	r24, 0x27	; 39
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC5);
     632:	65 e0       	ldi	r22, 0x05	; 5
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	87 e2       	ldi	r24, 0x27	; 39
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC6);
     63e:	66 e0       	ldi	r22, 0x06	; 6
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	87 e2       	ldi	r24, 0x27	; 39
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	// Enable interrupt and set the overflow prescaler to 262 ms
	TIM2_overflow_interrupt_enable();
     64a:	e0 e7       	ldi	r30, 0x70	; 112
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	81 60       	ori	r24, 0x01	; 1
     652:	80 83       	st	Z, r24
	TIM2_overflow_16us();
     654:	e1 eb       	ldi	r30, 0xB1	; 177
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	89 7f       	andi	r24, 0xF9	; 249
     65c:	80 83       	st	Z, r24
     65e:	80 81       	ld	r24, Z
     660:	81 60       	ori	r24, 0x01	; 1
     662:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
     664:	ef e6       	ldi	r30, 0x6F	; 111
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24
	TIM1_overflow_262ms();
     66e:	e1 e8       	ldi	r30, 0x81	; 129
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	8b 7f       	andi	r24, 0xFB	; 251
     676:	80 83       	st	Z, r24
     678:	80 81       	ld	r24, Z
     67a:	83 60       	ori	r24, 0x03	; 3
     67c:	80 83       	st	Z, r24
	TIM0_overflow_interrupt_enable();
     67e:	ee e6       	ldi	r30, 0x6E	; 110
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	81 60       	ori	r24, 0x01	; 1
     686:	80 83       	st	Z, r24
	TIM0_overflow_4ms();
     688:	85 b5       	in	r24, 0x25	; 37
     68a:	8c 7f       	andi	r24, 0xFC	; 252
     68c:	85 bd       	out	0x25, r24	; 37
     68e:	85 b5       	in	r24, 0x25	; 37
     690:	84 60       	ori	r24, 0x04	; 4
     692:	85 bd       	out	0x25, r24	; 37
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
     694:	ec e7       	ldi	r30, 0x7C	; 124
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	80 64       	ori	r24, 0x40	; 64
     69c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     69e:	80 81       	ld	r24, Z
     6a0:	8f 77       	andi	r24, 0x7F	; 127
     6a2:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
     6a4:	80 81       	ld	r24, Z
     6a6:	80 7f       	andi	r24, 0xF0	; 240
     6a8:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
     6aa:	ea e7       	ldi	r30, 0x7A	; 122
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	80 68       	ori	r24, 0x80	; 128
     6b2:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
     6b4:	80 81       	ld	r24, Z
     6b6:	88 60       	ori	r24, 0x08	; 8
     6b8:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= ((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2));
     6ba:	80 81       	ld	r24, Z
     6bc:	87 60       	ori	r24, 0x07	; 7
     6be:	80 83       	st	Z, r24
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     6c0:	87 e6       	ldi	r24, 0x67	; 103
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <uart_init>
	// Enables interrupts by setting the global interrupt mask
    sei();
     6c8:	78 94       	sei
     6ca:	ff cf       	rjmp	.-2      	; 0x6ca <main+0x112>

000006cc <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{	
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	8f 93       	push	r24
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
     6dc:	ea e7       	ldi	r30, 0x7A	; 122
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	80 64       	ori	r24, 0x40	; 64
     6e4:	80 83       	st	Z, r24
}
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	8f 91       	pop	r24
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
	uint16_t a =fce(i++);
     718:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     71c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
     720:	9c 01       	movw	r18, r24
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <__data_end+0x1>
     72a:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     72e:	0e 94 77 01 	call	0x2ee	; 0x2ee <fce>
	setByte(a);	
     732:	0e 94 60 02 	call	0x4c0	; 0x4c0 <setByte>
}	
     736:	ff 91       	pop	r31
     738:	ef 91       	pop	r30
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	7f 91       	pop	r23
     744:	6f 91       	pop	r22
     746:	5f 91       	pop	r21
     748:	4f 91       	pop	r20
     74a:	3f 91       	pop	r19
     74c:	2f 91       	pop	r18
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
	x++;
     77a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <x>
     77e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <x+0x1>
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <x+0x1>
     788:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <x>
	if (x>=(DTMF/2)&&duration>1){
     78c:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <DTMF>
     790:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <DTMF+0x1>
     794:	36 95       	lsr	r19
     796:	27 95       	ror	r18
     798:	82 17       	cp	r24, r18
     79a:	93 07       	cpc	r25, r19
     79c:	c8 f0       	brcs	.+50     	; 0x7d0 <__vector_9+0x78>
     79e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <duration>
     7a2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <duration+0x1>
     7a6:	02 97       	sbiw	r24, 0x02	; 2
     7a8:	98 f0       	brcs	.+38     	; 0x7d0 <__vector_9+0x78>
		GPIO_toggle(&PORTB,PB6);
     7aa:	66 e0       	ldi	r22, 0x06	; 6
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	85 e2       	ldi	r24, 0x25	; 37
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 c8 00 	call	0x190	; 0x190 <GPIO_toggle>
		x=0;
     7b6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <x+0x1>
     7ba:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <x>
		duration=duration-1;
     7be:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <duration>
     7c2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <duration+0x1>
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     7cc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	}
}
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_21>:

ISR(ADC_vect)
{
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	2f 93       	push	r18
     802:	3f 93       	push	r19
     804:	4f 93       	push	r20
     806:	5f 93       	push	r21
     808:	6f 93       	push	r22
     80a:	7f 93       	push	r23
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	26 97       	sbiw	r28, 0x06	; 6
     822:	de bf       	out	0x3e, r29	; 62
     824:	cd bf       	out	0x3d, r28	; 61
	uint16_t value = ADC;
     826:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     82a:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	char lcd_string[6] ="      ";
     82e:	86 e0       	ldi	r24, 0x06	; 6
     830:	e9 e0       	ldi	r30, 0x09	; 9
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	de 01       	movw	r26, r28
     836:	11 96       	adiw	r26, 0x01	; 1
     838:	01 90       	ld	r0, Z+
     83a:	0d 92       	st	X+, r0
     83c:	8a 95       	dec	r24
     83e:	e1 f7       	brne	.-8      	; 0x838 <__vector_21+0x46>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     840:	4a e0       	ldi	r20, 0x0A	; 10
     842:	be 01       	movw	r22, r28
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	c8 01       	movw	r24, r16
     84a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__itoa_ncheck>
	itoa(value, lcd_string, 10); // value to dacimal
	if (value < 700) // reduce amount of sent uart data
     84e:	0c 3b       	cpi	r16, 0xBC	; 188
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	18 07       	cpc	r17, r24
     854:	60 f4       	brcc	.+24     	; 0x86e <__vector_21+0x7c>
	{
		uart_puts("ADC value in decimal:");
     856:	83 e2       	ldi	r24, 0x23	; 35
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <uart_puts>
		uart_puts(lcd_string); // send uart value in decimal
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <uart_puts>
		uart_puts("\n");
     866:	89 e3       	ldi	r24, 0x39	; 57
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <uart_puts>
	}
	lcd_gotoxy(12, 0);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	8c e0       	ldi	r24, 0x0C	; 12
     872:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
	lcd_puts("    "); //clear area
     876:	8b e3       	ldi	r24, 0x3B	; 59
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
	lcd_gotoxy(12, 0);
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	8c e0       	ldi	r24, 0x0C	; 12
     882:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
	lcd_puts(lcd_string); // show decimal
     886:	ce 01       	movw	r24, r28
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
	
	if (value>465 && value<520){fceType=0;DTMF=34;duration=300;}    //key1
     88e:	c8 01       	movw	r24, r16
     890:	82 5d       	subi	r24, 0xD2	; 210
     892:	91 40       	sbci	r25, 0x01	; 1
     894:	c6 97       	sbiw	r24, 0x36	; 54
     896:	70 f4       	brcc	.+28     	; 0x8b4 <__vector_21+0xc2>
     898:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     89c:	82 e2       	ldi	r24, 0x22	; 34
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8a4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8a8:	8c e2       	ldi	r24, 0x2C	; 44
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8b0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>360 && value<380){fceType=1;DTMF=32;duration=300;}	//key2
     8b4:	c8 01       	movw	r24, r16
     8b6:	89 56       	subi	r24, 0x69	; 105
     8b8:	91 40       	sbci	r25, 0x01	; 1
     8ba:	43 97       	sbiw	r24, 0x13	; 19
     8bc:	78 f4       	brcc	.+30     	; 0x8dc <__vector_21+0xea>
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     8c4:	80 e2       	ldi	r24, 0x20	; 32
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8cc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8d0:	8c e2       	ldi	r24, 0x2C	; 44
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8d8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>198 && value<208){fceType=2;DTMF=30;duration=300;}	//key3
     8dc:	c8 01       	movw	r24, r16
     8de:	87 5c       	subi	r24, 0xC7	; 199
     8e0:	91 09       	sbc	r25, r1
     8e2:	09 97       	sbiw	r24, 0x09	; 9
     8e4:	78 f4       	brcc	.+30     	; 0x904 <__stack+0x5>
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     8ec:	8e e1       	ldi	r24, 0x1E	; 30
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8f4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8f8:	8c e2       	ldi	r24, 0x2C	; 44
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     900:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>450 && value<460){DTMF=32;duration=300;}				//key4
     904:	c8 01       	movw	r24, r16
     906:	83 5c       	subi	r24, 0xC3	; 195
     908:	91 40       	sbci	r25, 0x01	; 1
     90a:	09 97       	sbiw	r24, 0x09	; 9
     90c:	60 f4       	brcc	.+24     	; 0x926 <__stack+0x27>
     90e:	80 e2       	ldi	r24, 0x20	; 32
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     916:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     91a:	8c e2       	ldi	r24, 0x2C	; 44
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     922:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>330 && value<340){DTMF=30;duration=300;}				//key5
     926:	c8 01       	movw	r24, r16
     928:	8b 54       	subi	r24, 0x4B	; 75
     92a:	91 40       	sbci	r25, 0x01	; 1
     92c:	09 97       	sbiw	r24, 0x09	; 9
     92e:	60 f4       	brcc	.+24     	; 0x948 <__stack+0x49>
     930:	8e e1       	ldi	r24, 0x1E	; 30
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     938:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     93c:	8c e2       	ldi	r24, 0x2C	; 44
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     944:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>140 && value<150){DTMF=29;duration=300;}				//key6
     948:	c8 01       	movw	r24, r16
     94a:	8d 58       	subi	r24, 0x8D	; 141
     94c:	91 09       	sbc	r25, r1
     94e:	09 97       	sbiw	r24, 0x09	; 9
     950:	60 f4       	brcc	.+24     	; 0x96a <__stack+0x6b>
     952:	8d e1       	ldi	r24, 0x1D	; 29
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     95a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     95e:	8c e2       	ldi	r24, 0x2C	; 44
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     966:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>420 && value<432){DTMF=32;duration=300;}				//key7
     96a:	c8 01       	movw	r24, r16
     96c:	85 5a       	subi	r24, 0xA5	; 165
     96e:	91 40       	sbci	r25, 0x01	; 1
     970:	0b 97       	sbiw	r24, 0x0b	; 11
     972:	60 f4       	brcc	.+24     	; 0x98c <__stack+0x8d>
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     97c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     980:	8c e2       	ldi	r24, 0x2C	; 44
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     988:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>290 && value<300){DTMF=29;duration=300;}				//key8
     98c:	c8 01       	movw	r24, r16
     98e:	83 52       	subi	r24, 0x23	; 35
     990:	91 40       	sbci	r25, 0x01	; 1
     992:	09 97       	sbiw	r24, 0x09	; 9
     994:	60 f4       	brcc	.+24     	; 0x9ae <__stack+0xaf>
     996:	8d e1       	ldi	r24, 0x1D	; 29
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     99e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     9a2:	8c e2       	ldi	r24, 0x2C	; 44
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     9aa:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>70 && value<80){DTMF=27;duration=300;}				//key9									
     9ae:	c8 01       	movw	r24, r16
     9b0:	87 54       	subi	r24, 0x47	; 71
     9b2:	91 09       	sbc	r25, r1
     9b4:	09 97       	sbiw	r24, 0x09	; 9
     9b6:	60 f4       	brcc	.+24     	; 0x9d0 <__stack+0xd1>
     9b8:	8b e1       	ldi	r24, 0x1B	; 27
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     9c0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     9c4:	8c e2       	ldi	r24, 0x2C	; 44
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     9cc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>390 && value<410){Tvz=Tvz*2;}						//key*
     9d0:	c8 01       	movw	r24, r16
     9d2:	87 58       	subi	r24, 0x87	; 135
     9d4:	91 40       	sbci	r25, 0x01	; 1
     9d6:	43 97       	sbiw	r24, 0x13	; 19
     9d8:	a0 f4       	brcc	.+40     	; 0xa02 <__stack+0x103>
     9da:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Tvz>
     9de:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <Tvz+0x1>
     9e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Tvz+0x2>
     9e6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Tvz+0x3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
     9f2:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <Tvz>
     9f6:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <Tvz+0x1>
     9fa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Tvz+0x2>
     9fe:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <Tvz+0x3>
	if (value>240 && value<250){Tvz=Tvz/2;}						//key0
     a02:	c8 01       	movw	r24, r16
     a04:	81 5f       	subi	r24, 0xF1	; 241
     a06:	91 09       	sbc	r25, r1
     a08:	09 97       	sbiw	r24, 0x09	; 9
     a0a:	b0 f4       	brcc	.+44     	; 0xa38 <__stack+0x139>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	5f e3       	ldi	r21, 0x3F	; 63
     a14:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Tvz>
     a18:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <Tvz+0x1>
     a1c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Tvz+0x2>
     a20:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Tvz+0x3>
     a24:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     a28:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <Tvz>
     a2c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <Tvz+0x1>
     a30:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Tvz+0x2>
     a34:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <Tvz+0x3>
	if (value==0)fceType=10;										//key#
     a38:	01 2b       	or	r16, r17
     a3a:	21 f4       	brne	.+8      	; 0xa44 <__stack+0x145>
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a42:	18 c0       	rjmp	.+48     	; 0xa74 <__stack+0x175>
		if (fceType==0){lcd_gotoxy(12, 1); lcd_puts("sin");}
     a44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a48:	81 11       	cpse	r24, r1
     a4a:	08 c0       	rjmp	.+16     	; 0xa5c <__stack+0x15d>
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	8c e0       	ldi	r24, 0x0C	; 12
     a50:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
		if (fceType==1){lcd_gotoxy(12, 1); lcd_puts("saw");}
     a5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	41 f4       	brne	.+16     	; 0xa74 <__stack+0x175>
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
     a6c:	84 e4       	ldi	r24, 0x44	; 68
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
		if (fceType==2){lcd_gotoxy(12, 1); lcd_puts("tri");}
     a74:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	41 f4       	brne	.+16     	; 0xa8c <__stack+0x18d>
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	8c e0       	ldi	r24, 0x0C	; 12
     a80:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
     a84:	88 e4       	ldi	r24, 0x48	; 72
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
		if (fceType==10){lcd_gotoxy(12, 1); lcd_puts("off");}
     a8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a90:	8a 30       	cpi	r24, 0x0A	; 10
     a92:	41 f4       	brne	.+16     	; 0xaa4 <__stack+0x1a5>
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	8c e0       	ldi	r24, 0x0C	; 12
     a98:	0e 94 13 01 	call	0x226	; 0x226 <lcd_gotoxy>
     a9c:	8c e4       	ldi	r24, 0x4C	; 76
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_puts>
	



     aa4:	26 96       	adiw	r28, 0x06	; 6
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     af2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     af6:	8c 71       	andi	r24, 0x1C	; 28
     af8:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <UART_RxHead>
     afc:	ef 5f       	subi	r30, 0xFF	; 255
     afe:	ef 71       	andi	r30, 0x1F	; 31
     b00:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_RxTail>
     b04:	e9 17       	cp	r30, r25
     b06:	39 f0       	breq	.+14     	; 0xb16 <__vector_18+0x3c>
     b08:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <UART_RxHead>
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	e3 5a       	subi	r30, 0xA3	; 163
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	20 83       	st	Z, r18
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <__vector_18+0x3e>
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <UART_LastRxError>
     b1c:	89 2b       	or	r24, r25
     b1e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <UART_LastRxError>
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_19>:
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
     b48:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <UART_TxHead>
     b4c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <UART_TxTail>
     b50:	98 17       	cp	r25, r24
     b52:	69 f0       	breq	.+26     	; 0xb6e <__vector_19+0x38>
     b54:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <UART_TxTail>
     b58:	ef 5f       	subi	r30, 0xFF	; 255
     b5a:	ef 71       	andi	r30, 0x1F	; 31
     b5c:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <UART_TxTail>
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	e3 58       	subi	r30, 0x83	; 131
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	80 81       	ld	r24, Z
     b68:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     b6c:	05 c0       	rjmp	.+10     	; 0xb78 <__vector_19+0x42>
     b6e:	e1 ec       	ldi	r30, 0xC1	; 193
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	80 83       	st	Z, r24
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <uart_init>:
     b8a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <UART_TxHead>
     b8e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <UART_TxTail>
     b92:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <UART_RxHead>
     b96:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <UART_RxTail>
     b9a:	99 23       	and	r25, r25
     b9c:	1c f4       	brge	.+6      	; 0xba4 <uart_init+0x1a>
     b9e:	22 e0       	ldi	r18, 0x02	; 2
     ba0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     ba4:	90 78       	andi	r25, 0x80	; 128
     ba6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     baa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     bae:	88 e9       	ldi	r24, 0x98	; 152
     bb0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     bb4:	86 e0       	ldi	r24, 0x06	; 6
     bb6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     bba:	08 95       	ret

00000bbc <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     bbc:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <UART_TxHead>
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     bc4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <UART_TxTail>
     bc8:	29 17       	cp	r18, r25
     bca:	e1 f3       	breq	.-8      	; 0xbc4 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     bcc:	e2 2f       	mov	r30, r18
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e3 58       	subi	r30, 0x83	; 131
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     bd6:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     bda:	e1 ec       	ldi	r30, 0xC1	; 193
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	80 83       	st	Z, r24
     be4:	08 95       	ret

00000be6 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
    while (*s)
     bec:	88 81       	ld	r24, Y
     bee:	88 23       	and	r24, r24
     bf0:	31 f0       	breq	.+12     	; 0xbfe <uart_puts+0x18>
     bf2:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     bf4:	0e 94 de 05 	call	0xbbc	; 0xbbc <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     bf8:	89 91       	ld	r24, Y+
     bfa:	81 11       	cpse	r24, r1
     bfc:	fb cf       	rjmp	.-10     	; 0xbf4 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <__subsf3>:
     c04:	50 58       	subi	r21, 0x80	; 128

00000c06 <__addsf3>:
     c06:	bb 27       	eor	r27, r27
     c08:	aa 27       	eor	r26, r26
     c0a:	0e 94 1a 06 	call	0xc34	; 0xc34 <__addsf3x>
     c0e:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>
     c12:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
     c16:	38 f0       	brcs	.+14     	; 0xc26 <__addsf3+0x20>
     c18:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
     c1c:	20 f0       	brcs	.+8      	; 0xc26 <__addsf3+0x20>
     c1e:	39 f4       	brne	.+14     	; 0xc2e <__addsf3+0x28>
     c20:	9f 3f       	cpi	r25, 0xFF	; 255
     c22:	19 f4       	brne	.+6      	; 0xc2a <__addsf3+0x24>
     c24:	26 f4       	brtc	.+8      	; 0xc2e <__addsf3+0x28>
     c26:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>
     c2a:	0e f4       	brtc	.+2      	; 0xc2e <__addsf3+0x28>
     c2c:	e0 95       	com	r30
     c2e:	e7 fb       	bst	r30, 7
     c30:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>

00000c34 <__addsf3x>:
     c34:	e9 2f       	mov	r30, r25
     c36:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
     c3a:	58 f3       	brcs	.-42     	; 0xc12 <__addsf3+0xc>
     c3c:	ba 17       	cp	r27, r26
     c3e:	62 07       	cpc	r22, r18
     c40:	73 07       	cpc	r23, r19
     c42:	84 07       	cpc	r24, r20
     c44:	95 07       	cpc	r25, r21
     c46:	20 f0       	brcs	.+8      	; 0xc50 <__addsf3x+0x1c>
     c48:	79 f4       	brne	.+30     	; 0xc68 <__addsf3x+0x34>
     c4a:	a6 f5       	brtc	.+104    	; 0xcb4 <__addsf3x+0x80>
     c4c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_zero>
     c50:	0e f4       	brtc	.+2      	; 0xc54 <__addsf3x+0x20>
     c52:	e0 95       	com	r30
     c54:	0b 2e       	mov	r0, r27
     c56:	ba 2f       	mov	r27, r26
     c58:	a0 2d       	mov	r26, r0
     c5a:	0b 01       	movw	r0, r22
     c5c:	b9 01       	movw	r22, r18
     c5e:	90 01       	movw	r18, r0
     c60:	0c 01       	movw	r0, r24
     c62:	ca 01       	movw	r24, r20
     c64:	a0 01       	movw	r20, r0
     c66:	11 24       	eor	r1, r1
     c68:	ff 27       	eor	r31, r31
     c6a:	59 1b       	sub	r21, r25
     c6c:	99 f0       	breq	.+38     	; 0xc94 <__addsf3x+0x60>
     c6e:	59 3f       	cpi	r21, 0xF9	; 249
     c70:	50 f4       	brcc	.+20     	; 0xc86 <__addsf3x+0x52>
     c72:	50 3e       	cpi	r21, 0xE0	; 224
     c74:	68 f1       	brcs	.+90     	; 0xcd0 <__addsf3x+0x9c>
     c76:	1a 16       	cp	r1, r26
     c78:	f0 40       	sbci	r31, 0x00	; 0
     c7a:	a2 2f       	mov	r26, r18
     c7c:	23 2f       	mov	r18, r19
     c7e:	34 2f       	mov	r19, r20
     c80:	44 27       	eor	r20, r20
     c82:	58 5f       	subi	r21, 0xF8	; 248
     c84:	f3 cf       	rjmp	.-26     	; 0xc6c <__addsf3x+0x38>
     c86:	46 95       	lsr	r20
     c88:	37 95       	ror	r19
     c8a:	27 95       	ror	r18
     c8c:	a7 95       	ror	r26
     c8e:	f0 40       	sbci	r31, 0x00	; 0
     c90:	53 95       	inc	r21
     c92:	c9 f7       	brne	.-14     	; 0xc86 <__addsf3x+0x52>
     c94:	7e f4       	brtc	.+30     	; 0xcb4 <__addsf3x+0x80>
     c96:	1f 16       	cp	r1, r31
     c98:	ba 0b       	sbc	r27, r26
     c9a:	62 0b       	sbc	r22, r18
     c9c:	73 0b       	sbc	r23, r19
     c9e:	84 0b       	sbc	r24, r20
     ca0:	ba f0       	brmi	.+46     	; 0xcd0 <__addsf3x+0x9c>
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	a1 f0       	breq	.+40     	; 0xcce <__addsf3x+0x9a>
     ca6:	ff 0f       	add	r31, r31
     ca8:	bb 1f       	adc	r27, r27
     caa:	66 1f       	adc	r22, r22
     cac:	77 1f       	adc	r23, r23
     cae:	88 1f       	adc	r24, r24
     cb0:	c2 f7       	brpl	.-16     	; 0xca2 <__addsf3x+0x6e>
     cb2:	0e c0       	rjmp	.+28     	; 0xcd0 <__addsf3x+0x9c>
     cb4:	ba 0f       	add	r27, r26
     cb6:	62 1f       	adc	r22, r18
     cb8:	73 1f       	adc	r23, r19
     cba:	84 1f       	adc	r24, r20
     cbc:	48 f4       	brcc	.+18     	; 0xcd0 <__addsf3x+0x9c>
     cbe:	87 95       	ror	r24
     cc0:	77 95       	ror	r23
     cc2:	67 95       	ror	r22
     cc4:	b7 95       	ror	r27
     cc6:	f7 95       	ror	r31
     cc8:	9e 3f       	cpi	r25, 0xFE	; 254
     cca:	08 f0       	brcs	.+2      	; 0xcce <__addsf3x+0x9a>
     ccc:	b0 cf       	rjmp	.-160    	; 0xc2e <__addsf3+0x28>
     cce:	93 95       	inc	r25
     cd0:	88 0f       	add	r24, r24
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <__addsf3x+0xa2>
     cd4:	99 27       	eor	r25, r25
     cd6:	ee 0f       	add	r30, r30
     cd8:	97 95       	ror	r25
     cda:	87 95       	ror	r24
     cdc:	08 95       	ret

00000cde <__divsf3>:
     cde:	0e 94 83 06 	call	0xd06	; 0xd06 <__divsf3x>
     ce2:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>
     ce6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
     cea:	58 f0       	brcs	.+22     	; 0xd02 <__divsf3+0x24>
     cec:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <__divsf3+0x24>
     cf2:	29 f4       	brne	.+10     	; 0xcfe <__divsf3+0x20>
     cf4:	5f 3f       	cpi	r21, 0xFF	; 255
     cf6:	29 f0       	breq	.+10     	; 0xd02 <__divsf3+0x24>
     cf8:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>
     cfc:	51 11       	cpse	r21, r1
     cfe:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
     d02:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>

00000d06 <__divsf3x>:
     d06:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
     d0a:	68 f3       	brcs	.-38     	; 0xce6 <__divsf3+0x8>

00000d0c <__divsf3_pse>:
     d0c:	99 23       	and	r25, r25
     d0e:	b1 f3       	breq	.-20     	; 0xcfc <__divsf3+0x1e>
     d10:	55 23       	and	r21, r21
     d12:	91 f3       	breq	.-28     	; 0xcf8 <__divsf3+0x1a>
     d14:	95 1b       	sub	r25, r21
     d16:	55 0b       	sbc	r21, r21
     d18:	bb 27       	eor	r27, r27
     d1a:	aa 27       	eor	r26, r26
     d1c:	62 17       	cp	r22, r18
     d1e:	73 07       	cpc	r23, r19
     d20:	84 07       	cpc	r24, r20
     d22:	38 f0       	brcs	.+14     	; 0xd32 <__divsf3_pse+0x26>
     d24:	9f 5f       	subi	r25, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	44 1f       	adc	r20, r20
     d2e:	aa 1f       	adc	r26, r26
     d30:	a9 f3       	breq	.-22     	; 0xd1c <__divsf3_pse+0x10>
     d32:	35 d0       	rcall	.+106    	; 0xd9e <__divsf3_pse+0x92>
     d34:	0e 2e       	mov	r0, r30
     d36:	3a f0       	brmi	.+14     	; 0xd46 <__divsf3_pse+0x3a>
     d38:	e0 e8       	ldi	r30, 0x80	; 128
     d3a:	32 d0       	rcall	.+100    	; 0xda0 <__divsf3_pse+0x94>
     d3c:	91 50       	subi	r25, 0x01	; 1
     d3e:	50 40       	sbci	r21, 0x00	; 0
     d40:	e6 95       	lsr	r30
     d42:	00 1c       	adc	r0, r0
     d44:	ca f7       	brpl	.-14     	; 0xd38 <__divsf3_pse+0x2c>
     d46:	2b d0       	rcall	.+86     	; 0xd9e <__divsf3_pse+0x92>
     d48:	fe 2f       	mov	r31, r30
     d4a:	29 d0       	rcall	.+82     	; 0xd9e <__divsf3_pse+0x92>
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	bb 1f       	adc	r27, r27
     d54:	26 17       	cp	r18, r22
     d56:	37 07       	cpc	r19, r23
     d58:	48 07       	cpc	r20, r24
     d5a:	ab 07       	cpc	r26, r27
     d5c:	b0 e8       	ldi	r27, 0x80	; 128
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__divsf3_pse+0x56>
     d60:	bb 0b       	sbc	r27, r27
     d62:	80 2d       	mov	r24, r0
     d64:	bf 01       	movw	r22, r30
     d66:	ff 27       	eor	r31, r31
     d68:	93 58       	subi	r25, 0x83	; 131
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	3a f0       	brmi	.+14     	; 0xd7c <__divsf3_pse+0x70>
     d6e:	9e 3f       	cpi	r25, 0xFE	; 254
     d70:	51 05       	cpc	r21, r1
     d72:	78 f0       	brcs	.+30     	; 0xd92 <__divsf3_pse+0x86>
     d74:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>
     d78:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
     d7c:	5f 3f       	cpi	r21, 0xFF	; 255
     d7e:	e4 f3       	brlt	.-8      	; 0xd78 <__divsf3_pse+0x6c>
     d80:	98 3e       	cpi	r25, 0xE8	; 232
     d82:	d4 f3       	brlt	.-12     	; 0xd78 <__divsf3_pse+0x6c>
     d84:	86 95       	lsr	r24
     d86:	77 95       	ror	r23
     d88:	67 95       	ror	r22
     d8a:	b7 95       	ror	r27
     d8c:	f7 95       	ror	r31
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	c9 f7       	brne	.-14     	; 0xd84 <__divsf3_pse+0x78>
     d92:	88 0f       	add	r24, r24
     d94:	91 1d       	adc	r25, r1
     d96:	96 95       	lsr	r25
     d98:	87 95       	ror	r24
     d9a:	97 f9       	bld	r25, 7
     d9c:	08 95       	ret
     d9e:	e1 e0       	ldi	r30, 0x01	; 1
     da0:	66 0f       	add	r22, r22
     da2:	77 1f       	adc	r23, r23
     da4:	88 1f       	adc	r24, r24
     da6:	bb 1f       	adc	r27, r27
     da8:	62 17       	cp	r22, r18
     daa:	73 07       	cpc	r23, r19
     dac:	84 07       	cpc	r24, r20
     dae:	ba 07       	cpc	r27, r26
     db0:	20 f0       	brcs	.+8      	; 0xdba <__divsf3_pse+0xae>
     db2:	62 1b       	sub	r22, r18
     db4:	73 0b       	sbc	r23, r19
     db6:	84 0b       	sbc	r24, r20
     db8:	ba 0b       	sbc	r27, r26
     dba:	ee 1f       	adc	r30, r30
     dbc:	88 f7       	brcc	.-30     	; 0xda0 <__divsf3_pse+0x94>
     dbe:	e0 95       	com	r30
     dc0:	08 95       	ret

00000dc2 <__fixsfsi>:
     dc2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
     dc6:	68 94       	set
     dc8:	b1 11       	cpse	r27, r1
     dca:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
     dce:	08 95       	ret

00000dd0 <__fixunssfsi>:
     dd0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
     dd4:	88 f0       	brcs	.+34     	; 0xdf8 <__fixunssfsi+0x28>
     dd6:	9f 57       	subi	r25, 0x7F	; 127
     dd8:	98 f0       	brcs	.+38     	; 0xe00 <__fixunssfsi+0x30>
     dda:	b9 2f       	mov	r27, r25
     ddc:	99 27       	eor	r25, r25
     dde:	b7 51       	subi	r27, 0x17	; 23
     de0:	b0 f0       	brcs	.+44     	; 0xe0e <__fixunssfsi+0x3e>
     de2:	e1 f0       	breq	.+56     	; 0xe1c <__fixunssfsi+0x4c>
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	1a f0       	brmi	.+6      	; 0xdf4 <__fixunssfsi+0x24>
     dee:	ba 95       	dec	r27
     df0:	c9 f7       	brne	.-14     	; 0xde4 <__fixunssfsi+0x14>
     df2:	14 c0       	rjmp	.+40     	; 0xe1c <__fixunssfsi+0x4c>
     df4:	b1 30       	cpi	r27, 0x01	; 1
     df6:	91 f0       	breq	.+36     	; 0xe1c <__fixunssfsi+0x4c>
     df8:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_zero>
     dfc:	b1 e0       	ldi	r27, 0x01	; 1
     dfe:	08 95       	ret
     e00:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_zero>
     e04:	67 2f       	mov	r22, r23
     e06:	78 2f       	mov	r23, r24
     e08:	88 27       	eor	r24, r24
     e0a:	b8 5f       	subi	r27, 0xF8	; 248
     e0c:	39 f0       	breq	.+14     	; 0xe1c <__fixunssfsi+0x4c>
     e0e:	b9 3f       	cpi	r27, 0xF9	; 249
     e10:	cc f3       	brlt	.-14     	; 0xe04 <__fixunssfsi+0x34>
     e12:	86 95       	lsr	r24
     e14:	77 95       	ror	r23
     e16:	67 95       	ror	r22
     e18:	b3 95       	inc	r27
     e1a:	d9 f7       	brne	.-10     	; 0xe12 <__fixunssfsi+0x42>
     e1c:	3e f4       	brtc	.+14     	; 0xe2c <__fixunssfsi+0x5c>
     e1e:	90 95       	com	r25
     e20:	80 95       	com	r24
     e22:	70 95       	com	r23
     e24:	61 95       	neg	r22
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	8f 4f       	sbci	r24, 0xFF	; 255
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	08 95       	ret

00000e2e <__floatunsisf>:
     e2e:	e8 94       	clt
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <__floatsisf+0x12>

00000e32 <__floatsisf>:
     e32:	97 fb       	bst	r25, 7
     e34:	3e f4       	brtc	.+14     	; 0xe44 <__floatsisf+0x12>
     e36:	90 95       	com	r25
     e38:	80 95       	com	r24
     e3a:	70 95       	com	r23
     e3c:	61 95       	neg	r22
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	8f 4f       	sbci	r24, 0xFF	; 255
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	99 23       	and	r25, r25
     e46:	a9 f0       	breq	.+42     	; 0xe72 <__floatsisf+0x40>
     e48:	f9 2f       	mov	r31, r25
     e4a:	96 e9       	ldi	r25, 0x96	; 150
     e4c:	bb 27       	eor	r27, r27
     e4e:	93 95       	inc	r25
     e50:	f6 95       	lsr	r31
     e52:	87 95       	ror	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b7 95       	ror	r27
     e5a:	f1 11       	cpse	r31, r1
     e5c:	f8 cf       	rjmp	.-16     	; 0xe4e <__floatsisf+0x1c>
     e5e:	fa f4       	brpl	.+62     	; 0xe9e <__floatsisf+0x6c>
     e60:	bb 0f       	add	r27, r27
     e62:	11 f4       	brne	.+4      	; 0xe68 <__floatsisf+0x36>
     e64:	60 ff       	sbrs	r22, 0
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <__floatsisf+0x6c>
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	8f 4f       	sbci	r24, 0xFF	; 255
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	16 c0       	rjmp	.+44     	; 0xe9e <__floatsisf+0x6c>
     e72:	88 23       	and	r24, r24
     e74:	11 f0       	breq	.+4      	; 0xe7a <__floatsisf+0x48>
     e76:	96 e9       	ldi	r25, 0x96	; 150
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <__floatsisf+0x6a>
     e7a:	77 23       	and	r23, r23
     e7c:	21 f0       	breq	.+8      	; 0xe86 <__floatsisf+0x54>
     e7e:	9e e8       	ldi	r25, 0x8E	; 142
     e80:	87 2f       	mov	r24, r23
     e82:	76 2f       	mov	r23, r22
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <__floatsisf+0x5e>
     e86:	66 23       	and	r22, r22
     e88:	71 f0       	breq	.+28     	; 0xea6 <__floatsisf+0x74>
     e8a:	96 e8       	ldi	r25, 0x86	; 134
     e8c:	86 2f       	mov	r24, r22
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	2a f0       	brmi	.+10     	; 0xe9e <__floatsisf+0x6c>
     e94:	9a 95       	dec	r25
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	da f7       	brpl	.-10     	; 0xe94 <__floatsisf+0x62>
     e9e:	88 0f       	add	r24, r24
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	97 f9       	bld	r25, 7
     ea6:	08 95       	ret
     ea8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
     eac:	20 f0       	brcs	.+8      	; 0xeb6 <__floatsisf+0x84>
     eae:	19 f0       	breq	.+6      	; 0xeb6 <__floatsisf+0x84>
     eb0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
     eb4:	50 f4       	brcc	.+20     	; 0xeca <fmod+0xc>
     eb6:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>
     eba:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>

00000ebe <fmod>:
     ebe:	e9 2f       	mov	r30, r25
     ec0:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
     ec4:	88 f3       	brcs	.-30     	; 0xea8 <__floatsisf+0x76>
     ec6:	55 23       	and	r21, r21
     ec8:	b1 f3       	breq	.-20     	; 0xeb6 <__floatsisf+0x84>
     eca:	e7 fb       	bst	r30, 7
     ecc:	62 17       	cp	r22, r18
     ece:	73 07       	cpc	r23, r19
     ed0:	84 07       	cpc	r24, r20
     ed2:	95 07       	cpc	r25, r21
     ed4:	a8 f1       	brcs	.+106    	; 0xf40 <fmod+0x82>
     ed6:	89 f3       	breq	.-30     	; 0xeba <__floatsisf+0x88>
     ed8:	e9 2f       	mov	r30, r25
     eda:	ff 27       	eor	r31, r31
     edc:	88 23       	and	r24, r24
     ede:	2a f0       	brmi	.+10     	; 0xeea <fmod+0x2c>
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	66 0f       	add	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	88 1f       	adc	r24, r24
     ee8:	da f7       	brpl	.-10     	; 0xee0 <fmod+0x22>
     eea:	95 2f       	mov	r25, r21
     eec:	55 27       	eor	r21, r21
     eee:	44 23       	and	r20, r20
     ef0:	32 f0       	brmi	.+12     	; 0xefe <fmod+0x40>
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	50 40       	sbci	r21, 0x00	; 0
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	44 1f       	adc	r20, r20
     efc:	d2 f7       	brpl	.-12     	; 0xef2 <fmod+0x34>
     efe:	bb 27       	eor	r27, r27
     f00:	e9 1b       	sub	r30, r25
     f02:	f5 0b       	sbc	r31, r21
     f04:	62 1b       	sub	r22, r18
     f06:	73 0b       	sbc	r23, r19
     f08:	84 0b       	sbc	r24, r20
     f0a:	b1 09       	sbc	r27, r1
     f0c:	b1 f2       	breq	.-84     	; 0xeba <__floatsisf+0x88>
     f0e:	22 f4       	brpl	.+8      	; 0xf18 <fmod+0x5a>
     f10:	62 0f       	add	r22, r18
     f12:	73 1f       	adc	r23, r19
     f14:	84 1f       	adc	r24, r20
     f16:	b1 1d       	adc	r27, r1
     f18:	31 97       	sbiw	r30, 0x01	; 1
     f1a:	2a f0       	brmi	.+10     	; 0xf26 <fmod+0x68>
     f1c:	66 0f       	add	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	bb 1f       	adc	r27, r27
     f24:	ef cf       	rjmp	.-34     	; 0xf04 <fmod+0x46>
     f26:	91 50       	subi	r25, 0x01	; 1
     f28:	50 40       	sbci	r21, 0x00	; 0
     f2a:	62 f0       	brmi	.+24     	; 0xf44 <fmod+0x86>
     f2c:	41 f0       	breq	.+16     	; 0xf3e <fmod+0x80>
     f2e:	88 23       	and	r24, r24
     f30:	32 f0       	brmi	.+12     	; 0xf3e <fmod+0x80>
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	88 1f       	adc	r24, r24
     f38:	91 50       	subi	r25, 0x01	; 1
     f3a:	50 40       	sbci	r21, 0x00	; 0
     f3c:	c1 f7       	brne	.-16     	; 0xf2e <fmod+0x70>
     f3e:	93 95       	inc	r25
     f40:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_mpack>
     f44:	86 95       	lsr	r24
     f46:	77 95       	ror	r23
     f48:	67 95       	ror	r22
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	d9 f7       	brne	.-10     	; 0xf44 <fmod+0x86>
     f4e:	f7 cf       	rjmp	.-18     	; 0xf3e <fmod+0x80>

00000f50 <__fp_inf>:
     f50:	97 f9       	bld	r25, 7
     f52:	9f 67       	ori	r25, 0x7F	; 127
     f54:	80 e8       	ldi	r24, 0x80	; 128
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	08 95       	ret

00000f5c <__fp_mpack>:
     f5c:	9f 3f       	cpi	r25, 0xFF	; 255
     f5e:	31 f0       	breq	.+12     	; 0xf6c <__fp_mpack_finite+0xc>

00000f60 <__fp_mpack_finite>:
     f60:	91 50       	subi	r25, 0x01	; 1
     f62:	20 f4       	brcc	.+8      	; 0xf6c <__fp_mpack_finite+0xc>
     f64:	87 95       	ror	r24
     f66:	77 95       	ror	r23
     f68:	67 95       	ror	r22
     f6a:	b7 95       	ror	r27
     f6c:	88 0f       	add	r24, r24
     f6e:	91 1d       	adc	r25, r1
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <__fp_nan>:
     f78:	9f ef       	ldi	r25, 0xFF	; 255
     f7a:	80 ec       	ldi	r24, 0xC0	; 192
     f7c:	08 95       	ret

00000f7e <__fp_pscA>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	18 06       	cpc	r1, r24
     f88:	09 06       	cpc	r0, r25
     f8a:	08 95       	ret

00000f8c <__fp_pscB>:
     f8c:	00 24       	eor	r0, r0
     f8e:	0a 94       	dec	r0
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	14 06       	cpc	r1, r20
     f96:	05 06       	cpc	r0, r21
     f98:	08 95       	ret

00000f9a <__fp_round>:
     f9a:	09 2e       	mov	r0, r25
     f9c:	03 94       	inc	r0
     f9e:	00 0c       	add	r0, r0
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <__fp_round+0xc>
     fa2:	88 23       	and	r24, r24
     fa4:	52 f0       	brmi	.+20     	; 0xfba <__fp_round+0x20>
     fa6:	bb 0f       	add	r27, r27
     fa8:	40 f4       	brcc	.+16     	; 0xfba <__fp_round+0x20>
     faa:	bf 2b       	or	r27, r31
     fac:	11 f4       	brne	.+4      	; 0xfb2 <__fp_round+0x18>
     fae:	60 ff       	sbrs	r22, 0
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <__fp_round+0x20>
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	08 95       	ret

00000fbc <__fp_split3>:
     fbc:	57 fd       	sbrc	r21, 7
     fbe:	90 58       	subi	r25, 0x80	; 128
     fc0:	44 0f       	add	r20, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	59 f0       	breq	.+22     	; 0xfdc <__fp_splitA+0x10>
     fc6:	5f 3f       	cpi	r21, 0xFF	; 255
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <__fp_splitA+0x1a>
     fca:	47 95       	ror	r20

00000fcc <__fp_splitA>:
     fcc:	88 0f       	add	r24, r24
     fce:	97 fb       	bst	r25, 7
     fd0:	99 1f       	adc	r25, r25
     fd2:	61 f0       	breq	.+24     	; 0xfec <__fp_splitA+0x20>
     fd4:	9f 3f       	cpi	r25, 0xFF	; 255
     fd6:	79 f0       	breq	.+30     	; 0xff6 <__fp_splitA+0x2a>
     fd8:	87 95       	ror	r24
     fda:	08 95       	ret
     fdc:	12 16       	cp	r1, r18
     fde:	13 06       	cpc	r1, r19
     fe0:	14 06       	cpc	r1, r20
     fe2:	55 1f       	adc	r21, r21
     fe4:	f2 cf       	rjmp	.-28     	; 0xfca <__fp_split3+0xe>
     fe6:	46 95       	lsr	r20
     fe8:	f1 df       	rcall	.-30     	; 0xfcc <__fp_splitA>
     fea:	08 c0       	rjmp	.+16     	; 0xffc <__fp_splitA+0x30>
     fec:	16 16       	cp	r1, r22
     fee:	17 06       	cpc	r1, r23
     ff0:	18 06       	cpc	r1, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	f1 cf       	rjmp	.-30     	; 0xfd8 <__fp_splitA+0xc>
     ff6:	86 95       	lsr	r24
     ff8:	71 05       	cpc	r23, r1
     ffa:	61 05       	cpc	r22, r1
     ffc:	08 94       	sec
     ffe:	08 95       	ret

00001000 <__fp_zero>:
    1000:	e8 94       	clt

00001002 <__fp_szero>:
    1002:	bb 27       	eor	r27, r27
    1004:	66 27       	eor	r22, r22
    1006:	77 27       	eor	r23, r23
    1008:	cb 01       	movw	r24, r22
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret

0000100e <__mulsf3>:
    100e:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3x>
    1012:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>
    1016:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscA>
    101a:	38 f0       	brcs	.+14     	; 0x102a <__mulsf3+0x1c>
    101c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_pscB>
    1020:	20 f0       	brcs	.+8      	; 0x102a <__mulsf3+0x1c>
    1022:	95 23       	and	r25, r21
    1024:	11 f0       	breq	.+4      	; 0x102a <__mulsf3+0x1c>
    1026:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>
    102a:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>
    102e:	11 24       	eor	r1, r1
    1030:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>

00001034 <__mulsf3x>:
    1034:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_split3>
    1038:	70 f3       	brcs	.-36     	; 0x1016 <__mulsf3+0x8>

0000103a <__mulsf3_pse>:
    103a:	95 9f       	mul	r25, r21
    103c:	c1 f3       	breq	.-16     	; 0x102e <__mulsf3+0x20>
    103e:	95 0f       	add	r25, r21
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	55 1f       	adc	r21, r21
    1044:	62 9f       	mul	r22, r18
    1046:	f0 01       	movw	r30, r0
    1048:	72 9f       	mul	r23, r18
    104a:	bb 27       	eor	r27, r27
    104c:	f0 0d       	add	r31, r0
    104e:	b1 1d       	adc	r27, r1
    1050:	63 9f       	mul	r22, r19
    1052:	aa 27       	eor	r26, r26
    1054:	f0 0d       	add	r31, r0
    1056:	b1 1d       	adc	r27, r1
    1058:	aa 1f       	adc	r26, r26
    105a:	64 9f       	mul	r22, r20
    105c:	66 27       	eor	r22, r22
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	66 1f       	adc	r22, r22
    1064:	82 9f       	mul	r24, r18
    1066:	22 27       	eor	r18, r18
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	62 1f       	adc	r22, r18
    106e:	73 9f       	mul	r23, r19
    1070:	b0 0d       	add	r27, r0
    1072:	a1 1d       	adc	r26, r1
    1074:	62 1f       	adc	r22, r18
    1076:	83 9f       	mul	r24, r19
    1078:	a0 0d       	add	r26, r0
    107a:	61 1d       	adc	r22, r1
    107c:	22 1f       	adc	r18, r18
    107e:	74 9f       	mul	r23, r20
    1080:	33 27       	eor	r19, r19
    1082:	a0 0d       	add	r26, r0
    1084:	61 1d       	adc	r22, r1
    1086:	23 1f       	adc	r18, r19
    1088:	84 9f       	mul	r24, r20
    108a:	60 0d       	add	r22, r0
    108c:	21 1d       	adc	r18, r1
    108e:	82 2f       	mov	r24, r18
    1090:	76 2f       	mov	r23, r22
    1092:	6a 2f       	mov	r22, r26
    1094:	11 24       	eor	r1, r1
    1096:	9f 57       	subi	r25, 0x7F	; 127
    1098:	50 40       	sbci	r21, 0x00	; 0
    109a:	9a f0       	brmi	.+38     	; 0x10c2 <__mulsf3_pse+0x88>
    109c:	f1 f0       	breq	.+60     	; 0x10da <__mulsf3_pse+0xa0>
    109e:	88 23       	and	r24, r24
    10a0:	4a f0       	brmi	.+18     	; 0x10b4 <__mulsf3_pse+0x7a>
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	bb 1f       	adc	r27, r27
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	a9 f7       	brne	.-22     	; 0x109e <__mulsf3_pse+0x64>
    10b4:	9e 3f       	cpi	r25, 0xFE	; 254
    10b6:	51 05       	cpc	r21, r1
    10b8:	80 f0       	brcs	.+32     	; 0x10da <__mulsf3_pse+0xa0>
    10ba:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>
    10be:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
    10c2:	5f 3f       	cpi	r21, 0xFF	; 255
    10c4:	e4 f3       	brlt	.-8      	; 0x10be <__mulsf3_pse+0x84>
    10c6:	98 3e       	cpi	r25, 0xE8	; 232
    10c8:	d4 f3       	brlt	.-12     	; 0x10be <__mulsf3_pse+0x84>
    10ca:	86 95       	lsr	r24
    10cc:	77 95       	ror	r23
    10ce:	67 95       	ror	r22
    10d0:	b7 95       	ror	r27
    10d2:	f7 95       	ror	r31
    10d4:	e7 95       	ror	r30
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c1 f7       	brne	.-16     	; 0x10ca <__mulsf3_pse+0x90>
    10da:	fe 2b       	or	r31, r30
    10dc:	88 0f       	add	r24, r24
    10de:	91 1d       	adc	r25, r1
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	97 f9       	bld	r25, 7
    10e6:	08 95       	ret

000010e8 <pow>:
    10e8:	fa 01       	movw	r30, r20
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	30 96       	adiw	r30, 0x00	; 0
    10f0:	21 05       	cpc	r18, r1
    10f2:	31 05       	cpc	r19, r1
    10f4:	a1 f1       	breq	.+104    	; 0x115e <pow+0x76>
    10f6:	61 15       	cp	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	61 f4       	brne	.+24     	; 0x1114 <pow+0x2c>
    10fc:	80 38       	cpi	r24, 0x80	; 128
    10fe:	bf e3       	ldi	r27, 0x3F	; 63
    1100:	9b 07       	cpc	r25, r27
    1102:	49 f1       	breq	.+82     	; 0x1156 <pow+0x6e>
    1104:	68 94       	set
    1106:	90 38       	cpi	r25, 0x80	; 128
    1108:	81 05       	cpc	r24, r1
    110a:	61 f0       	breq	.+24     	; 0x1124 <pow+0x3c>
    110c:	80 38       	cpi	r24, 0x80	; 128
    110e:	bf ef       	ldi	r27, 0xFF	; 255
    1110:	9b 07       	cpc	r25, r27
    1112:	41 f0       	breq	.+16     	; 0x1124 <pow+0x3c>
    1114:	99 23       	and	r25, r25
    1116:	4a f5       	brpl	.+82     	; 0x116a <pow+0x82>
    1118:	ff 3f       	cpi	r31, 0xFF	; 255
    111a:	e1 05       	cpc	r30, r1
    111c:	31 05       	cpc	r19, r1
    111e:	21 05       	cpc	r18, r1
    1120:	19 f1       	breq	.+70     	; 0x1168 <pow+0x80>
    1122:	e8 94       	clt
    1124:	08 94       	sec
    1126:	e7 95       	ror	r30
    1128:	d9 01       	movw	r26, r18
    112a:	aa 23       	and	r26, r26
    112c:	29 f4       	brne	.+10     	; 0x1138 <pow+0x50>
    112e:	ab 2f       	mov	r26, r27
    1130:	be 2f       	mov	r27, r30
    1132:	f8 5f       	subi	r31, 0xF8	; 248
    1134:	d0 f3       	brcs	.-12     	; 0x112a <pow+0x42>
    1136:	10 c0       	rjmp	.+32     	; 0x1158 <pow+0x70>
    1138:	ff 5f       	subi	r31, 0xFF	; 255
    113a:	70 f4       	brcc	.+28     	; 0x1158 <pow+0x70>
    113c:	a6 95       	lsr	r26
    113e:	e0 f7       	brcc	.-8      	; 0x1138 <pow+0x50>
    1140:	f7 39       	cpi	r31, 0x97	; 151
    1142:	50 f0       	brcs	.+20     	; 0x1158 <pow+0x70>
    1144:	19 f0       	breq	.+6      	; 0x114c <pow+0x64>
    1146:	ff 3a       	cpi	r31, 0xAF	; 175
    1148:	38 f4       	brcc	.+14     	; 0x1158 <pow+0x70>
    114a:	9f 77       	andi	r25, 0x7F	; 127
    114c:	9f 93       	push	r25
    114e:	0d d0       	rcall	.+26     	; 0x116a <pow+0x82>
    1150:	0f 90       	pop	r0
    1152:	07 fc       	sbrc	r0, 7
    1154:	90 58       	subi	r25, 0x80	; 128
    1156:	08 95       	ret
    1158:	46 f0       	brts	.+16     	; 0x116a <pow+0x82>
    115a:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 e8       	ldi	r24, 0x80	; 128
    1164:	9f e3       	ldi	r25, 0x3F	; 63
    1166:	08 95       	ret
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	9f 77       	andi	r25, 0x7F	; 127
    116c:	5f 93       	push	r21
    116e:	4f 93       	push	r20
    1170:	3f 93       	push	r19
    1172:	2f 93       	push	r18
    1174:	0e 94 b6 09 	call	0x136c	; 0x136c <log>
    1178:	2f 91       	pop	r18
    117a:	3f 91       	pop	r19
    117c:	4f 91       	pop	r20
    117e:	5f 91       	pop	r21
    1180:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
    1184:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <exp>

00001188 <sin>:
    1188:	9f 93       	push	r25
    118a:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_rempio2>
    118e:	0f 90       	pop	r0
    1190:	07 fc       	sbrc	r0, 7
    1192:	ee 5f       	subi	r30, 0xFE	; 254
    1194:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_sinus>
    1198:	29 f4       	brne	.+10     	; 0x11a4 <sin+0x1c>
    119a:	16 f0       	brts	.+4      	; 0x11a0 <sin+0x18>
    119c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>
    11a0:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_zero>
    11a4:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>

000011a8 <exp>:
    11a8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
    11ac:	a8 f3       	brcs	.-22     	; 0x1198 <sin+0x10>
    11ae:	96 38       	cpi	r25, 0x86	; 134
    11b0:	a0 f7       	brcc	.-24     	; 0x119a <sin+0x12>
    11b2:	07 f8       	bld	r0, 7
    11b4:	0f 92       	push	r0
    11b6:	e8 94       	clt
    11b8:	2b e3       	ldi	r18, 0x3B	; 59
    11ba:	3a ea       	ldi	r19, 0xAA	; 170
    11bc:	48 eb       	ldi	r20, 0xB8	; 184
    11be:	5f e7       	ldi	r21, 0x7F	; 127
    11c0:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3_pse>
    11c4:	0f 92       	push	r0
    11c6:	0f 92       	push	r0
    11c8:	0f 92       	push	r0
    11ca:	4d b7       	in	r20, 0x3d	; 61
    11cc:	5e b7       	in	r21, 0x3e	; 62
    11ce:	0f 92       	push	r0
    11d0:	0e 94 fe 09 	call	0x13fc	; 0x13fc <modf>
    11d4:	e8 e6       	ldi	r30, 0x68	; 104
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_powser>
    11dc:	4f 91       	pop	r20
    11de:	5f 91       	pop	r21
    11e0:	ef 91       	pop	r30
    11e2:	ff 91       	pop	r31
    11e4:	e5 95       	asr	r30
    11e6:	ee 1f       	adc	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	49 f0       	breq	.+18     	; 0x11fe <exp+0x56>
    11ec:	fe 57       	subi	r31, 0x7E	; 126
    11ee:	e0 68       	ori	r30, 0x80	; 128
    11f0:	44 27       	eor	r20, r20
    11f2:	ee 0f       	add	r30, r30
    11f4:	44 1f       	adc	r20, r20
    11f6:	fa 95       	dec	r31
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <exp+0x4a>
    11fa:	41 95       	neg	r20
    11fc:	55 0b       	sbc	r21, r21
    11fe:	0e 94 78 09 	call	0x12f0	; 0x12f0 <ldexp>
    1202:	0f 90       	pop	r0
    1204:	07 fe       	sbrs	r0, 7
    1206:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <inverse>
    120a:	08 95       	ret

0000120c <__fp_powser>:
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	1f 93       	push	r17
    1212:	0f 93       	push	r16
    1214:	ff 92       	push	r15
    1216:	ef 92       	push	r14
    1218:	df 92       	push	r13
    121a:	7b 01       	movw	r14, r22
    121c:	8c 01       	movw	r16, r24
    121e:	68 94       	set
    1220:	06 c0       	rjmp	.+12     	; 0x122e <__fp_powser+0x22>
    1222:	da 2e       	mov	r13, r26
    1224:	ef 01       	movw	r28, r30
    1226:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3x>
    122a:	fe 01       	movw	r30, r28
    122c:	e8 94       	clt
    122e:	a5 91       	lpm	r26, Z+
    1230:	25 91       	lpm	r18, Z+
    1232:	35 91       	lpm	r19, Z+
    1234:	45 91       	lpm	r20, Z+
    1236:	55 91       	lpm	r21, Z+
    1238:	a6 f3       	brts	.-24     	; 0x1222 <__fp_powser+0x16>
    123a:	ef 01       	movw	r28, r30
    123c:	0e 94 1a 06 	call	0xc34	; 0xc34 <__addsf3x>
    1240:	fe 01       	movw	r30, r28
    1242:	97 01       	movw	r18, r14
    1244:	a8 01       	movw	r20, r16
    1246:	da 94       	dec	r13
    1248:	69 f7       	brne	.-38     	; 0x1224 <__fp_powser+0x18>
    124a:	df 90       	pop	r13
    124c:	ef 90       	pop	r14
    124e:	ff 90       	pop	r15
    1250:	0f 91       	pop	r16
    1252:	1f 91       	pop	r17
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret
    125a:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>

0000125e <__fp_rempio2>:
    125e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
    1262:	d8 f3       	brcs	.-10     	; 0x125a <__fp_powser+0x4e>
    1264:	e8 94       	clt
    1266:	e0 e0       	ldi	r30, 0x00	; 0
    1268:	bb 27       	eor	r27, r27
    126a:	9f 57       	subi	r25, 0x7F	; 127
    126c:	f0 f0       	brcs	.+60     	; 0x12aa <__fp_rempio2+0x4c>
    126e:	2a ed       	ldi	r18, 0xDA	; 218
    1270:	3f e0       	ldi	r19, 0x0F	; 15
    1272:	49 ec       	ldi	r20, 0xC9	; 201
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <__fp_rempio2+0x24>
    1276:	ee 0f       	add	r30, r30
    1278:	bb 0f       	add	r27, r27
    127a:	66 1f       	adc	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	28 f0       	brcs	.+10     	; 0x128c <__fp_rempio2+0x2e>
    1282:	b2 3a       	cpi	r27, 0xA2	; 162
    1284:	62 07       	cpc	r22, r18
    1286:	73 07       	cpc	r23, r19
    1288:	84 07       	cpc	r24, r20
    128a:	28 f0       	brcs	.+10     	; 0x1296 <__fp_rempio2+0x38>
    128c:	b2 5a       	subi	r27, 0xA2	; 162
    128e:	62 0b       	sbc	r22, r18
    1290:	73 0b       	sbc	r23, r19
    1292:	84 0b       	sbc	r24, r20
    1294:	e3 95       	inc	r30
    1296:	9a 95       	dec	r25
    1298:	72 f7       	brpl	.-36     	; 0x1276 <__fp_rempio2+0x18>
    129a:	80 38       	cpi	r24, 0x80	; 128
    129c:	30 f4       	brcc	.+12     	; 0x12aa <__fp_rempio2+0x4c>
    129e:	9a 95       	dec	r25
    12a0:	bb 0f       	add	r27, r27
    12a2:	66 1f       	adc	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	88 1f       	adc	r24, r24
    12a8:	d2 f7       	brpl	.-12     	; 0x129e <__fp_rempio2+0x40>
    12aa:	90 48       	sbci	r25, 0x80	; 128
    12ac:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_mpack_finite>

000012b0 <__fp_sinus>:
    12b0:	ef 93       	push	r30
    12b2:	e0 ff       	sbrs	r30, 0
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <__fp_sinus+0x14>
    12b6:	a2 ea       	ldi	r26, 0xA2	; 162
    12b8:	2a ed       	ldi	r18, 0xDA	; 218
    12ba:	3f e0       	ldi	r19, 0x0F	; 15
    12bc:	49 ec       	ldi	r20, 0xC9	; 201
    12be:	5f eb       	ldi	r21, 0xBF	; 191
    12c0:	0e 94 1a 06 	call	0xc34	; 0xc34 <__addsf3x>
    12c4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_round>
    12c8:	0f 90       	pop	r0
    12ca:	03 94       	inc	r0
    12cc:	01 fc       	sbrc	r0, 1
    12ce:	90 58       	subi	r25, 0x80	; 128
    12d0:	e0 e9       	ldi	r30, 0x90	; 144
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_powsodd>

000012d8 <inverse>:
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	9f e3       	ldi	r25, 0x3F	; 63
    12e4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__divsf3>
    12e8:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>
    12ec:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_mpack>

000012f0 <ldexp>:
    12f0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
    12f4:	d8 f3       	brcs	.-10     	; 0x12ec <inverse+0x14>
    12f6:	99 23       	and	r25, r25
    12f8:	c9 f3       	breq	.-14     	; 0x12ec <inverse+0x14>
    12fa:	94 0f       	add	r25, r20
    12fc:	51 1d       	adc	r21, r1
    12fe:	a3 f3       	brvs	.-24     	; 0x12e8 <inverse+0x10>
    1300:	91 50       	subi	r25, 0x01	; 1
    1302:	50 40       	sbci	r21, 0x00	; 0
    1304:	94 f0       	brlt	.+36     	; 0x132a <ldexp+0x3a>
    1306:	59 f0       	breq	.+22     	; 0x131e <ldexp+0x2e>
    1308:	88 23       	and	r24, r24
    130a:	32 f0       	brmi	.+12     	; 0x1318 <ldexp+0x28>
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	91 50       	subi	r25, 0x01	; 1
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	c1 f7       	brne	.-16     	; 0x1308 <ldexp+0x18>
    1318:	9e 3f       	cpi	r25, 0xFE	; 254
    131a:	51 05       	cpc	r21, r1
    131c:	2c f7       	brge	.-54     	; 0x12e8 <inverse+0x10>
    131e:	88 0f       	add	r24, r24
    1320:	91 1d       	adc	r25, r1
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret
    132a:	5f 3f       	cpi	r21, 0xFF	; 255
    132c:	ac f0       	brlt	.+42     	; 0x1358 <ldexp+0x68>
    132e:	98 3e       	cpi	r25, 0xE8	; 232
    1330:	9c f0       	brlt	.+38     	; 0x1358 <ldexp+0x68>
    1332:	bb 27       	eor	r27, r27
    1334:	86 95       	lsr	r24
    1336:	77 95       	ror	r23
    1338:	67 95       	ror	r22
    133a:	b7 95       	ror	r27
    133c:	08 f4       	brcc	.+2      	; 0x1340 <ldexp+0x50>
    133e:	b1 60       	ori	r27, 0x01	; 1
    1340:	93 95       	inc	r25
    1342:	c1 f7       	brne	.-16     	; 0x1334 <ldexp+0x44>
    1344:	bb 0f       	add	r27, r27
    1346:	58 f7       	brcc	.-42     	; 0x131e <ldexp+0x2e>
    1348:	11 f4       	brne	.+4      	; 0x134e <ldexp+0x5e>
    134a:	60 ff       	sbrs	r22, 0
    134c:	e8 cf       	rjmp	.-48     	; 0x131e <ldexp+0x2e>
    134e:	6f 5f       	subi	r22, 0xFF	; 255
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	e3 cf       	rjmp	.-58     	; 0x131e <ldexp+0x2e>
    1358:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_szero>
    135c:	16 f0       	brts	.+4      	; 0x1362 <ldexp+0x72>
    135e:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_mpack>
    1362:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_nan>
    1366:	68 94       	set
    1368:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_inf>

0000136c <log>:
    136c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_splitA>
    1370:	a8 f3       	brcs	.-22     	; 0x135c <ldexp+0x6c>
    1372:	99 23       	and	r25, r25
    1374:	c1 f3       	breq	.-16     	; 0x1366 <ldexp+0x76>
    1376:	ae f3       	brts	.-22     	; 0x1362 <ldexp+0x72>
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	1f 93       	push	r17
    137e:	0f 93       	push	r16
    1380:	ff 92       	push	r15
    1382:	c9 2f       	mov	r28, r25
    1384:	dd 27       	eor	r29, r29
    1386:	88 23       	and	r24, r24
    1388:	2a f0       	brmi	.+10     	; 0x1394 <log+0x28>
    138a:	21 97       	sbiw	r28, 0x01	; 1
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	da f7       	brpl	.-10     	; 0x138a <log+0x1e>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f eb       	ldi	r21, 0xBF	; 191
    139c:	9f e3       	ldi	r25, 0x3F	; 63
    139e:	88 39       	cpi	r24, 0x98	; 152
    13a0:	20 f0       	brcs	.+8      	; 0x13aa <log+0x3e>
    13a2:	80 3e       	cpi	r24, 0xE0	; 224
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <log+0x48>
    13a6:	21 96       	adiw	r28, 0x01	; 1
    13a8:	8f 77       	andi	r24, 0x7F	; 127
    13aa:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
    13ae:	ee ea       	ldi	r30, 0xAE	; 174
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <log+0x50>
    13b4:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
    13b8:	eb ed       	ldi	r30, 0xDB	; 219
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_powser>
    13c0:	8b 01       	movw	r16, r22
    13c2:	be 01       	movw	r22, r28
    13c4:	ec 01       	movw	r28, r24
    13c6:	fb 2e       	mov	r15, r27
    13c8:	6f 57       	subi	r22, 0x7F	; 127
    13ca:	71 09       	sbc	r23, r1
    13cc:	75 95       	asr	r23
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 0b       	sbc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	0e 94 19 07 	call	0xe32	; 0xe32 <__floatsisf>
    13d8:	28 e1       	ldi	r18, 0x18	; 24
    13da:	32 e7       	ldi	r19, 0x72	; 114
    13dc:	41 e3       	ldi	r20, 0x31	; 49
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3x>
    13e4:	af 2d       	mov	r26, r15
    13e6:	98 01       	movw	r18, r16
    13e8:	ae 01       	movw	r20, r28
    13ea:	ff 90       	pop	r15
    13ec:	0f 91       	pop	r16
    13ee:	1f 91       	pop	r17
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	0e 94 1a 06 	call	0xc34	; 0xc34 <__addsf3x>
    13f8:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_round>

000013fc <modf>:
    13fc:	fa 01       	movw	r30, r20
    13fe:	dc 01       	movw	r26, r24
    1400:	aa 0f       	add	r26, r26
    1402:	bb 1f       	adc	r27, r27
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	bf 57       	subi	r27, 0x7F	; 127
    140a:	28 f4       	brcc	.+10     	; 0x1416 <modf+0x1a>
    140c:	22 27       	eor	r18, r18
    140e:	33 27       	eor	r19, r19
    1410:	44 27       	eor	r20, r20
    1412:	50 78       	andi	r21, 0x80	; 128
    1414:	20 c0       	rjmp	.+64     	; 0x1456 <modf+0x5a>
    1416:	b7 51       	subi	r27, 0x17	; 23
    1418:	90 f4       	brcc	.+36     	; 0x143e <modf+0x42>
    141a:	ab 2f       	mov	r26, r27
    141c:	00 24       	eor	r0, r0
    141e:	46 95       	lsr	r20
    1420:	37 95       	ror	r19
    1422:	27 95       	ror	r18
    1424:	01 1c       	adc	r0, r1
    1426:	a3 95       	inc	r26
    1428:	d2 f3       	brmi	.-12     	; 0x141e <modf+0x22>
    142a:	00 20       	and	r0, r0
    142c:	71 f0       	breq	.+28     	; 0x144a <modf+0x4e>
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	44 1f       	adc	r20, r20
    1434:	b3 95       	inc	r27
    1436:	da f3       	brmi	.-10     	; 0x142e <modf+0x32>
    1438:	0e d0       	rcall	.+28     	; 0x1456 <modf+0x5a>
    143a:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__subsf3>
    143e:	61 30       	cpi	r22, 0x01	; 1
    1440:	71 05       	cpc	r23, r1
    1442:	a0 e8       	ldi	r26, 0x80	; 128
    1444:	8a 07       	cpc	r24, r26
    1446:	b9 46       	sbci	r27, 0x69	; 105
    1448:	30 f4       	brcc	.+12     	; 0x1456 <modf+0x5a>
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	66 27       	eor	r22, r22
    1450:	77 27       	eor	r23, r23
    1452:	88 27       	eor	r24, r24
    1454:	90 78       	andi	r25, 0x80	; 128
    1456:	30 96       	adiw	r30, 0x00	; 0
    1458:	21 f0       	breq	.+8      	; 0x1462 <modf+0x66>
    145a:	20 83       	st	Z, r18
    145c:	31 83       	std	Z+1, r19	; 0x01
    145e:	42 83       	std	Z+2, r20	; 0x02
    1460:	53 83       	std	Z+3, r21	; 0x03
    1462:	08 95       	ret

00001464 <__fp_powsodd>:
    1464:	9f 93       	push	r25
    1466:	8f 93       	push	r24
    1468:	7f 93       	push	r23
    146a:	6f 93       	push	r22
    146c:	ff 93       	push	r31
    146e:	ef 93       	push	r30
    1470:	9b 01       	movw	r18, r22
    1472:	ac 01       	movw	r20, r24
    1474:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
    1478:	ef 91       	pop	r30
    147a:	ff 91       	pop	r31
    147c:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_powser>
    1480:	2f 91       	pop	r18
    1482:	3f 91       	pop	r19
    1484:	4f 91       	pop	r20
    1486:	5f 91       	pop	r21
    1488:	0c 94 07 08 	jmp	0x100e	; 0x100e <__mulsf3>

0000148c <__udivmodhi4>:
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	51 e1       	ldi	r21, 0x11	; 17
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <__udivmodhi4_ep>

00001494 <__udivmodhi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	a6 17       	cp	r26, r22
    149a:	b7 07       	cpc	r27, r23
    149c:	10 f0       	brcs	.+4      	; 0x14a2 <__udivmodhi4_ep>
    149e:	a6 1b       	sub	r26, r22
    14a0:	b7 0b       	sbc	r27, r23

000014a2 <__udivmodhi4_ep>:
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	5a 95       	dec	r21
    14a8:	a9 f7       	brne	.-22     	; 0x1494 <__udivmodhi4_loop>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	08 95       	ret

000014b4 <__itoa_ncheck>:
    14b4:	bb 27       	eor	r27, r27
    14b6:	4a 30       	cpi	r20, 0x0A	; 10
    14b8:	31 f4       	brne	.+12     	; 0x14c6 <__itoa_ncheck+0x12>
    14ba:	99 23       	and	r25, r25
    14bc:	22 f4       	brpl	.+8      	; 0x14c6 <__itoa_ncheck+0x12>
    14be:	bd e2       	ldi	r27, 0x2D	; 45
    14c0:	90 95       	com	r25
    14c2:	81 95       	neg	r24
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__utoa_common>

000014ca <__utoa_ncheck>:
    14ca:	bb 27       	eor	r27, r27

000014cc <__utoa_common>:
    14cc:	fb 01       	movw	r30, r22
    14ce:	55 27       	eor	r21, r21
    14d0:	aa 27       	eor	r26, r26
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	aa 1f       	adc	r26, r26
    14d8:	a4 17       	cp	r26, r20
    14da:	10 f0       	brcs	.+4      	; 0x14e0 <__utoa_common+0x14>
    14dc:	a4 1b       	sub	r26, r20
    14de:	83 95       	inc	r24
    14e0:	50 51       	subi	r21, 0x10	; 16
    14e2:	b9 f7       	brne	.-18     	; 0x14d2 <__utoa_common+0x6>
    14e4:	a0 5d       	subi	r26, 0xD0	; 208
    14e6:	aa 33       	cpi	r26, 0x3A	; 58
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <__utoa_common+0x20>
    14ea:	a9 5d       	subi	r26, 0xD9	; 217
    14ec:	a1 93       	st	Z+, r26
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	79 f7       	brne	.-34     	; 0x14d0 <__utoa_common+0x4>
    14f2:	b1 11       	cpse	r27, r1
    14f4:	b1 93       	st	Z+, r27
    14f6:	11 92       	st	Z+, r1
    14f8:	cb 01       	movw	r24, r22
    14fa:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <strrev>

000014fe <strrev>:
    14fe:	dc 01       	movw	r26, r24
    1500:	fc 01       	movw	r30, r24
    1502:	67 2f       	mov	r22, r23
    1504:	71 91       	ld	r23, Z+
    1506:	77 23       	and	r23, r23
    1508:	e1 f7       	brne	.-8      	; 0x1502 <strrev+0x4>
    150a:	32 97       	sbiw	r30, 0x02	; 2
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <strrev+0x18>
    150e:	7c 91       	ld	r23, X
    1510:	6d 93       	st	X+, r22
    1512:	70 83       	st	Z, r23
    1514:	62 91       	ld	r22, -Z
    1516:	ae 17       	cp	r26, r30
    1518:	bf 07       	cpc	r27, r31
    151a:	c8 f3       	brcs	.-14     	; 0x150e <strrev+0x10>
    151c:	08 95       	ret

0000151e <_exit>:
    151e:	f8 94       	cli

00001520 <__stop_program>:
    1520:	ff cf       	rjmp	.-2      	; 0x1520 <__stop_program>
