
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000012f8  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  0080014c  0080014c  000013d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc0  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0e  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da2  00000000  00000000  00003f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000651  00000000  00000000  00005118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4e  00000000  00000000  00005769  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000065b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_13>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_18>
      4c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_21>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <__addsf3+0x1e>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240
      ae:	08 00       	.word	0x0008	; ????
      b0:	00 00       	nop
      b2:	be 92       	st	-X, r11
      b4:	24 49       	sbci	r18, 0x94	; 148
      b6:	12 3e       	cpi	r17, 0xE2	; 226
      b8:	ab aa       	std	Y+51, r10	; 0x33
      ba:	aa 2a       	or	r10, r26
      bc:	be cd       	rjmp	.-1156   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
      be:	cc cc       	rjmp	.-1640   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
      c0:	4c 3e       	cpi	r20, 0xEC	; 236
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	be ab       	std	Y+54, r27	; 0x36
      c8:	aa aa       	std	Y+50, r10	; 0x32
      ca:	aa 3e       	cpi	r26, 0xEA	; 234
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	00 08       	sbc	r0, r0
      dc:	41 78       	andi	r20, 0x81	; 129
      de:	d3 bb       	out	0x13, r29	; 19
      e0:	43 87       	std	Z+11, r20	; 0x0b
      e2:	d1 13       	cpse	r29, r17
      e4:	3d 19       	sub	r19, r13
      e6:	0e 3c       	cpi	r16, 0xCE	; 206
      e8:	c3 bd       	out	0x23, r28	; 35
      ea:	42 82       	std	Z+2, r4	; 0x02
      ec:	ad 2b       	or	r26, r29
      ee:	3e 68       	ori	r19, 0x8E	; 142
      f0:	ec 82       	std	Y+4, r14	; 0x04
      f2:	76 be       	out	0x36, r7	; 54
      f4:	d9 8f       	std	Y+25, r29	; 0x19
      f6:	e1 a9       	ldd	r30, Z+49	; 0x31
      f8:	3e 4c       	sbci	r19, 0xCE	; 206
      fa:	80 ef       	ldi	r24, 0xF0	; 240
      fc:	ff be       	out	0x3f, r15	; 63
      fe:	01 c4       	rjmp	.+2050   	; 0x902 <__stack+0x3>
     100:	ff 7f       	andi	r31, 0xFF	; 255
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
	...

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	e8 ef       	ldi	r30, 0xF8	; 248
     11c:	f2 e1       	ldi	r31, 0x12	; 18
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	ac 34       	cpi	r26, 0x4C	; 76
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	21 e0       	ldi	r18, 0x01	; 1
     12c:	ac e4       	ldi	r26, 0x4C	; 76
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	a3 39       	cpi	r26, 0x93	; 147
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
     13e:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
     146:	fc 01       	movw	r30, r24
     148:	40 81       	ld	r20, Z
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <GPIO_config_output+0xe>
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <GPIO_config_output+0xa>
     158:	24 2b       	or	r18, r20
     15a:	20 83       	st	Z, r18
     15c:	08 95       	ret

0000015e <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
     15e:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
     160:	90 81       	ld	r25, Z
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <GPIO_write_low+0xe>
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <GPIO_write_low+0xa>
     170:	20 95       	com	r18
     172:	29 23       	and	r18, r25
     174:	20 83       	st	Z, r18
     176:	08 95       	ret

00000178 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name | (1<<pin_num);
     178:	fc 01       	movw	r30, r24
     17a:	40 81       	ld	r20, Z
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_write_high+0xe>
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_write_high+0xa>
     18a:	24 2b       	or	r18, r20
     18c:	20 83       	st	Z, r18
     18e:	08 95       	ret

00000190 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     190:	29 9a       	sbi	0x05, 1	; 5
     192:	85 e0       	ldi	r24, 0x05	; 5
     194:	8a 95       	dec	r24
     196:	f1 f7       	brne	.-4      	; 0x194 <toggle_e+0x4>
     198:	00 00       	nop
     19a:	29 98       	cbi	0x05, 1	; 5
     19c:	08 95       	ret

0000019e <lcd_write>:
     19e:	cf 93       	push	r28
     1a0:	c8 2f       	mov	r28, r24
     1a2:	66 23       	and	r22, r22
     1a4:	11 f0       	breq	.+4      	; 0x1aa <lcd_write+0xc>
     1a6:	28 9a       	sbi	0x05, 0	; 5
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <lcd_write+0xe>
     1aa:	28 98       	cbi	0x05, 0	; 5
     1ac:	54 9a       	sbi	0x0a, 4	; 10
     1ae:	55 9a       	sbi	0x0a, 5	; 10
     1b0:	56 9a       	sbi	0x0a, 6	; 10
     1b2:	57 9a       	sbi	0x0a, 7	; 10
     1b4:	5f 98       	cbi	0x0b, 7	; 11
     1b6:	5e 98       	cbi	0x0b, 6	; 11
     1b8:	5d 98       	cbi	0x0b, 5	; 11
     1ba:	5c 98       	cbi	0x0b, 4	; 11
     1bc:	cc 23       	and	r28, r28
     1be:	0c f4       	brge	.+2      	; 0x1c2 <lcd_write+0x24>
     1c0:	5f 9a       	sbi	0x0b, 7	; 11
     1c2:	c6 fd       	sbrc	r28, 6
     1c4:	5e 9a       	sbi	0x0b, 6	; 11
     1c6:	c5 fd       	sbrc	r28, 5
     1c8:	5d 9a       	sbi	0x0b, 5	; 11
     1ca:	c4 fd       	sbrc	r28, 4
     1cc:	5c 9a       	sbi	0x0b, 4	; 11
     1ce:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     1d2:	5f 98       	cbi	0x0b, 7	; 11
     1d4:	5e 98       	cbi	0x0b, 6	; 11
     1d6:	5d 98       	cbi	0x0b, 5	; 11
     1d8:	5c 98       	cbi	0x0b, 4	; 11
     1da:	c3 fd       	sbrc	r28, 3
     1dc:	5f 9a       	sbi	0x0b, 7	; 11
     1de:	c2 fd       	sbrc	r28, 2
     1e0:	5e 9a       	sbi	0x0b, 6	; 11
     1e2:	c1 fd       	sbrc	r28, 1
     1e4:	5d 9a       	sbi	0x0b, 5	; 11
     1e6:	c0 fd       	sbrc	r28, 0
     1e8:	5c 9a       	sbi	0x0b, 4	; 11
     1ea:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     1ee:	5c 9a       	sbi	0x0b, 4	; 11
     1f0:	5d 9a       	sbi	0x0b, 5	; 11
     1f2:	5e 9a       	sbi	0x0b, 6	; 11
     1f4:	5f 9a       	sbi	0x0b, 7	; 11
     1f6:	87 eb       	ldi	r24, 0xB7	; 183
     1f8:	9b e0       	ldi	r25, 0x0B	; 11
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_write+0x5c>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_write+0x62>
     200:	00 00       	nop
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <lcd_command>:
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     20c:	08 95       	ret

0000020e <lcd_gotoxy>:
     20e:	61 11       	cpse	r22, r1
     210:	04 c0       	rjmp	.+8      	; 0x21a <lcd_gotoxy+0xc>
     212:	80 58       	subi	r24, 0x80	; 128
     214:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
     218:	08 95       	ret
     21a:	80 54       	subi	r24, 0x40	; 64
     21c:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
     220:	08 95       	ret

00000222 <lcd_clrscr>:
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
     228:	08 95       	ret

0000022a <lcd_putc>:
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     230:	08 95       	ret

00000232 <lcd_puts>:
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	21 96       	adiw	r28, 0x01	; 1
     23a:	fc 01       	movw	r30, r24
     23c:	80 81       	ld	r24, Z
     23e:	88 23       	and	r24, r24
     240:	29 f0       	breq	.+10     	; 0x24c <lcd_puts+0x1a>
     242:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
     246:	89 91       	ld	r24, Y+
     248:	81 11       	cpse	r24, r1
     24a:	fb cf       	rjmp	.-10     	; 0x242 <lcd_puts+0x10>
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     256:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     258:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     25a:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     25c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     25e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     260:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     262:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	99 ef       	ldi	r25, 0xF9	; 249
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x16>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x1c>
     26e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     270:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     272:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     274:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     278:	8f e1       	ldi	r24, 0x1F	; 31
     27a:	9e e4       	ldi	r25, 0x4E	; 78
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x2a>
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x30>
     282:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     284:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x3a>
     290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x40>
     292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     294:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x4a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x50>
     2a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     2a4:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     2a6:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x5c>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x62>
     2b4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     2b6:	88 e2       	ldi	r24, 0x28	; 40
     2b8:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     2c2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     2cc:	8c 2f       	mov	r24, r28
     2ce:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
}/* lcd_init */
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <fce>:
 * Main function where the program execution begins. Use Timer/Counter1
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */

unsigned int fce(unsigned int i ) {
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
	
	if(fceType==0) 
     2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f8:	81 11       	cpse	r24, r1
     2fa:	38 c0       	rjmp	.+112    	; 0x36c <fce+0x96>
		return (unsigned int)(255*(1 + sin(i * 6.28 * Tvz/T))/2);
     2fc:	be 01       	movw	r22, r28
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
     306:	23 ec       	ldi	r18, 0xC3	; 195
     308:	35 ef       	ldi	r19, 0xF5	; 245
     30a:	48 ec       	ldi	r20, 0xC8	; 200
     30c:	50 e4       	ldi	r21, 0x40	; 64
     30e:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     312:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     316:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     31a:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     31e:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     322:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     326:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <T>
     32a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <T+0x1>
     32e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <T+0x2>
     332:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <T+0x3>
     336:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divsf3>
     33a:	0e 94 af 07 	call	0xf5e	; 0xf5e <sin>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e8       	ldi	r20, 0x80	; 128
     344:	5f e3       	ldi	r21, 0x3F	; 63
     346:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3>
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	53 e4       	ldi	r21, 0x43	; 67
     352:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     362:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
     366:	26 2f       	mov	r18, r22
     368:	97 2f       	mov	r25, r23
     36a:	8e c0       	rjmp	.+284    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	else if(fceType==1)
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	51 f5       	brne	.+84     	; 0x3c4 <fce+0xee>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
     370:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     374:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     378:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     37c:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     380:	be 01       	movw	r22, r28
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
     38a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     38e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     392:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     396:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     39a:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     39e:	a7 01       	movw	r20, r14
     3a0:	96 01       	movw	r18, r12
     3a2:	0e 94 4a 06 	call	0xc94	; 0xc94 <fmod>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	4f e7       	ldi	r20, 0x7F	; 127
     3ac:	53 e4       	ldi	r21, 0x43	; 67
     3ae:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     3b2:	a7 01       	movw	r20, r14
     3b4:	96 01       	movw	r18, r12
     3b6:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divsf3>
     3ba:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
     3be:	26 2f       	mov	r18, r22
     3c0:	97 2f       	mov	r25, r23
     3c2:	62 c0       	rjmp	.+196    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	else if(fceType==2) {	
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	09 f0       	breq	.+2      	; 0x3ca <fce+0xf4>
     3c8:	5a c0       	rjmp	.+180    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		return (unsigned int)(255 * pow(-1,i/  ((int)(T/Tvz/2))) * 2 * fmod(i*Tvz,T)/T);
     3ca:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     3ce:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     3d2:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     3d6:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     3da:	80 90 01 01 	lds	r8, 0x0101	; 0x800101 <Tvz>
     3de:	90 90 02 01 	lds	r9, 0x0102	; 0x800102 <Tvz+0x1>
     3e2:	a0 90 03 01 	lds	r10, 0x0103	; 0x800103 <Tvz+0x2>
     3e6:	b0 90 04 01 	lds	r11, 0x0104	; 0x800104 <Tvz+0x3>
     3ea:	a5 01       	movw	r20, r10
     3ec:	94 01       	movw	r18, r8
     3ee:	c7 01       	movw	r24, r14
     3f0:	b6 01       	movw	r22, r12
     3f2:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divsf3>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	5f e3       	ldi	r21, 0x3F	; 63
     3fe:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     402:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fixsfsi>
     406:	ab 01       	movw	r20, r22
     408:	bc 01       	movw	r22, r24
     40a:	ce 01       	movw	r24, r28
     40c:	ba 01       	movw	r22, r20
     40e:	0e 94 31 09 	call	0x1262	; 0x1262 <__udivmodhi4>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
     41a:	9b 01       	movw	r18, r22
     41c:	ac 01       	movw	r20, r24
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	80 e8       	ldi	r24, 0x80	; 128
     424:	9f eb       	ldi	r25, 0xBF	; 191
     426:	0e 94 5f 07 	call	0xebe	; 0xebe <pow>
     42a:	2b 01       	movw	r4, r22
     42c:	3c 01       	movw	r6, r24
     42e:	be 01       	movw	r22, r28
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
     438:	a5 01       	movw	r20, r10
     43a:	94 01       	movw	r18, r8
     43c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     440:	a7 01       	movw	r20, r14
     442:	96 01       	movw	r18, r12
     444:	0e 94 4a 06 	call	0xc94	; 0xc94 <fmod>
     448:	4b 01       	movw	r8, r22
     44a:	5c 01       	movw	r10, r24
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	4f e7       	ldi	r20, 0x7F	; 127
     452:	53 e4       	ldi	r21, 0x43	; 67
     454:	c3 01       	movw	r24, r6
     456:	b2 01       	movw	r22, r4
     458:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3>
     464:	a5 01       	movw	r20, r10
     466:	94 01       	movw	r18, r8
     468:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     46c:	a7 01       	movw	r20, r14
     46e:	96 01       	movw	r18, r12
     470:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divsf3>
     474:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
     478:	26 2f       	mov	r18, r22
     47a:	97 2f       	mov	r25, r23
     47c:	05 c0       	rjmp	.+10     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	}
	else if(fceType==10)
     47e:	8a 30       	cpi	r24, 0x0A	; 10
     480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	return (uint8_t)(0);
}
     482:	03 c0       	rjmp	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
	else if(fceType==2) {	
		return (unsigned int)(255 * pow(-1,i/  ((int)(T/Tvz/2))) * 2 * fmod(i*Tvz,T)/T);
	}
	else if(fceType==10)
	return (uint8_t)(0);
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	82 2f       	mov	r24, r18
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	df 90       	pop	r13
     494:	cf 90       	pop	r12
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	9f 90       	pop	r9
     49c:	8f 90       	pop	r8
     49e:	7f 90       	pop	r7
     4a0:	6f 90       	pop	r6
     4a2:	5f 90       	pop	r5
     4a4:	4f 90       	pop	r4
     4a6:	08 95       	ret

000004a8 <setByte>:

unsigned setByte(unsigned int num) {
     4a8:	cf 93       	push	r28
     4aa:	c8 2f       	mov	r28, r24
	if (num & (0x01 << 0)) GPIO_write_high(&PORTD,PD3); else GPIO_write_low(&PORTD,PD3);
     4ac:	80 ff       	sbrs	r24, 0
     4ae:	07 c0       	rjmp	.+14     	; 0x4be <setByte+0x16>
     4b0:	63 e0       	ldi	r22, 0x03	; 3
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	8b e2       	ldi	r24, 0x2B	; 43
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <setByte+0x22>
     4be:	63 e0       	ldi	r22, 0x03	; 3
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8b e2       	ldi	r24, 0x2B	; 43
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 1)) GPIO_write_high(&PORTD,PD2); else GPIO_write_low(&PORTD,PD2);
     4ca:	c1 ff       	sbrs	r28, 1
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <setByte+0x34>
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	8b e2       	ldi	r24, 0x2B	; 43
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <setByte+0x40>
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	8b e2       	ldi	r24, 0x2B	; 43
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 2)) GPIO_write_high(&PORTD,PD1); else GPIO_write_low(&PORTD,PD1);
     4e8:	c2 ff       	sbrs	r28, 2
     4ea:	07 c0       	rjmp	.+14     	; 0x4fa <setByte+0x52>
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	8b e2       	ldi	r24, 0x2B	; 43
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <setByte+0x5e>
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	8b e2       	ldi	r24, 0x2B	; 43
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 3)) GPIO_write_high(&PORTD,PD0); else GPIO_write_low(&PORTD,PD0);
     506:	c3 ff       	sbrs	r28, 3
     508:	07 c0       	rjmp	.+14     	; 0x518 <setByte+0x70>
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	8b e2       	ldi	r24, 0x2B	; 43
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     516:	06 c0       	rjmp	.+12     	; 0x524 <setByte+0x7c>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	8b e2       	ldi	r24, 0x2B	; 43
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 4)) GPIO_write_high(&PORTC,PC6); else GPIO_write_low(&PORTC,PC6);
     524:	c4 ff       	sbrs	r28, 4
     526:	07 c0       	rjmp	.+14     	; 0x536 <setByte+0x8e>
     528:	66 e0       	ldi	r22, 0x06	; 6
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	88 e2       	ldi	r24, 0x28	; 40
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     534:	06 c0       	rjmp	.+12     	; 0x542 <setByte+0x9a>
     536:	66 e0       	ldi	r22, 0x06	; 6
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	88 e2       	ldi	r24, 0x28	; 40
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 5)) GPIO_write_high(&PORTC,PC5); else GPIO_write_low(&PORTC,PC5);
     542:	c5 ff       	sbrs	r28, 5
     544:	07 c0       	rjmp	.+14     	; 0x554 <setByte+0xac>
     546:	65 e0       	ldi	r22, 0x05	; 5
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	88 e2       	ldi	r24, 0x28	; 40
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     552:	06 c0       	rjmp	.+12     	; 0x560 <setByte+0xb8>
     554:	65 e0       	ldi	r22, 0x05	; 5
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	88 e2       	ldi	r24, 0x28	; 40
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 6)) GPIO_write_high(&PORTC,PC4); else GPIO_write_low(&PORTC,PC4);
     560:	c6 ff       	sbrs	r28, 6
     562:	07 c0       	rjmp	.+14     	; 0x572 <setByte+0xca>
     564:	64 e0       	ldi	r22, 0x04	; 4
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	88 e2       	ldi	r24, 0x28	; 40
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     570:	06 c0       	rjmp	.+12     	; 0x57e <setByte+0xd6>
     572:	64 e0       	ldi	r22, 0x04	; 4
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	88 e2       	ldi	r24, 0x28	; 40
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 7)) GPIO_write_high(&PORTC,PC3); else GPIO_write_low(&PORTC,PC3);		
     57e:	c7 ff       	sbrs	r28, 7
     580:	07 c0       	rjmp	.+14     	; 0x590 <setByte+0xe8>
     582:	63 e0       	ldi	r22, 0x03	; 3
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	88 e2       	ldi	r24, 0x28	; 40
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     58e:	06 c0       	rjmp	.+12     	; 0x59c <setByte+0xf4>
     590:	63 e0       	ldi	r22, 0x03	; 3
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	88 e2       	ldi	r24, 0x28	; 40
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
}
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <main>:

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     5a0:	8c e0       	ldi	r24, 0x0C	; 12
     5a2:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     5ae:	80 e1       	ldi	r24, 0x10	; 16
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
    lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     5be:	87 e1       	ldi	r24, 0x17	; 23
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	

		
   //config output 
	
	GPIO_config_output(&DDRD, PD0);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	8a e2       	ldi	r24, 0x2A	; 42
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD1);
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	8a e2       	ldi	r24, 0x2A	; 42
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD2);
     5de:	62 e0       	ldi	r22, 0x02	; 2
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8a e2       	ldi	r24, 0x2A	; 42
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD3);
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	8a e2       	ldi	r24, 0x2A	; 42
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC3);
     5f6:	63 e0       	ldi	r22, 0x03	; 3
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	87 e2       	ldi	r24, 0x27	; 39
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC4);
     602:	64 e0       	ldi	r22, 0x04	; 4
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	87 e2       	ldi	r24, 0x27	; 39
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC5);
     60e:	65 e0       	ldi	r22, 0x05	; 5
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	87 e2       	ldi	r24, 0x27	; 39
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC6);
     61a:	66 e0       	ldi	r22, 0x06	; 6
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	87 e2       	ldi	r24, 0x27	; 39
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
  
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_interrupt_enable();
     626:	ef e6       	ldi	r30, 0x6F	; 111
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	81 60       	ori	r24, 0x01	; 1
     62e:	80 83       	st	Z, r24
	TIM1_overflow_262ms();
     630:	e1 e8       	ldi	r30, 0x81	; 129
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	8b 7f       	andi	r24, 0xFB	; 251
     638:	80 83       	st	Z, r24
     63a:	80 81       	ld	r24, Z
     63c:	83 60       	ori	r24, 0x03	; 3
     63e:	80 83       	st	Z, r24
	TIM0_overflow_interrupt_enable();
     640:	ee e6       	ldi	r30, 0x6E	; 110
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	81 60       	ori	r24, 0x01	; 1
     648:	80 83       	st	Z, r24
	TIM0_overflow_4ms();
     64a:	85 b5       	in	r24, 0x25	; 37
     64c:	8c 7f       	andi	r24, 0xFC	; 252
     64e:	85 bd       	out	0x25, r24	; 37
     650:	85 b5       	in	r24, 0x25	; 37
     652:	84 60       	ori	r24, 0x04	; 4
     654:	85 bd       	out	0x25, r24	; 37

	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
     656:	8c e0       	ldi	r24, 0x0C	; 12
     658:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
	lcd_gotoxy(1, 0); lcd_puts("value:");
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     664:	80 e1       	ldi	r24, 0x10	; 16
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     674:	87 e1       	ldi	r24, 0x17	; 23
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>

	// Configure ADC to convert PC0[A0] analog value

	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	80 64       	ori	r24, 0x40	; 64
     684:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     686:	80 81       	ld	r24, Z
     688:	8f 77       	andi	r24, 0x7F	; 127
     68a:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
     68c:	80 81       	ld	r24, Z
     68e:	80 7f       	andi	r24, 0xF0	; 240
     690:	80 83       	st	Z, r24

	// Enable ADC module
	ADCSRA |= (1<<ADEN);
     692:	ea e7       	ldi	r30, 0x7A	; 122
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	80 68       	ori	r24, 0x80	; 128
     69a:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
     69c:	80 81       	ld	r24, Z
     69e:	88 60       	ori	r24, 0x08	; 8
     6a0:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= ((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2));
     6a2:	80 81       	ld	r24, Z
     6a4:	87 60       	ori	r24, 0x07	; 7
     6a6:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     6a8:	87 e6       	ldi	r24, 0x67	; 103
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 b0 04 	call	0x960	; 0x960 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
     6b0:	78 94       	sei
     6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <main+0x112>

000006b4 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{	
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	8f 93       	push	r24
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
     6c4:	ea e7       	ldi	r30, 0x7A	; 122
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 64       	ori	r24, 0x40	; 64
     6cc:	80 83       	st	Z, r24
}
     6ce:	ff 91       	pop	r31
     6d0:	ef 91       	pop	r30
     6d2:	8f 91       	pop	r24
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	uint16_t a =fce(i++);
     700:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     704:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     708:	9c 01       	movw	r18, r24
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <__data_end+0x1>
     712:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__data_end>
     716:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <fce>
	//uint16_t b = a;
	//char phase[6] ="      ";
	setByte(a);	
     71a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setByte>
	//lcd_gotoxy(8, 1);
	//
	//itoa(b, phase, 10);
	//lcd_puts(phase); // show decimal
	
}	
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_21>:
ISR(ADC_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	26 97       	sbiw	r28, 0x06	; 6
     770:	de bf       	out	0x3e, r29	; 62
     772:	cd bf       	out	0x3d, r28	; 61
	uint16_t value = ADC;
     774:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     778:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	char lcd_string[6] ="      ";
     77c:	86 e0       	ldi	r24, 0x06	; 6
     77e:	e9 e0       	ldi	r30, 0x09	; 9
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	de 01       	movw	r26, r28
     784:	11 96       	adiw	r26, 0x01	; 1
     786:	01 90       	ld	r0, Z+
     788:	0d 92       	st	X+, r0
     78a:	8a 95       	dec	r24
     78c:	e1 f7       	brne	.-8      	; 0x786 <__vector_21+0x46>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     78e:	4a e0       	ldi	r20, 0x0A	; 10
     790:	be 01       	movw	r22, r28
     792:	6f 5f       	subi	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	c8 01       	movw	r24, r16
     798:	0e 94 45 09 	call	0x128a	; 0x128a <__itoa_ncheck>
	
	
	itoa(value, lcd_string, 10); // value to dacimal
	
	if (value < 700) // reduce amount of sent uart data
     79c:	0c 3b       	cpi	r16, 0xBC	; 188
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	18 07       	cpc	r17, r24
     7a2:	60 f4       	brcc	.+24     	; 0x7bc <__vector_21+0x7c>
	{
		uart_puts("ADC value in decimal:");
     7a4:	8f e1       	ldi	r24, 0x1F	; 31
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 de 04 	call	0x9bc	; 0x9bc <uart_puts>
		uart_puts(lcd_string); // send uart value in decimal
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 de 04 	call	0x9bc	; 0x9bc <uart_puts>
		uart_puts("\n");
     7b4:	85 e3       	ldi	r24, 0x35	; 53
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 de 04 	call	0x9bc	; 0x9bc <uart_puts>
	}
	
	
	lcd_gotoxy(8, 0);
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	88 e0       	ldi	r24, 0x08	; 8
     7c0:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("    "); //clear area
     7c4:	87 e3       	ldi	r24, 0x37	; 55
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	lcd_gotoxy(8, 0);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	88 e0       	ldi	r24, 0x08	; 8
     7d0:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts(lcd_string); // show decimal
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	
	

	
	if (value>465 && value<520)fceType=0;
     7dc:	c8 01       	movw	r24, r16
     7de:	82 5d       	subi	r24, 0xD2	; 210
     7e0:	91 40       	sbci	r25, 0x01	; 1
     7e2:	c6 97       	sbiw	r24, 0x36	; 54
     7e4:	10 f4       	brcc	.+4      	; 0x7ea <__vector_21+0xaa>
     7e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	if (value>360 && value<380)fceType=1;
     7ea:	c8 01       	movw	r24, r16
     7ec:	89 56       	subi	r24, 0x69	; 105
     7ee:	91 40       	sbci	r25, 0x01	; 1
     7f0:	43 97       	sbiw	r24, 0x13	; 19
     7f2:	18 f4       	brcc	.+6      	; 0x7fa <__vector_21+0xba>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (value>198 && value<208)fceType=2;
     7fa:	c8 01       	movw	r24, r16
     7fc:	87 5c       	subi	r24, 0xC7	; 199
     7fe:	91 09       	sbc	r25, r1
     800:	09 97       	sbiw	r24, 0x09	; 9
     802:	30 f4       	brcc	.+12     	; 0x810 <__vector_21+0xd0>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (value==0)fceType=10;
     80a:	01 2b       	or	r16, r17
     80c:	19 f0       	breq	.+6      	; 0x814 <__vector_21+0xd4>
     80e:	1e c0       	rjmp	.+60     	; 0x84c <__vector_21+0x10c>
     810:	01 2b       	or	r16, r17
     812:	21 f4       	brne	.+8      	; 0x81c <__vector_21+0xdc>
     814:	8a e0       	ldi	r24, 0x0A	; 10
     816:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     81a:	18 c0       	rjmp	.+48     	; 0x84c <__vector_21+0x10c>
		if (fceType==0){lcd_gotoxy(10, 1); lcd_puts("sin");}
     81c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     820:	81 11       	cpse	r24, r1
     822:	08 c0       	rjmp	.+16     	; 0x834 <__vector_21+0xf4>
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     82c:	8c e3       	ldi	r24, 0x3C	; 60
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
		if (fceType==1){lcd_gotoxy(10, 1); lcd_puts("saw");}
     834:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	41 f4       	brne	.+16     	; 0x84c <__vector_21+0x10c>
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	8a e0       	ldi	r24, 0x0A	; 10
     840:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     844:	80 e4       	ldi	r24, 0x40	; 64
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
		if (fceType==2){lcd_gotoxy(10, 1); lcd_puts("tri");}
     84c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	41 f4       	brne	.+16     	; 0x864 <__vector_21+0x124>
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	8a e0       	ldi	r24, 0x0A	; 10
     858:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     85c:	84 e4       	ldi	r24, 0x44	; 68
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
		if (fceType==10){lcd_gotoxy(10, 1); lcd_puts("off");}
     864:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     868:	8a 30       	cpi	r24, 0x0A	; 10
     86a:	39 f4       	brne	.+14     	; 0x87a <__vector_21+0x13a>
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     872:	88 e4       	ldi	r24, 0x48	; 72
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	
	
	
     87a:	26 96       	adiw	r28, 0x06	; 6
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
     8c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     8c8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8cc:	8c 71       	andi	r24, 0x1C	; 28
     8ce:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <UART_RxHead>
     8d2:	ef 5f       	subi	r30, 0xFF	; 255
     8d4:	ef 71       	andi	r30, 0x1F	; 31
     8d6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <UART_RxTail>
     8da:	e9 17       	cp	r30, r25
     8dc:	39 f0       	breq	.+14     	; 0x8ec <__vector_18+0x3c>
     8de:	e0 93 50 01 	sts	0x0150, r30	; 0x800150 <UART_RxHead>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	ed 5a       	subi	r30, 0xAD	; 173
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	20 83       	st	Z, r18
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <__vector_18+0x3e>
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <UART_LastRxError>
     8f2:	89 2b       	or	r24, r25
     8f4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <UART_LastRxError>
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_19>:
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
     91e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <UART_TxHead>
     922:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <UART_TxTail>
     926:	98 17       	cp	r25, r24
     928:	69 f0       	breq	.+26     	; 0x944 <__vector_19+0x38>
     92a:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <UART_TxTail>
     92e:	ef 5f       	subi	r30, 0xFF	; 255
     930:	ef 71       	andi	r30, 0x1F	; 31
     932:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <UART_TxTail>
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	ed 58       	subi	r30, 0x8D	; 141
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	80 81       	ld	r24, Z
     93e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     942:	05 c0       	rjmp	.+10     	; 0x94e <__vector_19+0x42>
     944:	e1 ec       	ldi	r30, 0xC1	; 193
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	8f 7d       	andi	r24, 0xDF	; 223
     94c:	80 83       	st	Z, r24
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <uart_init>:
     960:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <UART_TxHead>
     964:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <UART_TxTail>
     968:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <UART_RxHead>
     96c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_RxTail>
     970:	99 23       	and	r25, r25
     972:	1c f4       	brge	.+6      	; 0x97a <uart_init+0x1a>
     974:	22 e0       	ldi	r18, 0x02	; 2
     976:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     97a:	90 78       	andi	r25, 0x80	; 128
     97c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     980:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     984:	88 e9       	ldi	r24, 0x98	; 152
     986:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     990:	08 95       	ret

00000992 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     992:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <UART_TxHead>
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     99a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_TxTail>
     99e:	29 17       	cp	r18, r25
     9a0:	e1 f3       	breq	.-8      	; 0x99a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     9a2:	e2 2f       	mov	r30, r18
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ed 58       	subi	r30, 0x8D	; 141
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     9ac:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     9b0:	e1 ec       	ldi	r30, 0xC1	; 193
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	80 83       	st	Z, r24
     9ba:	08 95       	ret

000009bc <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
    while (*s)
     9c2:	88 81       	ld	r24, Y
     9c4:	88 23       	and	r24, r24
     9c6:	31 f0       	breq	.+12     	; 0x9d4 <uart_puts+0x18>
     9c8:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     9ca:	0e 94 c9 04 	call	0x992	; 0x992 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     9ce:	89 91       	ld	r24, Y+
     9d0:	81 11       	cpse	r24, r1
     9d2:	fb cf       	rjmp	.-10     	; 0x9ca <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <__subsf3>:
     9da:	50 58       	subi	r21, 0x80	; 128

000009dc <__addsf3>:
     9dc:	bb 27       	eor	r27, r27
     9de:	aa 27       	eor	r26, r26
     9e0:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3x>
     9e4:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_round>
     9e8:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscA>
     9ec:	38 f0       	brcs	.+14     	; 0x9fc <__addsf3+0x20>
     9ee:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscB>
     9f2:	20 f0       	brcs	.+8      	; 0x9fc <__addsf3+0x20>
     9f4:	39 f4       	brne	.+14     	; 0xa04 <__addsf3+0x28>
     9f6:	9f 3f       	cpi	r25, 0xFF	; 255
     9f8:	19 f4       	brne	.+6      	; 0xa00 <__addsf3+0x24>
     9fa:	26 f4       	brtc	.+8      	; 0xa04 <__addsf3+0x28>
     9fc:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>
     a00:	0e f4       	brtc	.+2      	; 0xa04 <__addsf3+0x28>
     a02:	e0 95       	com	r30
     a04:	e7 fb       	bst	r30, 7
     a06:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>

00000a0a <__addsf3x>:
     a0a:	e9 2f       	mov	r30, r25
     a0c:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_split3>
     a10:	58 f3       	brcs	.-42     	; 0x9e8 <__addsf3+0xc>
     a12:	ba 17       	cp	r27, r26
     a14:	62 07       	cpc	r22, r18
     a16:	73 07       	cpc	r23, r19
     a18:	84 07       	cpc	r24, r20
     a1a:	95 07       	cpc	r25, r21
     a1c:	20 f0       	brcs	.+8      	; 0xa26 <__addsf3x+0x1c>
     a1e:	79 f4       	brne	.+30     	; 0xa3e <__addsf3x+0x34>
     a20:	a6 f5       	brtc	.+104    	; 0xa8a <__addsf3x+0x80>
     a22:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_zero>
     a26:	0e f4       	brtc	.+2      	; 0xa2a <__addsf3x+0x20>
     a28:	e0 95       	com	r30
     a2a:	0b 2e       	mov	r0, r27
     a2c:	ba 2f       	mov	r27, r26
     a2e:	a0 2d       	mov	r26, r0
     a30:	0b 01       	movw	r0, r22
     a32:	b9 01       	movw	r22, r18
     a34:	90 01       	movw	r18, r0
     a36:	0c 01       	movw	r0, r24
     a38:	ca 01       	movw	r24, r20
     a3a:	a0 01       	movw	r20, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	ff 27       	eor	r31, r31
     a40:	59 1b       	sub	r21, r25
     a42:	99 f0       	breq	.+38     	; 0xa6a <__addsf3x+0x60>
     a44:	59 3f       	cpi	r21, 0xF9	; 249
     a46:	50 f4       	brcc	.+20     	; 0xa5c <__addsf3x+0x52>
     a48:	50 3e       	cpi	r21, 0xE0	; 224
     a4a:	68 f1       	brcs	.+90     	; 0xaa6 <__addsf3x+0x9c>
     a4c:	1a 16       	cp	r1, r26
     a4e:	f0 40       	sbci	r31, 0x00	; 0
     a50:	a2 2f       	mov	r26, r18
     a52:	23 2f       	mov	r18, r19
     a54:	34 2f       	mov	r19, r20
     a56:	44 27       	eor	r20, r20
     a58:	58 5f       	subi	r21, 0xF8	; 248
     a5a:	f3 cf       	rjmp	.-26     	; 0xa42 <__addsf3x+0x38>
     a5c:	46 95       	lsr	r20
     a5e:	37 95       	ror	r19
     a60:	27 95       	ror	r18
     a62:	a7 95       	ror	r26
     a64:	f0 40       	sbci	r31, 0x00	; 0
     a66:	53 95       	inc	r21
     a68:	c9 f7       	brne	.-14     	; 0xa5c <__addsf3x+0x52>
     a6a:	7e f4       	brtc	.+30     	; 0xa8a <__addsf3x+0x80>
     a6c:	1f 16       	cp	r1, r31
     a6e:	ba 0b       	sbc	r27, r26
     a70:	62 0b       	sbc	r22, r18
     a72:	73 0b       	sbc	r23, r19
     a74:	84 0b       	sbc	r24, r20
     a76:	ba f0       	brmi	.+46     	; 0xaa6 <__addsf3x+0x9c>
     a78:	91 50       	subi	r25, 0x01	; 1
     a7a:	a1 f0       	breq	.+40     	; 0xaa4 <__addsf3x+0x9a>
     a7c:	ff 0f       	add	r31, r31
     a7e:	bb 1f       	adc	r27, r27
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	88 1f       	adc	r24, r24
     a86:	c2 f7       	brpl	.-16     	; 0xa78 <__addsf3x+0x6e>
     a88:	0e c0       	rjmp	.+28     	; 0xaa6 <__addsf3x+0x9c>
     a8a:	ba 0f       	add	r27, r26
     a8c:	62 1f       	adc	r22, r18
     a8e:	73 1f       	adc	r23, r19
     a90:	84 1f       	adc	r24, r20
     a92:	48 f4       	brcc	.+18     	; 0xaa6 <__addsf3x+0x9c>
     a94:	87 95       	ror	r24
     a96:	77 95       	ror	r23
     a98:	67 95       	ror	r22
     a9a:	b7 95       	ror	r27
     a9c:	f7 95       	ror	r31
     a9e:	9e 3f       	cpi	r25, 0xFE	; 254
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <__addsf3x+0x9a>
     aa2:	b0 cf       	rjmp	.-160    	; 0xa04 <__addsf3+0x28>
     aa4:	93 95       	inc	r25
     aa6:	88 0f       	add	r24, r24
     aa8:	08 f0       	brcs	.+2      	; 0xaac <__addsf3x+0xa2>
     aaa:	99 27       	eor	r25, r25
     aac:	ee 0f       	add	r30, r30
     aae:	97 95       	ror	r25
     ab0:	87 95       	ror	r24
     ab2:	08 95       	ret

00000ab4 <__divsf3>:
     ab4:	0e 94 6e 05 	call	0xadc	; 0xadc <__divsf3x>
     ab8:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_round>
     abc:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscB>
     ac0:	58 f0       	brcs	.+22     	; 0xad8 <__divsf3+0x24>
     ac2:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscA>
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__divsf3+0x24>
     ac8:	29 f4       	brne	.+10     	; 0xad4 <__divsf3+0x20>
     aca:	5f 3f       	cpi	r21, 0xFF	; 255
     acc:	29 f0       	breq	.+10     	; 0xad8 <__divsf3+0x24>
     ace:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
     ad2:	51 11       	cpse	r21, r1
     ad4:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>
     ad8:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>

00000adc <__divsf3x>:
     adc:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_split3>
     ae0:	68 f3       	brcs	.-38     	; 0xabc <__divsf3+0x8>

00000ae2 <__divsf3_pse>:
     ae2:	99 23       	and	r25, r25
     ae4:	b1 f3       	breq	.-20     	; 0xad2 <__divsf3+0x1e>
     ae6:	55 23       	and	r21, r21
     ae8:	91 f3       	breq	.-28     	; 0xace <__divsf3+0x1a>
     aea:	95 1b       	sub	r25, r21
     aec:	55 0b       	sbc	r21, r21
     aee:	bb 27       	eor	r27, r27
     af0:	aa 27       	eor	r26, r26
     af2:	62 17       	cp	r22, r18
     af4:	73 07       	cpc	r23, r19
     af6:	84 07       	cpc	r24, r20
     af8:	38 f0       	brcs	.+14     	; 0xb08 <__divsf3_pse+0x26>
     afa:	9f 5f       	subi	r25, 0xFF	; 255
     afc:	5f 4f       	sbci	r21, 0xFF	; 255
     afe:	22 0f       	add	r18, r18
     b00:	33 1f       	adc	r19, r19
     b02:	44 1f       	adc	r20, r20
     b04:	aa 1f       	adc	r26, r26
     b06:	a9 f3       	breq	.-22     	; 0xaf2 <__divsf3_pse+0x10>
     b08:	35 d0       	rcall	.+106    	; 0xb74 <__divsf3_pse+0x92>
     b0a:	0e 2e       	mov	r0, r30
     b0c:	3a f0       	brmi	.+14     	; 0xb1c <__divsf3_pse+0x3a>
     b0e:	e0 e8       	ldi	r30, 0x80	; 128
     b10:	32 d0       	rcall	.+100    	; 0xb76 <__divsf3_pse+0x94>
     b12:	91 50       	subi	r25, 0x01	; 1
     b14:	50 40       	sbci	r21, 0x00	; 0
     b16:	e6 95       	lsr	r30
     b18:	00 1c       	adc	r0, r0
     b1a:	ca f7       	brpl	.-14     	; 0xb0e <__divsf3_pse+0x2c>
     b1c:	2b d0       	rcall	.+86     	; 0xb74 <__divsf3_pse+0x92>
     b1e:	fe 2f       	mov	r31, r30
     b20:	29 d0       	rcall	.+82     	; 0xb74 <__divsf3_pse+0x92>
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	88 1f       	adc	r24, r24
     b28:	bb 1f       	adc	r27, r27
     b2a:	26 17       	cp	r18, r22
     b2c:	37 07       	cpc	r19, r23
     b2e:	48 07       	cpc	r20, r24
     b30:	ab 07       	cpc	r26, r27
     b32:	b0 e8       	ldi	r27, 0x80	; 128
     b34:	09 f0       	breq	.+2      	; 0xb38 <__divsf3_pse+0x56>
     b36:	bb 0b       	sbc	r27, r27
     b38:	80 2d       	mov	r24, r0
     b3a:	bf 01       	movw	r22, r30
     b3c:	ff 27       	eor	r31, r31
     b3e:	93 58       	subi	r25, 0x83	; 131
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	3a f0       	brmi	.+14     	; 0xb52 <__divsf3_pse+0x70>
     b44:	9e 3f       	cpi	r25, 0xFE	; 254
     b46:	51 05       	cpc	r21, r1
     b48:	78 f0       	brcs	.+30     	; 0xb68 <__divsf3_pse+0x86>
     b4a:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
     b4e:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>
     b52:	5f 3f       	cpi	r21, 0xFF	; 255
     b54:	e4 f3       	brlt	.-8      	; 0xb4e <__divsf3_pse+0x6c>
     b56:	98 3e       	cpi	r25, 0xE8	; 232
     b58:	d4 f3       	brlt	.-12     	; 0xb4e <__divsf3_pse+0x6c>
     b5a:	86 95       	lsr	r24
     b5c:	77 95       	ror	r23
     b5e:	67 95       	ror	r22
     b60:	b7 95       	ror	r27
     b62:	f7 95       	ror	r31
     b64:	9f 5f       	subi	r25, 0xFF	; 255
     b66:	c9 f7       	brne	.-14     	; 0xb5a <__divsf3_pse+0x78>
     b68:	88 0f       	add	r24, r24
     b6a:	91 1d       	adc	r25, r1
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	97 f9       	bld	r25, 7
     b72:	08 95       	ret
     b74:	e1 e0       	ldi	r30, 0x01	; 1
     b76:	66 0f       	add	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	88 1f       	adc	r24, r24
     b7c:	bb 1f       	adc	r27, r27
     b7e:	62 17       	cp	r22, r18
     b80:	73 07       	cpc	r23, r19
     b82:	84 07       	cpc	r24, r20
     b84:	ba 07       	cpc	r27, r26
     b86:	20 f0       	brcs	.+8      	; 0xb90 <__divsf3_pse+0xae>
     b88:	62 1b       	sub	r22, r18
     b8a:	73 0b       	sbc	r23, r19
     b8c:	84 0b       	sbc	r24, r20
     b8e:	ba 0b       	sbc	r27, r26
     b90:	ee 1f       	adc	r30, r30
     b92:	88 f7       	brcc	.-30     	; 0xb76 <__divsf3_pse+0x94>
     b94:	e0 95       	com	r30
     b96:	08 95       	ret

00000b98 <__fixsfsi>:
     b98:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
     b9c:	68 94       	set
     b9e:	b1 11       	cpse	r27, r1
     ba0:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>
     ba4:	08 95       	ret

00000ba6 <__fixunssfsi>:
     ba6:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_splitA>
     baa:	88 f0       	brcs	.+34     	; 0xbce <__fixunssfsi+0x28>
     bac:	9f 57       	subi	r25, 0x7F	; 127
     bae:	98 f0       	brcs	.+38     	; 0xbd6 <__fixunssfsi+0x30>
     bb0:	b9 2f       	mov	r27, r25
     bb2:	99 27       	eor	r25, r25
     bb4:	b7 51       	subi	r27, 0x17	; 23
     bb6:	b0 f0       	brcs	.+44     	; 0xbe4 <__fixunssfsi+0x3e>
     bb8:	e1 f0       	breq	.+56     	; 0xbf2 <__fixunssfsi+0x4c>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	1a f0       	brmi	.+6      	; 0xbca <__fixunssfsi+0x24>
     bc4:	ba 95       	dec	r27
     bc6:	c9 f7       	brne	.-14     	; 0xbba <__fixunssfsi+0x14>
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <__fixunssfsi+0x4c>
     bca:	b1 30       	cpi	r27, 0x01	; 1
     bcc:	91 f0       	breq	.+36     	; 0xbf2 <__fixunssfsi+0x4c>
     bce:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_zero>
     bd2:	b1 e0       	ldi	r27, 0x01	; 1
     bd4:	08 95       	ret
     bd6:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_zero>
     bda:	67 2f       	mov	r22, r23
     bdc:	78 2f       	mov	r23, r24
     bde:	88 27       	eor	r24, r24
     be0:	b8 5f       	subi	r27, 0xF8	; 248
     be2:	39 f0       	breq	.+14     	; 0xbf2 <__fixunssfsi+0x4c>
     be4:	b9 3f       	cpi	r27, 0xF9	; 249
     be6:	cc f3       	brlt	.-14     	; 0xbda <__fixunssfsi+0x34>
     be8:	86 95       	lsr	r24
     bea:	77 95       	ror	r23
     bec:	67 95       	ror	r22
     bee:	b3 95       	inc	r27
     bf0:	d9 f7       	brne	.-10     	; 0xbe8 <__fixunssfsi+0x42>
     bf2:	3e f4       	brtc	.+14     	; 0xc02 <__fixunssfsi+0x5c>
     bf4:	90 95       	com	r25
     bf6:	80 95       	com	r24
     bf8:	70 95       	com	r23
     bfa:	61 95       	neg	r22
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	8f 4f       	sbci	r24, 0xFF	; 255
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	08 95       	ret

00000c04 <__floatunsisf>:
     c04:	e8 94       	clt
     c06:	09 c0       	rjmp	.+18     	; 0xc1a <__floatsisf+0x12>

00000c08 <__floatsisf>:
     c08:	97 fb       	bst	r25, 7
     c0a:	3e f4       	brtc	.+14     	; 0xc1a <__floatsisf+0x12>
     c0c:	90 95       	com	r25
     c0e:	80 95       	com	r24
     c10:	70 95       	com	r23
     c12:	61 95       	neg	r22
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	8f 4f       	sbci	r24, 0xFF	; 255
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	99 23       	and	r25, r25
     c1c:	a9 f0       	breq	.+42     	; 0xc48 <__floatsisf+0x40>
     c1e:	f9 2f       	mov	r31, r25
     c20:	96 e9       	ldi	r25, 0x96	; 150
     c22:	bb 27       	eor	r27, r27
     c24:	93 95       	inc	r25
     c26:	f6 95       	lsr	r31
     c28:	87 95       	ror	r24
     c2a:	77 95       	ror	r23
     c2c:	67 95       	ror	r22
     c2e:	b7 95       	ror	r27
     c30:	f1 11       	cpse	r31, r1
     c32:	f8 cf       	rjmp	.-16     	; 0xc24 <__floatsisf+0x1c>
     c34:	fa f4       	brpl	.+62     	; 0xc74 <__floatsisf+0x6c>
     c36:	bb 0f       	add	r27, r27
     c38:	11 f4       	brne	.+4      	; 0xc3e <__floatsisf+0x36>
     c3a:	60 ff       	sbrs	r22, 0
     c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__floatsisf+0x6c>
     c3e:	6f 5f       	subi	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	8f 4f       	sbci	r24, 0xFF	; 255
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	16 c0       	rjmp	.+44     	; 0xc74 <__floatsisf+0x6c>
     c48:	88 23       	and	r24, r24
     c4a:	11 f0       	breq	.+4      	; 0xc50 <__floatsisf+0x48>
     c4c:	96 e9       	ldi	r25, 0x96	; 150
     c4e:	11 c0       	rjmp	.+34     	; 0xc72 <__floatsisf+0x6a>
     c50:	77 23       	and	r23, r23
     c52:	21 f0       	breq	.+8      	; 0xc5c <__floatsisf+0x54>
     c54:	9e e8       	ldi	r25, 0x8E	; 142
     c56:	87 2f       	mov	r24, r23
     c58:	76 2f       	mov	r23, r22
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <__floatsisf+0x5e>
     c5c:	66 23       	and	r22, r22
     c5e:	71 f0       	breq	.+28     	; 0xc7c <__floatsisf+0x74>
     c60:	96 e8       	ldi	r25, 0x86	; 134
     c62:	86 2f       	mov	r24, r22
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	2a f0       	brmi	.+10     	; 0xc74 <__floatsisf+0x6c>
     c6a:	9a 95       	dec	r25
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	da f7       	brpl	.-10     	; 0xc6a <__floatsisf+0x62>
     c74:	88 0f       	add	r24, r24
     c76:	96 95       	lsr	r25
     c78:	87 95       	ror	r24
     c7a:	97 f9       	bld	r25, 7
     c7c:	08 95       	ret
     c7e:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscA>
     c82:	20 f0       	brcs	.+8      	; 0xc8c <__floatsisf+0x84>
     c84:	19 f0       	breq	.+6      	; 0xc8c <__floatsisf+0x84>
     c86:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscB>
     c8a:	50 f4       	brcc	.+20     	; 0xca0 <fmod+0xc>
     c8c:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>
     c90:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>

00000c94 <fmod>:
     c94:	e9 2f       	mov	r30, r25
     c96:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_split3>
     c9a:	88 f3       	brcs	.-30     	; 0xc7e <__floatsisf+0x76>
     c9c:	55 23       	and	r21, r21
     c9e:	b1 f3       	breq	.-20     	; 0xc8c <__floatsisf+0x84>
     ca0:	e7 fb       	bst	r30, 7
     ca2:	62 17       	cp	r22, r18
     ca4:	73 07       	cpc	r23, r19
     ca6:	84 07       	cpc	r24, r20
     ca8:	95 07       	cpc	r25, r21
     caa:	a8 f1       	brcs	.+106    	; 0xd16 <fmod+0x82>
     cac:	89 f3       	breq	.-30     	; 0xc90 <__floatsisf+0x88>
     cae:	e9 2f       	mov	r30, r25
     cb0:	ff 27       	eor	r31, r31
     cb2:	88 23       	and	r24, r24
     cb4:	2a f0       	brmi	.+10     	; 0xcc0 <fmod+0x2c>
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	66 0f       	add	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	88 1f       	adc	r24, r24
     cbe:	da f7       	brpl	.-10     	; 0xcb6 <fmod+0x22>
     cc0:	95 2f       	mov	r25, r21
     cc2:	55 27       	eor	r21, r21
     cc4:	44 23       	and	r20, r20
     cc6:	32 f0       	brmi	.+12     	; 0xcd4 <fmod+0x40>
     cc8:	91 50       	subi	r25, 0x01	; 1
     cca:	50 40       	sbci	r21, 0x00	; 0
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	44 1f       	adc	r20, r20
     cd2:	d2 f7       	brpl	.-12     	; 0xcc8 <fmod+0x34>
     cd4:	bb 27       	eor	r27, r27
     cd6:	e9 1b       	sub	r30, r25
     cd8:	f5 0b       	sbc	r31, r21
     cda:	62 1b       	sub	r22, r18
     cdc:	73 0b       	sbc	r23, r19
     cde:	84 0b       	sbc	r24, r20
     ce0:	b1 09       	sbc	r27, r1
     ce2:	b1 f2       	breq	.-84     	; 0xc90 <__floatsisf+0x88>
     ce4:	22 f4       	brpl	.+8      	; 0xcee <fmod+0x5a>
     ce6:	62 0f       	add	r22, r18
     ce8:	73 1f       	adc	r23, r19
     cea:	84 1f       	adc	r24, r20
     cec:	b1 1d       	adc	r27, r1
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	2a f0       	brmi	.+10     	; 0xcfc <fmod+0x68>
     cf2:	66 0f       	add	r22, r22
     cf4:	77 1f       	adc	r23, r23
     cf6:	88 1f       	adc	r24, r24
     cf8:	bb 1f       	adc	r27, r27
     cfa:	ef cf       	rjmp	.-34     	; 0xcda <fmod+0x46>
     cfc:	91 50       	subi	r25, 0x01	; 1
     cfe:	50 40       	sbci	r21, 0x00	; 0
     d00:	62 f0       	brmi	.+24     	; 0xd1a <fmod+0x86>
     d02:	41 f0       	breq	.+16     	; 0xd14 <fmod+0x80>
     d04:	88 23       	and	r24, r24
     d06:	32 f0       	brmi	.+12     	; 0xd14 <fmod+0x80>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	50 40       	sbci	r21, 0x00	; 0
     d12:	c1 f7       	brne	.-16     	; 0xd04 <fmod+0x70>
     d14:	93 95       	inc	r25
     d16:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_mpack>
     d1a:	86 95       	lsr	r24
     d1c:	77 95       	ror	r23
     d1e:	67 95       	ror	r22
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	d9 f7       	brne	.-10     	; 0xd1a <fmod+0x86>
     d24:	f7 cf       	rjmp	.-18     	; 0xd14 <fmod+0x80>

00000d26 <__fp_inf>:
     d26:	97 f9       	bld	r25, 7
     d28:	9f 67       	ori	r25, 0x7F	; 127
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	08 95       	ret

00000d32 <__fp_mpack>:
     d32:	9f 3f       	cpi	r25, 0xFF	; 255
     d34:	31 f0       	breq	.+12     	; 0xd42 <__fp_mpack_finite+0xc>

00000d36 <__fp_mpack_finite>:
     d36:	91 50       	subi	r25, 0x01	; 1
     d38:	20 f4       	brcc	.+8      	; 0xd42 <__fp_mpack_finite+0xc>
     d3a:	87 95       	ror	r24
     d3c:	77 95       	ror	r23
     d3e:	67 95       	ror	r22
     d40:	b7 95       	ror	r27
     d42:	88 0f       	add	r24, r24
     d44:	91 1d       	adc	r25, r1
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	97 f9       	bld	r25, 7
     d4c:	08 95       	ret

00000d4e <__fp_nan>:
     d4e:	9f ef       	ldi	r25, 0xFF	; 255
     d50:	80 ec       	ldi	r24, 0xC0	; 192
     d52:	08 95       	ret

00000d54 <__fp_pscA>:
     d54:	00 24       	eor	r0, r0
     d56:	0a 94       	dec	r0
     d58:	16 16       	cp	r1, r22
     d5a:	17 06       	cpc	r1, r23
     d5c:	18 06       	cpc	r1, r24
     d5e:	09 06       	cpc	r0, r25
     d60:	08 95       	ret

00000d62 <__fp_pscB>:
     d62:	00 24       	eor	r0, r0
     d64:	0a 94       	dec	r0
     d66:	12 16       	cp	r1, r18
     d68:	13 06       	cpc	r1, r19
     d6a:	14 06       	cpc	r1, r20
     d6c:	05 06       	cpc	r0, r21
     d6e:	08 95       	ret

00000d70 <__fp_round>:
     d70:	09 2e       	mov	r0, r25
     d72:	03 94       	inc	r0
     d74:	00 0c       	add	r0, r0
     d76:	11 f4       	brne	.+4      	; 0xd7c <__fp_round+0xc>
     d78:	88 23       	and	r24, r24
     d7a:	52 f0       	brmi	.+20     	; 0xd90 <__fp_round+0x20>
     d7c:	bb 0f       	add	r27, r27
     d7e:	40 f4       	brcc	.+16     	; 0xd90 <__fp_round+0x20>
     d80:	bf 2b       	or	r27, r31
     d82:	11 f4       	brne	.+4      	; 0xd88 <__fp_round+0x18>
     d84:	60 ff       	sbrs	r22, 0
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <__fp_round+0x20>
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	8f 4f       	sbci	r24, 0xFF	; 255
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	08 95       	ret

00000d92 <__fp_split3>:
     d92:	57 fd       	sbrc	r21, 7
     d94:	90 58       	subi	r25, 0x80	; 128
     d96:	44 0f       	add	r20, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	59 f0       	breq	.+22     	; 0xdb2 <__fp_splitA+0x10>
     d9c:	5f 3f       	cpi	r21, 0xFF	; 255
     d9e:	71 f0       	breq	.+28     	; 0xdbc <__fp_splitA+0x1a>
     da0:	47 95       	ror	r20

00000da2 <__fp_splitA>:
     da2:	88 0f       	add	r24, r24
     da4:	97 fb       	bst	r25, 7
     da6:	99 1f       	adc	r25, r25
     da8:	61 f0       	breq	.+24     	; 0xdc2 <__fp_splitA+0x20>
     daa:	9f 3f       	cpi	r25, 0xFF	; 255
     dac:	79 f0       	breq	.+30     	; 0xdcc <__fp_splitA+0x2a>
     dae:	87 95       	ror	r24
     db0:	08 95       	ret
     db2:	12 16       	cp	r1, r18
     db4:	13 06       	cpc	r1, r19
     db6:	14 06       	cpc	r1, r20
     db8:	55 1f       	adc	r21, r21
     dba:	f2 cf       	rjmp	.-28     	; 0xda0 <__fp_split3+0xe>
     dbc:	46 95       	lsr	r20
     dbe:	f1 df       	rcall	.-30     	; 0xda2 <__fp_splitA>
     dc0:	08 c0       	rjmp	.+16     	; 0xdd2 <__fp_splitA+0x30>
     dc2:	16 16       	cp	r1, r22
     dc4:	17 06       	cpc	r1, r23
     dc6:	18 06       	cpc	r1, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	f1 cf       	rjmp	.-30     	; 0xdae <__fp_splitA+0xc>
     dcc:	86 95       	lsr	r24
     dce:	71 05       	cpc	r23, r1
     dd0:	61 05       	cpc	r22, r1
     dd2:	08 94       	sec
     dd4:	08 95       	ret

00000dd6 <__fp_zero>:
     dd6:	e8 94       	clt

00000dd8 <__fp_szero>:
     dd8:	bb 27       	eor	r27, r27
     dda:	66 27       	eor	r22, r22
     ddc:	77 27       	eor	r23, r23
     dde:	cb 01       	movw	r24, r22
     de0:	97 f9       	bld	r25, 7
     de2:	08 95       	ret

00000de4 <__mulsf3>:
     de4:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3x>
     de8:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_round>
     dec:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_pscA>
     df0:	38 f0       	brcs	.+14     	; 0xe00 <__mulsf3+0x1c>
     df2:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscB>
     df6:	20 f0       	brcs	.+8      	; 0xe00 <__mulsf3+0x1c>
     df8:	95 23       	and	r25, r21
     dfa:	11 f0       	breq	.+4      	; 0xe00 <__mulsf3+0x1c>
     dfc:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
     e00:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>
     e04:	11 24       	eor	r1, r1
     e06:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>

00000e0a <__mulsf3x>:
     e0a:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_split3>
     e0e:	70 f3       	brcs	.-36     	; 0xdec <__mulsf3+0x8>

00000e10 <__mulsf3_pse>:
     e10:	95 9f       	mul	r25, r21
     e12:	c1 f3       	breq	.-16     	; 0xe04 <__mulsf3+0x20>
     e14:	95 0f       	add	r25, r21
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	55 1f       	adc	r21, r21
     e1a:	62 9f       	mul	r22, r18
     e1c:	f0 01       	movw	r30, r0
     e1e:	72 9f       	mul	r23, r18
     e20:	bb 27       	eor	r27, r27
     e22:	f0 0d       	add	r31, r0
     e24:	b1 1d       	adc	r27, r1
     e26:	63 9f       	mul	r22, r19
     e28:	aa 27       	eor	r26, r26
     e2a:	f0 0d       	add	r31, r0
     e2c:	b1 1d       	adc	r27, r1
     e2e:	aa 1f       	adc	r26, r26
     e30:	64 9f       	mul	r22, r20
     e32:	66 27       	eor	r22, r22
     e34:	b0 0d       	add	r27, r0
     e36:	a1 1d       	adc	r26, r1
     e38:	66 1f       	adc	r22, r22
     e3a:	82 9f       	mul	r24, r18
     e3c:	22 27       	eor	r18, r18
     e3e:	b0 0d       	add	r27, r0
     e40:	a1 1d       	adc	r26, r1
     e42:	62 1f       	adc	r22, r18
     e44:	73 9f       	mul	r23, r19
     e46:	b0 0d       	add	r27, r0
     e48:	a1 1d       	adc	r26, r1
     e4a:	62 1f       	adc	r22, r18
     e4c:	83 9f       	mul	r24, r19
     e4e:	a0 0d       	add	r26, r0
     e50:	61 1d       	adc	r22, r1
     e52:	22 1f       	adc	r18, r18
     e54:	74 9f       	mul	r23, r20
     e56:	33 27       	eor	r19, r19
     e58:	a0 0d       	add	r26, r0
     e5a:	61 1d       	adc	r22, r1
     e5c:	23 1f       	adc	r18, r19
     e5e:	84 9f       	mul	r24, r20
     e60:	60 0d       	add	r22, r0
     e62:	21 1d       	adc	r18, r1
     e64:	82 2f       	mov	r24, r18
     e66:	76 2f       	mov	r23, r22
     e68:	6a 2f       	mov	r22, r26
     e6a:	11 24       	eor	r1, r1
     e6c:	9f 57       	subi	r25, 0x7F	; 127
     e6e:	50 40       	sbci	r21, 0x00	; 0
     e70:	9a f0       	brmi	.+38     	; 0xe98 <__mulsf3_pse+0x88>
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__mulsf3_pse+0xa0>
     e74:	88 23       	and	r24, r24
     e76:	4a f0       	brmi	.+18     	; 0xe8a <__mulsf3_pse+0x7a>
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	bb 1f       	adc	r27, r27
     e7e:	66 1f       	adc	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	91 50       	subi	r25, 0x01	; 1
     e86:	50 40       	sbci	r21, 0x00	; 0
     e88:	a9 f7       	brne	.-22     	; 0xe74 <__mulsf3_pse+0x64>
     e8a:	9e 3f       	cpi	r25, 0xFE	; 254
     e8c:	51 05       	cpc	r21, r1
     e8e:	80 f0       	brcs	.+32     	; 0xeb0 <__mulsf3_pse+0xa0>
     e90:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
     e94:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>
     e98:	5f 3f       	cpi	r21, 0xFF	; 255
     e9a:	e4 f3       	brlt	.-8      	; 0xe94 <__mulsf3_pse+0x84>
     e9c:	98 3e       	cpi	r25, 0xE8	; 232
     e9e:	d4 f3       	brlt	.-12     	; 0xe94 <__mulsf3_pse+0x84>
     ea0:	86 95       	lsr	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b7 95       	ror	r27
     ea8:	f7 95       	ror	r31
     eaa:	e7 95       	ror	r30
     eac:	9f 5f       	subi	r25, 0xFF	; 255
     eae:	c1 f7       	brne	.-16     	; 0xea0 <__mulsf3_pse+0x90>
     eb0:	fe 2b       	or	r31, r30
     eb2:	88 0f       	add	r24, r24
     eb4:	91 1d       	adc	r25, r1
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	97 f9       	bld	r25, 7
     ebc:	08 95       	ret

00000ebe <pow>:
     ebe:	fa 01       	movw	r30, r20
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	30 96       	adiw	r30, 0x00	; 0
     ec6:	21 05       	cpc	r18, r1
     ec8:	31 05       	cpc	r19, r1
     eca:	a1 f1       	breq	.+104    	; 0xf34 <pow+0x76>
     ecc:	61 15       	cp	r22, r1
     ece:	71 05       	cpc	r23, r1
     ed0:	61 f4       	brne	.+24     	; 0xeea <pow+0x2c>
     ed2:	80 38       	cpi	r24, 0x80	; 128
     ed4:	bf e3       	ldi	r27, 0x3F	; 63
     ed6:	9b 07       	cpc	r25, r27
     ed8:	49 f1       	breq	.+82     	; 0xf2c <pow+0x6e>
     eda:	68 94       	set
     edc:	90 38       	cpi	r25, 0x80	; 128
     ede:	81 05       	cpc	r24, r1
     ee0:	61 f0       	breq	.+24     	; 0xefa <pow+0x3c>
     ee2:	80 38       	cpi	r24, 0x80	; 128
     ee4:	bf ef       	ldi	r27, 0xFF	; 255
     ee6:	9b 07       	cpc	r25, r27
     ee8:	41 f0       	breq	.+16     	; 0xefa <pow+0x3c>
     eea:	99 23       	and	r25, r25
     eec:	4a f5       	brpl	.+82     	; 0xf40 <pow+0x82>
     eee:	ff 3f       	cpi	r31, 0xFF	; 255
     ef0:	e1 05       	cpc	r30, r1
     ef2:	31 05       	cpc	r19, r1
     ef4:	21 05       	cpc	r18, r1
     ef6:	19 f1       	breq	.+70     	; 0xf3e <pow+0x80>
     ef8:	e8 94       	clt
     efa:	08 94       	sec
     efc:	e7 95       	ror	r30
     efe:	d9 01       	movw	r26, r18
     f00:	aa 23       	and	r26, r26
     f02:	29 f4       	brne	.+10     	; 0xf0e <pow+0x50>
     f04:	ab 2f       	mov	r26, r27
     f06:	be 2f       	mov	r27, r30
     f08:	f8 5f       	subi	r31, 0xF8	; 248
     f0a:	d0 f3       	brcs	.-12     	; 0xf00 <pow+0x42>
     f0c:	10 c0       	rjmp	.+32     	; 0xf2e <pow+0x70>
     f0e:	ff 5f       	subi	r31, 0xFF	; 255
     f10:	70 f4       	brcc	.+28     	; 0xf2e <pow+0x70>
     f12:	a6 95       	lsr	r26
     f14:	e0 f7       	brcc	.-8      	; 0xf0e <pow+0x50>
     f16:	f7 39       	cpi	r31, 0x97	; 151
     f18:	50 f0       	brcs	.+20     	; 0xf2e <pow+0x70>
     f1a:	19 f0       	breq	.+6      	; 0xf22 <pow+0x64>
     f1c:	ff 3a       	cpi	r31, 0xAF	; 175
     f1e:	38 f4       	brcc	.+14     	; 0xf2e <pow+0x70>
     f20:	9f 77       	andi	r25, 0x7F	; 127
     f22:	9f 93       	push	r25
     f24:	0d d0       	rcall	.+26     	; 0xf40 <pow+0x82>
     f26:	0f 90       	pop	r0
     f28:	07 fc       	sbrc	r0, 7
     f2a:	90 58       	subi	r25, 0x80	; 128
     f2c:	08 95       	ret
     f2e:	46 f0       	brts	.+16     	; 0xf40 <pow+0x82>
     f30:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	80 e8       	ldi	r24, 0x80	; 128
     f3a:	9f e3       	ldi	r25, 0x3F	; 63
     f3c:	08 95       	ret
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	9f 77       	andi	r25, 0x7F	; 127
     f42:	5f 93       	push	r21
     f44:	4f 93       	push	r20
     f46:	3f 93       	push	r19
     f48:	2f 93       	push	r18
     f4a:	0e 94 a1 08 	call	0x1142	; 0x1142 <log>
     f4e:	2f 91       	pop	r18
     f50:	3f 91       	pop	r19
     f52:	4f 91       	pop	r20
     f54:	5f 91       	pop	r21
     f56:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
     f5a:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <exp>

00000f5e <sin>:
     f5e:	9f 93       	push	r25
     f60:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fp_rempio2>
     f64:	0f 90       	pop	r0
     f66:	07 fc       	sbrc	r0, 7
     f68:	ee 5f       	subi	r30, 0xFE	; 254
     f6a:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_sinus>
     f6e:	29 f4       	brne	.+10     	; 0xf7a <sin+0x1c>
     f70:	16 f0       	brts	.+4      	; 0xf76 <sin+0x18>
     f72:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
     f76:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_zero>
     f7a:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>

00000f7e <exp>:
     f7e:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_splitA>
     f82:	a8 f3       	brcs	.-22     	; 0xf6e <sin+0x10>
     f84:	96 38       	cpi	r25, 0x86	; 134
     f86:	a0 f7       	brcc	.-24     	; 0xf70 <sin+0x12>
     f88:	07 f8       	bld	r0, 7
     f8a:	0f 92       	push	r0
     f8c:	e8 94       	clt
     f8e:	2b e3       	ldi	r18, 0x3B	; 59
     f90:	3a ea       	ldi	r19, 0xAA	; 170
     f92:	48 eb       	ldi	r20, 0xB8	; 184
     f94:	5f e7       	ldi	r21, 0x7F	; 127
     f96:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3_pse>
     f9a:	0f 92       	push	r0
     f9c:	0f 92       	push	r0
     f9e:	0f 92       	push	r0
     fa0:	4d b7       	in	r20, 0x3d	; 61
     fa2:	5e b7       	in	r21, 0x3e	; 62
     fa4:	0f 92       	push	r0
     fa6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <modf>
     faa:	e8 e6       	ldi	r30, 0x68	; 104
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_powser>
     fb2:	4f 91       	pop	r20
     fb4:	5f 91       	pop	r21
     fb6:	ef 91       	pop	r30
     fb8:	ff 91       	pop	r31
     fba:	e5 95       	asr	r30
     fbc:	ee 1f       	adc	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	49 f0       	breq	.+18     	; 0xfd4 <exp+0x56>
     fc2:	fe 57       	subi	r31, 0x7E	; 126
     fc4:	e0 68       	ori	r30, 0x80	; 128
     fc6:	44 27       	eor	r20, r20
     fc8:	ee 0f       	add	r30, r30
     fca:	44 1f       	adc	r20, r20
     fcc:	fa 95       	dec	r31
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <exp+0x4a>
     fd0:	41 95       	neg	r20
     fd2:	55 0b       	sbc	r21, r21
     fd4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ldexp>
     fd8:	0f 90       	pop	r0
     fda:	07 fe       	sbrs	r0, 7
     fdc:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <inverse>
     fe0:	08 95       	ret

00000fe2 <__fp_powser>:
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	1f 93       	push	r17
     fe8:	0f 93       	push	r16
     fea:	ff 92       	push	r15
     fec:	ef 92       	push	r14
     fee:	df 92       	push	r13
     ff0:	7b 01       	movw	r14, r22
     ff2:	8c 01       	movw	r16, r24
     ff4:	68 94       	set
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <__fp_powser+0x22>
     ff8:	da 2e       	mov	r13, r26
     ffa:	ef 01       	movw	r28, r30
     ffc:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3x>
    1000:	fe 01       	movw	r30, r28
    1002:	e8 94       	clt
    1004:	a5 91       	lpm	r26, Z+
    1006:	25 91       	lpm	r18, Z+
    1008:	35 91       	lpm	r19, Z+
    100a:	45 91       	lpm	r20, Z+
    100c:	55 91       	lpm	r21, Z+
    100e:	a6 f3       	brts	.-24     	; 0xff8 <__fp_powser+0x16>
    1010:	ef 01       	movw	r28, r30
    1012:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3x>
    1016:	fe 01       	movw	r30, r28
    1018:	97 01       	movw	r18, r14
    101a:	a8 01       	movw	r20, r16
    101c:	da 94       	dec	r13
    101e:	69 f7       	brne	.-38     	; 0xffa <__fp_powser+0x18>
    1020:	df 90       	pop	r13
    1022:	ef 90       	pop	r14
    1024:	ff 90       	pop	r15
    1026:	0f 91       	pop	r16
    1028:	1f 91       	pop	r17
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret
    1030:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>

00001034 <__fp_rempio2>:
    1034:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_splitA>
    1038:	d8 f3       	brcs	.-10     	; 0x1030 <__fp_powser+0x4e>
    103a:	e8 94       	clt
    103c:	e0 e0       	ldi	r30, 0x00	; 0
    103e:	bb 27       	eor	r27, r27
    1040:	9f 57       	subi	r25, 0x7F	; 127
    1042:	f0 f0       	brcs	.+60     	; 0x1080 <__fp_rempio2+0x4c>
    1044:	2a ed       	ldi	r18, 0xDA	; 218
    1046:	3f e0       	ldi	r19, 0x0F	; 15
    1048:	49 ec       	ldi	r20, 0xC9	; 201
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <__fp_rempio2+0x24>
    104c:	ee 0f       	add	r30, r30
    104e:	bb 0f       	add	r27, r27
    1050:	66 1f       	adc	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	28 f0       	brcs	.+10     	; 0x1062 <__fp_rempio2+0x2e>
    1058:	b2 3a       	cpi	r27, 0xA2	; 162
    105a:	62 07       	cpc	r22, r18
    105c:	73 07       	cpc	r23, r19
    105e:	84 07       	cpc	r24, r20
    1060:	28 f0       	brcs	.+10     	; 0x106c <__fp_rempio2+0x38>
    1062:	b2 5a       	subi	r27, 0xA2	; 162
    1064:	62 0b       	sbc	r22, r18
    1066:	73 0b       	sbc	r23, r19
    1068:	84 0b       	sbc	r24, r20
    106a:	e3 95       	inc	r30
    106c:	9a 95       	dec	r25
    106e:	72 f7       	brpl	.-36     	; 0x104c <__fp_rempio2+0x18>
    1070:	80 38       	cpi	r24, 0x80	; 128
    1072:	30 f4       	brcc	.+12     	; 0x1080 <__fp_rempio2+0x4c>
    1074:	9a 95       	dec	r25
    1076:	bb 0f       	add	r27, r27
    1078:	66 1f       	adc	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	d2 f7       	brpl	.-12     	; 0x1074 <__fp_rempio2+0x40>
    1080:	90 48       	sbci	r25, 0x80	; 128
    1082:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_mpack_finite>

00001086 <__fp_sinus>:
    1086:	ef 93       	push	r30
    1088:	e0 ff       	sbrs	r30, 0
    108a:	07 c0       	rjmp	.+14     	; 0x109a <__fp_sinus+0x14>
    108c:	a2 ea       	ldi	r26, 0xA2	; 162
    108e:	2a ed       	ldi	r18, 0xDA	; 218
    1090:	3f e0       	ldi	r19, 0x0F	; 15
    1092:	49 ec       	ldi	r20, 0xC9	; 201
    1094:	5f eb       	ldi	r21, 0xBF	; 191
    1096:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3x>
    109a:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fp_round>
    109e:	0f 90       	pop	r0
    10a0:	03 94       	inc	r0
    10a2:	01 fc       	sbrc	r0, 1
    10a4:	90 58       	subi	r25, 0x80	; 128
    10a6:	e0 e9       	ldi	r30, 0x90	; 144
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__fp_powsodd>

000010ae <inverse>:
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	9f e3       	ldi	r25, 0x3F	; 63
    10ba:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__divsf3>
    10be:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
    10c2:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_mpack>

000010c6 <ldexp>:
    10c6:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_splitA>
    10ca:	d8 f3       	brcs	.-10     	; 0x10c2 <inverse+0x14>
    10cc:	99 23       	and	r25, r25
    10ce:	c9 f3       	breq	.-14     	; 0x10c2 <inverse+0x14>
    10d0:	94 0f       	add	r25, r20
    10d2:	51 1d       	adc	r21, r1
    10d4:	a3 f3       	brvs	.-24     	; 0x10be <inverse+0x10>
    10d6:	91 50       	subi	r25, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	94 f0       	brlt	.+36     	; 0x1100 <ldexp+0x3a>
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <ldexp+0x2e>
    10de:	88 23       	and	r24, r24
    10e0:	32 f0       	brmi	.+12     	; 0x10ee <ldexp+0x28>
    10e2:	66 0f       	add	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	91 50       	subi	r25, 0x01	; 1
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	c1 f7       	brne	.-16     	; 0x10de <ldexp+0x18>
    10ee:	9e 3f       	cpi	r25, 0xFE	; 254
    10f0:	51 05       	cpc	r21, r1
    10f2:	2c f7       	brge	.-54     	; 0x10be <inverse+0x10>
    10f4:	88 0f       	add	r24, r24
    10f6:	91 1d       	adc	r25, r1
    10f8:	96 95       	lsr	r25
    10fa:	87 95       	ror	r24
    10fc:	97 f9       	bld	r25, 7
    10fe:	08 95       	ret
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	ac f0       	brlt	.+42     	; 0x112e <ldexp+0x68>
    1104:	98 3e       	cpi	r25, 0xE8	; 232
    1106:	9c f0       	brlt	.+38     	; 0x112e <ldexp+0x68>
    1108:	bb 27       	eor	r27, r27
    110a:	86 95       	lsr	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b7 95       	ror	r27
    1112:	08 f4       	brcc	.+2      	; 0x1116 <ldexp+0x50>
    1114:	b1 60       	ori	r27, 0x01	; 1
    1116:	93 95       	inc	r25
    1118:	c1 f7       	brne	.-16     	; 0x110a <ldexp+0x44>
    111a:	bb 0f       	add	r27, r27
    111c:	58 f7       	brcc	.-42     	; 0x10f4 <ldexp+0x2e>
    111e:	11 f4       	brne	.+4      	; 0x1124 <ldexp+0x5e>
    1120:	60 ff       	sbrs	r22, 0
    1122:	e8 cf       	rjmp	.-48     	; 0x10f4 <ldexp+0x2e>
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	e3 cf       	rjmp	.-58     	; 0x10f4 <ldexp+0x2e>
    112e:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_szero>
    1132:	16 f0       	brts	.+4      	; 0x1138 <ldexp+0x72>
    1134:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_mpack>
    1138:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_nan>
    113c:	68 94       	set
    113e:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>

00001142 <log>:
    1142:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_splitA>
    1146:	a8 f3       	brcs	.-22     	; 0x1132 <ldexp+0x6c>
    1148:	99 23       	and	r25, r25
    114a:	c1 f3       	breq	.-16     	; 0x113c <ldexp+0x76>
    114c:	ae f3       	brts	.-22     	; 0x1138 <ldexp+0x72>
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	1f 93       	push	r17
    1154:	0f 93       	push	r16
    1156:	ff 92       	push	r15
    1158:	c9 2f       	mov	r28, r25
    115a:	dd 27       	eor	r29, r29
    115c:	88 23       	and	r24, r24
    115e:	2a f0       	brmi	.+10     	; 0x116a <log+0x28>
    1160:	21 97       	sbiw	r28, 0x01	; 1
    1162:	66 0f       	add	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	da f7       	brpl	.-10     	; 0x1160 <log+0x1e>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e8       	ldi	r20, 0x80	; 128
    1170:	5f eb       	ldi	r21, 0xBF	; 191
    1172:	9f e3       	ldi	r25, 0x3F	; 63
    1174:	88 39       	cpi	r24, 0x98	; 152
    1176:	20 f0       	brcs	.+8      	; 0x1180 <log+0x3e>
    1178:	80 3e       	cpi	r24, 0xE0	; 224
    117a:	38 f0       	brcs	.+14     	; 0x118a <log+0x48>
    117c:	21 96       	adiw	r28, 0x01	; 1
    117e:	8f 77       	andi	r24, 0x7F	; 127
    1180:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3>
    1184:	ee ea       	ldi	r30, 0xAE	; 174
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <log+0x50>
    118a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3>
    118e:	eb ed       	ldi	r30, 0xDB	; 219
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_powser>
    1196:	8b 01       	movw	r16, r22
    1198:	be 01       	movw	r22, r28
    119a:	ec 01       	movw	r28, r24
    119c:	fb 2e       	mov	r15, r27
    119e:	6f 57       	subi	r22, 0x7F	; 127
    11a0:	71 09       	sbc	r23, r1
    11a2:	75 95       	asr	r23
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 0b       	sbc	r24, r24
    11a8:	99 0b       	sbc	r25, r25
    11aa:	0e 94 04 06 	call	0xc08	; 0xc08 <__floatsisf>
    11ae:	28 e1       	ldi	r18, 0x18	; 24
    11b0:	32 e7       	ldi	r19, 0x72	; 114
    11b2:	41 e3       	ldi	r20, 0x31	; 49
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3x>
    11ba:	af 2d       	mov	r26, r15
    11bc:	98 01       	movw	r18, r16
    11be:	ae 01       	movw	r20, r28
    11c0:	ff 90       	pop	r15
    11c2:	0f 91       	pop	r16
    11c4:	1f 91       	pop	r17
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3x>
    11ce:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_round>

000011d2 <modf>:
    11d2:	fa 01       	movw	r30, r20
    11d4:	dc 01       	movw	r26, r24
    11d6:	aa 0f       	add	r26, r26
    11d8:	bb 1f       	adc	r27, r27
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	bf 57       	subi	r27, 0x7F	; 127
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <modf+0x1a>
    11e2:	22 27       	eor	r18, r18
    11e4:	33 27       	eor	r19, r19
    11e6:	44 27       	eor	r20, r20
    11e8:	50 78       	andi	r21, 0x80	; 128
    11ea:	20 c0       	rjmp	.+64     	; 0x122c <modf+0x5a>
    11ec:	b7 51       	subi	r27, 0x17	; 23
    11ee:	90 f4       	brcc	.+36     	; 0x1214 <modf+0x42>
    11f0:	ab 2f       	mov	r26, r27
    11f2:	00 24       	eor	r0, r0
    11f4:	46 95       	lsr	r20
    11f6:	37 95       	ror	r19
    11f8:	27 95       	ror	r18
    11fa:	01 1c       	adc	r0, r1
    11fc:	a3 95       	inc	r26
    11fe:	d2 f3       	brmi	.-12     	; 0x11f4 <modf+0x22>
    1200:	00 20       	and	r0, r0
    1202:	71 f0       	breq	.+28     	; 0x1220 <modf+0x4e>
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	44 1f       	adc	r20, r20
    120a:	b3 95       	inc	r27
    120c:	da f3       	brmi	.-10     	; 0x1204 <modf+0x32>
    120e:	0e d0       	rcall	.+28     	; 0x122c <modf+0x5a>
    1210:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__subsf3>
    1214:	61 30       	cpi	r22, 0x01	; 1
    1216:	71 05       	cpc	r23, r1
    1218:	a0 e8       	ldi	r26, 0x80	; 128
    121a:	8a 07       	cpc	r24, r26
    121c:	b9 46       	sbci	r27, 0x69	; 105
    121e:	30 f4       	brcc	.+12     	; 0x122c <modf+0x5a>
    1220:	9b 01       	movw	r18, r22
    1222:	ac 01       	movw	r20, r24
    1224:	66 27       	eor	r22, r22
    1226:	77 27       	eor	r23, r23
    1228:	88 27       	eor	r24, r24
    122a:	90 78       	andi	r25, 0x80	; 128
    122c:	30 96       	adiw	r30, 0x00	; 0
    122e:	21 f0       	breq	.+8      	; 0x1238 <modf+0x66>
    1230:	20 83       	st	Z, r18
    1232:	31 83       	std	Z+1, r19	; 0x01
    1234:	42 83       	std	Z+2, r20	; 0x02
    1236:	53 83       	std	Z+3, r21	; 0x03
    1238:	08 95       	ret

0000123a <__fp_powsodd>:
    123a:	9f 93       	push	r25
    123c:	8f 93       	push	r24
    123e:	7f 93       	push	r23
    1240:	6f 93       	push	r22
    1242:	ff 93       	push	r31
    1244:	ef 93       	push	r30
    1246:	9b 01       	movw	r18, r22
    1248:	ac 01       	movw	r20, r24
    124a:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3>
    124e:	ef 91       	pop	r30
    1250:	ff 91       	pop	r31
    1252:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_powser>
    1256:	2f 91       	pop	r18
    1258:	3f 91       	pop	r19
    125a:	4f 91       	pop	r20
    125c:	5f 91       	pop	r21
    125e:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__mulsf3>

00001262 <__udivmodhi4>:
    1262:	aa 1b       	sub	r26, r26
    1264:	bb 1b       	sub	r27, r27
    1266:	51 e1       	ldi	r21, 0x11	; 17
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <__udivmodhi4_ep>

0000126a <__udivmodhi4_loop>:
    126a:	aa 1f       	adc	r26, r26
    126c:	bb 1f       	adc	r27, r27
    126e:	a6 17       	cp	r26, r22
    1270:	b7 07       	cpc	r27, r23
    1272:	10 f0       	brcs	.+4      	; 0x1278 <__udivmodhi4_ep>
    1274:	a6 1b       	sub	r26, r22
    1276:	b7 0b       	sbc	r27, r23

00001278 <__udivmodhi4_ep>:
    1278:	88 1f       	adc	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	5a 95       	dec	r21
    127e:	a9 f7       	brne	.-22     	; 0x126a <__udivmodhi4_loop>
    1280:	80 95       	com	r24
    1282:	90 95       	com	r25
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	08 95       	ret

0000128a <__itoa_ncheck>:
    128a:	bb 27       	eor	r27, r27
    128c:	4a 30       	cpi	r20, 0x0A	; 10
    128e:	31 f4       	brne	.+12     	; 0x129c <__itoa_ncheck+0x12>
    1290:	99 23       	and	r25, r25
    1292:	22 f4       	brpl	.+8      	; 0x129c <__itoa_ncheck+0x12>
    1294:	bd e2       	ldi	r27, 0x2D	; 45
    1296:	90 95       	com	r25
    1298:	81 95       	neg	r24
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__utoa_common>

000012a0 <__utoa_ncheck>:
    12a0:	bb 27       	eor	r27, r27

000012a2 <__utoa_common>:
    12a2:	fb 01       	movw	r30, r22
    12a4:	55 27       	eor	r21, r21
    12a6:	aa 27       	eor	r26, r26
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	aa 1f       	adc	r26, r26
    12ae:	a4 17       	cp	r26, r20
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <__utoa_common+0x14>
    12b2:	a4 1b       	sub	r26, r20
    12b4:	83 95       	inc	r24
    12b6:	50 51       	subi	r21, 0x10	; 16
    12b8:	b9 f7       	brne	.-18     	; 0x12a8 <__utoa_common+0x6>
    12ba:	a0 5d       	subi	r26, 0xD0	; 208
    12bc:	aa 33       	cpi	r26, 0x3A	; 58
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <__utoa_common+0x20>
    12c0:	a9 5d       	subi	r26, 0xD9	; 217
    12c2:	a1 93       	st	Z+, r26
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	79 f7       	brne	.-34     	; 0x12a6 <__utoa_common+0x4>
    12c8:	b1 11       	cpse	r27, r1
    12ca:	b1 93       	st	Z+, r27
    12cc:	11 92       	st	Z+, r1
    12ce:	cb 01       	movw	r24, r22
    12d0:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <strrev>

000012d4 <strrev>:
    12d4:	dc 01       	movw	r26, r24
    12d6:	fc 01       	movw	r30, r24
    12d8:	67 2f       	mov	r22, r23
    12da:	71 91       	ld	r23, Z+
    12dc:	77 23       	and	r23, r23
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <strrev+0x4>
    12e0:	32 97       	sbiw	r30, 0x02	; 2
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <strrev+0x18>
    12e4:	7c 91       	ld	r23, X
    12e6:	6d 93       	st	X+, r22
    12e8:	70 83       	st	Z, r23
    12ea:	62 91       	ld	r22, -Z
    12ec:	ae 17       	cp	r26, r30
    12ee:	bf 07       	cpc	r27, r31
    12f0:	c8 f3       	brcs	.-14     	; 0x12e4 <strrev+0x10>
    12f2:	08 95       	ret

000012f4 <_exit>:
    12f4:	f8 94       	cli

000012f6 <__stop_program>:
    12f6:	ff cf       	rjmp	.-2      	; 0x12f6 <__stop_program>
